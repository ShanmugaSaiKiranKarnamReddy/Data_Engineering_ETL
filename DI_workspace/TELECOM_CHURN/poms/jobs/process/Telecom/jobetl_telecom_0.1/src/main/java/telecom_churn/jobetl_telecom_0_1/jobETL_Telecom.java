// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package telecom_churn.jobetl_telecom_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: jobETL_Telecom Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class jobETL_Telecom implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "jobETL_Telecom";
	private final String projectName = "TELECOM_CHURN";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					jobETL_Telecom.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(jobETL_Telecom.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplace_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplace_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tConvertType_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_1_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_1_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_1_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_2_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_2_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_2_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_3_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_3_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_3_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_4_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_4_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_4_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String properties_tDBConnection_1 = "noDatetimeStringSync=true";
				if (properties_tDBConnection_1 == null || properties_tDBConnection_1.trim().length() == 0) {
					properties_tDBConnection_1 += "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else if (properties_tDBConnection_1 != null
						&& !properties_tDBConnection_1.contains("rewriteBatchedStatements")) {
					properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
				}
				if (properties_tDBConnection_1 != null
						&& !properties_tDBConnection_1.contains("allowLoadLocalInfile")) {
					properties_tDBConnection_1 += "&allowLoadLocalInfile=true";
				}

				String url_tDBConnection_1 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "telecom_staging"
						+ "?" + properties_tDBConnection_1;
				String dbUser_tDBConnection_1 = "root";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:EvIr7yd31brFt3NNsJCG/7+Kx492fc8TPLzDuW6/Uo1tRI/jtw==");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("db_tDBConnection_1", "telecom_staging");

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBInput_1Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String SeniorCitizen;

		public String getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Partner;

		public String getPartner() {
			return this.Partner;
		}

		public String Dependents;

		public String getDependents() {
			return this.Dependents;
		}

		public String Tenure;

		public String getTenure() {
			return this.Tenure;
		}

		public String PhoneService;

		public String getPhoneService() {
			return this.PhoneService;
		}

		public String MultipleLines;

		public String getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public String OnlineSecurity;

		public String getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public String OnlineBackup;

		public String getOnlineBackup() {
			return this.OnlineBackup;
		}

		public String DeviceProtection;

		public String getDeviceProtection() {
			return this.DeviceProtection;
		}

		public String TechSupport;

		public String getTechSupport() {
			return this.TechSupport;
		}

		public String StreamingTV;

		public String getStreamingTV() {
			return this.StreamingTV;
		}

		public String StreamingMovies;

		public String getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public String PaperlessBilling;

		public String getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public String MonthlyCharges;

		public String getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public String TotalCharges;

		public String getTotalCharges() {
			return this.TotalCharges;
		}

		public String Churn;

		public String getChurn() {
			return this.Churn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Sno == null) ? 0 : this.Sno.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.Sno == null) {
				if (other.Sno != null)
					return false;

			} else if (!this.Sno.equals(other.Sno))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.Sno = this.Sno;
			other.CustomerID = this.CustomerID;
			other.Gender = this.Gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.Geography = this.Geography;
			other.Country = this.Country;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.Tenure = this.Tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.InternetService = this.InternetService;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;
			other.Contract = this.Contract;
			other.PaperlessBilling = this.PaperlessBilling;
			other.PaymentMethod = this.PaymentMethod;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.Sno = this.Sno;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.CustomerID = readString(dis);

					this.Gender = readString(dis);

					this.SeniorCitizen = readString(dis);

					this.Geography = readString(dis);

					this.Country = readString(dis);

					this.Partner = readString(dis);

					this.Dependents = readString(dis);

					this.Tenure = readString(dis);

					this.PhoneService = readString(dis);

					this.MultipleLines = readString(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readString(dis);

					this.OnlineBackup = readString(dis);

					this.DeviceProtection = readString(dis);

					this.TechSupport = readString(dis);

					this.StreamingTV = readString(dis);

					this.StreamingMovies = readString(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readString(dis);

					this.PaymentMethod = readString(dis);

					this.MonthlyCharges = readString(dis);

					this.TotalCharges = readString(dis);

					this.Churn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Partner, dos);

				// String

				writeString(this.Dependents, dos);

				// String

				writeString(this.Tenure, dos);

				// String

				writeString(this.PhoneService, dos);

				// String

				writeString(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// String

				writeString(this.OnlineSecurity, dos);

				// String

				writeString(this.OnlineBackup, dos);

				// String

				writeString(this.DeviceProtection, dos);

				// String

				writeString(this.TechSupport, dos);

				// String

				writeString(this.StreamingTV, dos);

				// String

				writeString(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// String

				writeString(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// String

				writeString(this.MonthlyCharges, dos);

				// String

				writeString(this.TotalCharges, dos);

				// String

				writeString(this.Churn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",Gender=" + Gender);
			sb.append(",SeniorCitizen=" + SeniorCitizen);
			sb.append(",Geography=" + Geography);
			sb.append(",Country=" + Country);
			sb.append(",Partner=" + Partner);
			sb.append(",Dependents=" + Dependents);
			sb.append(",Tenure=" + Tenure);
			sb.append(",PhoneService=" + PhoneService);
			sb.append(",MultipleLines=" + MultipleLines);
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + OnlineSecurity);
			sb.append(",OnlineBackup=" + OnlineBackup);
			sb.append(",DeviceProtection=" + DeviceProtection);
			sb.append(",TechSupport=" + TechSupport);
			sb.append(",StreamingTV=" + StreamingTV);
			sb.append(",StreamingMovies=" + StreamingMovies);
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + PaperlessBilling);
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + MonthlyCharges);
			sb.append(",TotalCharges=" + TotalCharges);
			sb.append(",Churn=" + Churn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Sno, other.Sno);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String SeniorCitizen;

		public String getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Partner;

		public String getPartner() {
			return this.Partner;
		}

		public String Dependents;

		public String getDependents() {
			return this.Dependents;
		}

		public String Tenure;

		public String getTenure() {
			return this.Tenure;
		}

		public String PhoneService;

		public String getPhoneService() {
			return this.PhoneService;
		}

		public String MultipleLines;

		public String getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public String OnlineSecurity;

		public String getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public String OnlineBackup;

		public String getOnlineBackup() {
			return this.OnlineBackup;
		}

		public String DeviceProtection;

		public String getDeviceProtection() {
			return this.DeviceProtection;
		}

		public String TechSupport;

		public String getTechSupport() {
			return this.TechSupport;
		}

		public String StreamingTV;

		public String getStreamingTV() {
			return this.StreamingTV;
		}

		public String StreamingMovies;

		public String getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public String PaperlessBilling;

		public String getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public String MonthlyCharges;

		public String getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public String TotalCharges;

		public String getTotalCharges() {
			return this.TotalCharges;
		}

		public String Churn;

		public String getChurn() {
			return this.Churn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Sno == null) ? 0 : this.Sno.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtSortRow_1 other = (OnRowsEndStructtSortRow_1) obj;

			if (this.Sno == null) {
				if (other.Sno != null)
					return false;

			} else if (!this.Sno.equals(other.Sno))

				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtSortRow_1 other) {

			other.Sno = this.Sno;
			other.CustomerID = this.CustomerID;
			other.Gender = this.Gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.Geography = this.Geography;
			other.Country = this.Country;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.Tenure = this.Tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.InternetService = this.InternetService;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;
			other.Contract = this.Contract;
			other.PaperlessBilling = this.PaperlessBilling;
			other.PaymentMethod = this.PaymentMethod;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;

		}

		public void copyKeysDataTo(OnRowsEndStructtSortRow_1 other) {

			other.Sno = this.Sno;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.CustomerID = readString(dis);

					this.Gender = readString(dis);

					this.SeniorCitizen = readString(dis);

					this.Geography = readString(dis);

					this.Country = readString(dis);

					this.Partner = readString(dis);

					this.Dependents = readString(dis);

					this.Tenure = readString(dis);

					this.PhoneService = readString(dis);

					this.MultipleLines = readString(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readString(dis);

					this.OnlineBackup = readString(dis);

					this.DeviceProtection = readString(dis);

					this.TechSupport = readString(dis);

					this.StreamingTV = readString(dis);

					this.StreamingMovies = readString(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readString(dis);

					this.PaymentMethod = readString(dis);

					this.MonthlyCharges = readString(dis);

					this.TotalCharges = readString(dis);

					this.Churn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Partner, dos);

				// String

				writeString(this.Dependents, dos);

				// String

				writeString(this.Tenure, dos);

				// String

				writeString(this.PhoneService, dos);

				// String

				writeString(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// String

				writeString(this.OnlineSecurity, dos);

				// String

				writeString(this.OnlineBackup, dos);

				// String

				writeString(this.DeviceProtection, dos);

				// String

				writeString(this.TechSupport, dos);

				// String

				writeString(this.StreamingTV, dos);

				// String

				writeString(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// String

				writeString(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// String

				writeString(this.MonthlyCharges, dos);

				// String

				writeString(this.TotalCharges, dos);

				// String

				writeString(this.Churn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",Gender=" + Gender);
			sb.append(",SeniorCitizen=" + SeniorCitizen);
			sb.append(",Geography=" + Geography);
			sb.append(",Country=" + Country);
			sb.append(",Partner=" + Partner);
			sb.append(",Dependents=" + Dependents);
			sb.append(",Tenure=" + Tenure);
			sb.append(",PhoneService=" + PhoneService);
			sb.append(",MultipleLines=" + MultipleLines);
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + OnlineSecurity);
			sb.append(",OnlineBackup=" + OnlineBackup);
			sb.append(",DeviceProtection=" + DeviceProtection);
			sb.append(",TechSupport=" + TechSupport);
			sb.append(",StreamingTV=" + StreamingTV);
			sb.append(",StreamingMovies=" + StreamingMovies);
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + PaperlessBilling);
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + MonthlyCharges);
			sb.append(",TotalCharges=" + TotalCharges);
			sb.append(",Churn=" + Churn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_1 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Sno, other.Sno);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String SeniorCitizen;

		public String getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Partner;

		public String getPartner() {
			return this.Partner;
		}

		public String Dependents;

		public String getDependents() {
			return this.Dependents;
		}

		public String Tenure;

		public String getTenure() {
			return this.Tenure;
		}

		public String PhoneService;

		public String getPhoneService() {
			return this.PhoneService;
		}

		public String MultipleLines;

		public String getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public String OnlineSecurity;

		public String getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public String OnlineBackup;

		public String getOnlineBackup() {
			return this.OnlineBackup;
		}

		public String DeviceProtection;

		public String getDeviceProtection() {
			return this.DeviceProtection;
		}

		public String TechSupport;

		public String getTechSupport() {
			return this.TechSupport;
		}

		public String StreamingTV;

		public String getStreamingTV() {
			return this.StreamingTV;
		}

		public String StreamingMovies;

		public String getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public String PaperlessBilling;

		public String getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public String MonthlyCharges;

		public String getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public String TotalCharges;

		public String getTotalCharges() {
			return this.TotalCharges;
		}

		public String Churn;

		public String getChurn() {
			return this.Churn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Sno == null) ? 0 : this.Sno.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.Sno == null) {
				if (other.Sno != null)
					return false;

			} else if (!this.Sno.equals(other.Sno))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.Sno = this.Sno;
			other.CustomerID = this.CustomerID;
			other.Gender = this.Gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.Geography = this.Geography;
			other.Country = this.Country;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.Tenure = this.Tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.InternetService = this.InternetService;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;
			other.Contract = this.Contract;
			other.PaperlessBilling = this.PaperlessBilling;
			other.PaymentMethod = this.PaymentMethod;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.Sno = this.Sno;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.CustomerID = readString(dis);

					this.Gender = readString(dis);

					this.SeniorCitizen = readString(dis);

					this.Geography = readString(dis);

					this.Country = readString(dis);

					this.Partner = readString(dis);

					this.Dependents = readString(dis);

					this.Tenure = readString(dis);

					this.PhoneService = readString(dis);

					this.MultipleLines = readString(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readString(dis);

					this.OnlineBackup = readString(dis);

					this.DeviceProtection = readString(dis);

					this.TechSupport = readString(dis);

					this.StreamingTV = readString(dis);

					this.StreamingMovies = readString(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readString(dis);

					this.PaymentMethod = readString(dis);

					this.MonthlyCharges = readString(dis);

					this.TotalCharges = readString(dis);

					this.Churn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Partner, dos);

				// String

				writeString(this.Dependents, dos);

				// String

				writeString(this.Tenure, dos);

				// String

				writeString(this.PhoneService, dos);

				// String

				writeString(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// String

				writeString(this.OnlineSecurity, dos);

				// String

				writeString(this.OnlineBackup, dos);

				// String

				writeString(this.DeviceProtection, dos);

				// String

				writeString(this.TechSupport, dos);

				// String

				writeString(this.StreamingTV, dos);

				// String

				writeString(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// String

				writeString(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// String

				writeString(this.MonthlyCharges, dos);

				// String

				writeString(this.TotalCharges, dos);

				// String

				writeString(this.Churn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",Gender=" + Gender);
			sb.append(",SeniorCitizen=" + SeniorCitizen);
			sb.append(",Geography=" + Geography);
			sb.append(",Country=" + Country);
			sb.append(",Partner=" + Partner);
			sb.append(",Dependents=" + Dependents);
			sb.append(",Tenure=" + Tenure);
			sb.append(",PhoneService=" + PhoneService);
			sb.append(",MultipleLines=" + MultipleLines);
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + OnlineSecurity);
			sb.append(",OnlineBackup=" + OnlineBackup);
			sb.append(",DeviceProtection=" + DeviceProtection);
			sb.append(",TechSupport=" + TechSupport);
			sb.append(",StreamingTV=" + StreamingTV);
			sb.append(",StreamingMovies=" + StreamingMovies);
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + PaperlessBilling);
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + MonthlyCharges);
			sb.append(",TotalCharges=" + TotalCharges);
			sb.append(",Churn=" + Churn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Sno, other.Sno);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String SeniorCitizen;

		public String getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Partner;

		public String getPartner() {
			return this.Partner;
		}

		public String Dependents;

		public String getDependents() {
			return this.Dependents;
		}

		public String Tenure;

		public String getTenure() {
			return this.Tenure;
		}

		public String PhoneService;

		public String getPhoneService() {
			return this.PhoneService;
		}

		public String MultipleLines;

		public String getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public String OnlineSecurity;

		public String getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public String OnlineBackup;

		public String getOnlineBackup() {
			return this.OnlineBackup;
		}

		public String DeviceProtection;

		public String getDeviceProtection() {
			return this.DeviceProtection;
		}

		public String TechSupport;

		public String getTechSupport() {
			return this.TechSupport;
		}

		public String StreamingTV;

		public String getStreamingTV() {
			return this.StreamingTV;
		}

		public String StreamingMovies;

		public String getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public String PaperlessBilling;

		public String getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public String MonthlyCharges;

		public String getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public String TotalCharges;

		public String getTotalCharges() {
			return this.TotalCharges;
		}

		public String Churn;

		public String getChurn() {
			return this.Churn;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Sno == null) ? 0 : this.Sno.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.Sno == null) {
				if (other.Sno != null)
					return false;

			} else if (!this.Sno.equals(other.Sno))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.Sno = this.Sno;
			other.CustomerID = this.CustomerID;
			other.Gender = this.Gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.Geography = this.Geography;
			other.Country = this.Country;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.Tenure = this.Tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.InternetService = this.InternetService;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;
			other.Contract = this.Contract;
			other.PaperlessBilling = this.PaperlessBilling;
			other.PaymentMethod = this.PaymentMethod;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;
			other.errorMessage = this.errorMessage;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.Sno = this.Sno;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.CustomerID = readString(dis);

					this.Gender = readString(dis);

					this.SeniorCitizen = readString(dis);

					this.Geography = readString(dis);

					this.Country = readString(dis);

					this.Partner = readString(dis);

					this.Dependents = readString(dis);

					this.Tenure = readString(dis);

					this.PhoneService = readString(dis);

					this.MultipleLines = readString(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readString(dis);

					this.OnlineBackup = readString(dis);

					this.DeviceProtection = readString(dis);

					this.TechSupport = readString(dis);

					this.StreamingTV = readString(dis);

					this.StreamingMovies = readString(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readString(dis);

					this.PaymentMethod = readString(dis);

					this.MonthlyCharges = readString(dis);

					this.TotalCharges = readString(dis);

					this.Churn = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Partner, dos);

				// String

				writeString(this.Dependents, dos);

				// String

				writeString(this.Tenure, dos);

				// String

				writeString(this.PhoneService, dos);

				// String

				writeString(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// String

				writeString(this.OnlineSecurity, dos);

				// String

				writeString(this.OnlineBackup, dos);

				// String

				writeString(this.DeviceProtection, dos);

				// String

				writeString(this.TechSupport, dos);

				// String

				writeString(this.StreamingTV, dos);

				// String

				writeString(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// String

				writeString(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// String

				writeString(this.MonthlyCharges, dos);

				// String

				writeString(this.TotalCharges, dos);

				// String

				writeString(this.Churn, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",Gender=" + Gender);
			sb.append(",SeniorCitizen=" + SeniorCitizen);
			sb.append(",Geography=" + Geography);
			sb.append(",Country=" + Country);
			sb.append(",Partner=" + Partner);
			sb.append(",Dependents=" + Dependents);
			sb.append(",Tenure=" + Tenure);
			sb.append(",PhoneService=" + PhoneService);
			sb.append(",MultipleLines=" + MultipleLines);
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + OnlineSecurity);
			sb.append(",OnlineBackup=" + OnlineBackup);
			sb.append(",DeviceProtection=" + DeviceProtection);
			sb.append(",TechSupport=" + TechSupport);
			sb.append(",StreamingTV=" + StreamingTV);
			sb.append(",StreamingMovies=" + StreamingMovies);
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + PaperlessBilling);
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + MonthlyCharges);
			sb.append(",TotalCharges=" + TotalCharges);
			sb.append(",Churn=" + Churn);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Sno, other.Sno);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String SeniorCitizen;

		public String getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Partner;

		public String getPartner() {
			return this.Partner;
		}

		public String Dependents;

		public String getDependents() {
			return this.Dependents;
		}

		public String Tenure;

		public String getTenure() {
			return this.Tenure;
		}

		public String PhoneService;

		public String getPhoneService() {
			return this.PhoneService;
		}

		public String MultipleLines;

		public String getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public String OnlineSecurity;

		public String getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public String OnlineBackup;

		public String getOnlineBackup() {
			return this.OnlineBackup;
		}

		public String DeviceProtection;

		public String getDeviceProtection() {
			return this.DeviceProtection;
		}

		public String TechSupport;

		public String getTechSupport() {
			return this.TechSupport;
		}

		public String StreamingTV;

		public String getStreamingTV() {
			return this.StreamingTV;
		}

		public String StreamingMovies;

		public String getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public String PaperlessBilling;

		public String getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public String MonthlyCharges;

		public String getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public String TotalCharges;

		public String getTotalCharges() {
			return this.TotalCharges;
		}

		public String Churn;

		public String getChurn() {
			return this.Churn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Sno == null) ? 0 : this.Sno.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.Sno == null) {
				if (other.Sno != null)
					return false;

			} else if (!this.Sno.equals(other.Sno))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.Sno = this.Sno;
			other.CustomerID = this.CustomerID;
			other.Gender = this.Gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.Geography = this.Geography;
			other.Country = this.Country;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.Tenure = this.Tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.InternetService = this.InternetService;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;
			other.Contract = this.Contract;
			other.PaperlessBilling = this.PaperlessBilling;
			other.PaymentMethod = this.PaymentMethod;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.Sno = this.Sno;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.CustomerID = readString(dis);

					this.Gender = readString(dis);

					this.SeniorCitizen = readString(dis);

					this.Geography = readString(dis);

					this.Country = readString(dis);

					this.Partner = readString(dis);

					this.Dependents = readString(dis);

					this.Tenure = readString(dis);

					this.PhoneService = readString(dis);

					this.MultipleLines = readString(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readString(dis);

					this.OnlineBackup = readString(dis);

					this.DeviceProtection = readString(dis);

					this.TechSupport = readString(dis);

					this.StreamingTV = readString(dis);

					this.StreamingMovies = readString(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readString(dis);

					this.PaymentMethod = readString(dis);

					this.MonthlyCharges = readString(dis);

					this.TotalCharges = readString(dis);

					this.Churn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Partner, dos);

				// String

				writeString(this.Dependents, dos);

				// String

				writeString(this.Tenure, dos);

				// String

				writeString(this.PhoneService, dos);

				// String

				writeString(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// String

				writeString(this.OnlineSecurity, dos);

				// String

				writeString(this.OnlineBackup, dos);

				// String

				writeString(this.DeviceProtection, dos);

				// String

				writeString(this.TechSupport, dos);

				// String

				writeString(this.StreamingTV, dos);

				// String

				writeString(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// String

				writeString(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// String

				writeString(this.MonthlyCharges, dos);

				// String

				writeString(this.TotalCharges, dos);

				// String

				writeString(this.Churn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",Gender=" + Gender);
			sb.append(",SeniorCitizen=" + SeniorCitizen);
			sb.append(",Geography=" + Geography);
			sb.append(",Country=" + Country);
			sb.append(",Partner=" + Partner);
			sb.append(",Dependents=" + Dependents);
			sb.append(",Tenure=" + Tenure);
			sb.append(",PhoneService=" + PhoneService);
			sb.append(",MultipleLines=" + MultipleLines);
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + OnlineSecurity);
			sb.append(",OnlineBackup=" + OnlineBackup);
			sb.append(",DeviceProtection=" + DeviceProtection);
			sb.append(",TechSupport=" + TechSupport);
			sb.append(",StreamingTV=" + StreamingTV);
			sb.append(",StreamingMovies=" + StreamingMovies);
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + PaperlessBilling);
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + MonthlyCharges);
			sb.append(",TotalCharges=" + TotalCharges);
			sb.append(",Churn=" + Churn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Sno, other.Sno);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String SeniorCitizen;

		public String getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Partner;

		public String getPartner() {
			return this.Partner;
		}

		public String Dependents;

		public String getDependents() {
			return this.Dependents;
		}

		public String Tenure;

		public String getTenure() {
			return this.Tenure;
		}

		public String PhoneService;

		public String getPhoneService() {
			return this.PhoneService;
		}

		public String MultipleLines;

		public String getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public String OnlineSecurity;

		public String getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public String OnlineBackup;

		public String getOnlineBackup() {
			return this.OnlineBackup;
		}

		public String DeviceProtection;

		public String getDeviceProtection() {
			return this.DeviceProtection;
		}

		public String TechSupport;

		public String getTechSupport() {
			return this.TechSupport;
		}

		public String StreamingTV;

		public String getStreamingTV() {
			return this.StreamingTV;
		}

		public String StreamingMovies;

		public String getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public String PaperlessBilling;

		public String getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public String MonthlyCharges;

		public String getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public String TotalCharges;

		public String getTotalCharges() {
			return this.TotalCharges;
		}

		public String Churn;

		public String getChurn() {
			return this.Churn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Sno == null) ? 0 : this.Sno.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.Sno == null) {
				if (other.Sno != null)
					return false;

			} else if (!this.Sno.equals(other.Sno))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.Sno = this.Sno;
			other.CustomerID = this.CustomerID;
			other.Gender = this.Gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.Geography = this.Geography;
			other.Country = this.Country;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.Tenure = this.Tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.InternetService = this.InternetService;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;
			other.Contract = this.Contract;
			other.PaperlessBilling = this.PaperlessBilling;
			other.PaymentMethod = this.PaymentMethod;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.Sno = this.Sno;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.CustomerID = readString(dis);

					this.Gender = readString(dis);

					this.SeniorCitizen = readString(dis);

					this.Geography = readString(dis);

					this.Country = readString(dis);

					this.Partner = readString(dis);

					this.Dependents = readString(dis);

					this.Tenure = readString(dis);

					this.PhoneService = readString(dis);

					this.MultipleLines = readString(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readString(dis);

					this.OnlineBackup = readString(dis);

					this.DeviceProtection = readString(dis);

					this.TechSupport = readString(dis);

					this.StreamingTV = readString(dis);

					this.StreamingMovies = readString(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readString(dis);

					this.PaymentMethod = readString(dis);

					this.MonthlyCharges = readString(dis);

					this.TotalCharges = readString(dis);

					this.Churn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Partner, dos);

				// String

				writeString(this.Dependents, dos);

				// String

				writeString(this.Tenure, dos);

				// String

				writeString(this.PhoneService, dos);

				// String

				writeString(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// String

				writeString(this.OnlineSecurity, dos);

				// String

				writeString(this.OnlineBackup, dos);

				// String

				writeString(this.DeviceProtection, dos);

				// String

				writeString(this.TechSupport, dos);

				// String

				writeString(this.StreamingTV, dos);

				// String

				writeString(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// String

				writeString(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// String

				writeString(this.MonthlyCharges, dos);

				// String

				writeString(this.TotalCharges, dos);

				// String

				writeString(this.Churn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",Gender=" + Gender);
			sb.append(",SeniorCitizen=" + SeniorCitizen);
			sb.append(",Geography=" + Geography);
			sb.append(",Country=" + Country);
			sb.append(",Partner=" + Partner);
			sb.append(",Dependents=" + Dependents);
			sb.append(",Tenure=" + Tenure);
			sb.append(",PhoneService=" + PhoneService);
			sb.append(",MultipleLines=" + MultipleLines);
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + OnlineSecurity);
			sb.append(",OnlineBackup=" + OnlineBackup);
			sb.append(",DeviceProtection=" + DeviceProtection);
			sb.append(",TechSupport=" + TechSupport);
			sb.append(",StreamingTV=" + StreamingTV);
			sb.append(",StreamingMovies=" + StreamingMovies);
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + PaperlessBilling);
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + MonthlyCharges);
			sb.append(",TotalCharges=" + TotalCharges);
			sb.append(",Churn=" + Churn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Sno, other.Sno);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();
				row5Struct row5 = new row5Struct();
				row4Struct row4 = new row4Struct();

				/**
				 * [tSortRow_1_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortOut", false);
				start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tSortRow_1_SortOut = 0;

				class Comparablerow3Struct extends row3Struct implements Comparable<Comparablerow3Struct> {

					public int compareTo(Comparablerow3Struct other) {

						if (this.Sno == null && other.Sno != null) {
							return -1;

						} else if (this.Sno != null && other.Sno == null) {
							return 1;

						} else if (this.Sno != null && other.Sno != null) {
							if (!this.Sno.equals(other.Sno)) {
								return this.Sno.compareTo(other.Sno);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow3Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow3Struct>();

				/**
				 * [tSortRow_1_SortOut begin ] stop
				 */

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				class Util_tLogRow_2 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[25];

					public void addRow(String[] row) {

						for (int i = 0; i < 25; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 24 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 24 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|%16$-");
							sbformat.append(colLengths[15]);
							sbformat.append("s");

							sbformat.append("|%17$-");
							sbformat.append(colLengths[16]);
							sbformat.append("s");

							sbformat.append("|%18$-");
							sbformat.append(colLengths[17]);
							sbformat.append("s");

							sbformat.append("|%19$-");
							sbformat.append(colLengths[18]);
							sbformat.append("s");

							sbformat.append("|%20$-");
							sbformat.append(colLengths[19]);
							sbformat.append("s");

							sbformat.append("|%21$-");
							sbformat.append(colLengths[20]);
							sbformat.append("s");

							sbformat.append("|%22$-");
							sbformat.append(colLengths[21]);
							sbformat.append("s");

							sbformat.append("|%23$-");
							sbformat.append(colLengths[22]);
							sbformat.append("s");

							sbformat.append("|%24$-");
							sbformat.append(colLengths[23]);
							sbformat.append("s");

							sbformat.append("|%25$-");
							sbformat.append(colLengths[24]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[24] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
				util_tLogRow_2.setTableName("tLogRow_2");
				util_tLogRow_2.addRow(new String[] { "Sno", "CustomerID", "Gender", "SeniorCitizen", "Geography",
						"Country", "Partner", "Dependents", "Tenure", "PhoneService", "MultipleLines",
						"InternetService", "OnlineSecurity", "OnlineBackup", "DeviceProtection", "TechSupport",
						"StreamingTV", "StreamingMovies", "Contract", "PaperlessBilling", "PaymentMethod",
						"MonthlyCharges", "TotalCharges", "Churn", "errorMessage", });
				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tReplace_1 begin ] start
				 */

				ok_Hash.put("tReplace_1", false);
				start_Hash.put("tReplace_1", System.currentTimeMillis());

				currentComponent = "tReplace_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tReplace_1 = 0;

				int nb_line_tReplace_1 = 0;

				/**
				 * [tReplace_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
				calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "root";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:ZTKKth3tfdm6Yw2G/BqXMizhaEzyhWhCEho1Z7fvsXLjoAphZQ==");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "telecom_staging" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "select  * from telecom_customer_raw;";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.Sno = null;
						} else {

							row1.Sno = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								row1.Sno = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.CustomerID = null;
						} else {

							row1.CustomerID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.Gender = null;
						} else {

							row1.Gender = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.SeniorCitizen = null;
						} else {

							row1.SeniorCitizen = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.Geography = null;
						} else {

							row1.Geography = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.Country = null;
						} else {

							row1.Country = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.Partner = null;
						} else {

							row1.Partner = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.Dependents = null;
						} else {

							row1.Dependents = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.Tenure = null;
						} else {

							row1.Tenure = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.PhoneService = null;
						} else {

							row1.PhoneService = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.MultipleLines = null;
						} else {

							row1.MultipleLines = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.InternetService = null;
						} else {

							row1.InternetService = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.OnlineSecurity = null;
						} else {

							row1.OnlineSecurity = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.OnlineBackup = null;
						} else {

							row1.OnlineBackup = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.DeviceProtection = null;
						} else {

							row1.DeviceProtection = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.TechSupport = null;
						} else {

							row1.TechSupport = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.StreamingTV = null;
						} else {

							row1.StreamingTV = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.StreamingMovies = null;
						} else {

							row1.StreamingMovies = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.Contract = null;
						} else {

							row1.Contract = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.PaperlessBilling = null;
						} else {

							row1.PaperlessBilling = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.PaymentMethod = null;
						} else {

							row1.PaymentMethod = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.MonthlyCharges = null;
						} else {

							row1.MonthlyCharges = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, false);
						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.TotalCharges = null;
						} else {

							row1.TotalCharges = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, false);
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row1.Churn = null;
						} else {

							row1.Churn = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tReplace_1 main ] start
						 */

						currentComponent = "tReplace_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						String searchStr_tReplace_1_1 = "" + "";
						row1.Geography = StringUtils.replaceAllStrictly(row1.Geography, searchStr_tReplace_1_1,
								"NA" + "", true, false);
						String searchStr_tReplace_1_2 = "" + "";
						row1.Country = StringUtils.replaceAllStrictly(row1.Country, searchStr_tReplace_1_2, "NA" + "",
								true, false);
						String searchStr_tReplace_1_3 = "NA" + "";
						row1.Partner = StringUtils.replaceAllStrictly(row1.Partner, searchStr_tReplace_1_3, "NA" + "",
								true, false);
						String searchStr_tReplace_1_4 = "NA" + "";
						row1.Dependents = StringUtils.replaceAllStrictly(row1.Dependents, searchStr_tReplace_1_4,
								"NA" + "", true, false);
						String searchStr_tReplace_1_5 = "" + "";
						row1.Dependents = StringUtils.replaceAllStrictly(row1.Dependents, searchStr_tReplace_1_5,
								"NA" + "", true, false);
						String searchStr_tReplace_1_6 = "" + "";
						row1.Tenure = StringUtils.replaceAllStrictly(row1.Tenure, searchStr_tReplace_1_6, "0" + "",
								true, false);
						String searchStr_tReplace_1_7 = "NA" + "";
						row1.Tenure = StringUtils.replaceAllStrictly(row1.Tenure, searchStr_tReplace_1_7, "NA" + "",
								true, false);
						String searchStr_tReplace_1_8 = "" + "";
						row1.PhoneService = StringUtils.replaceAllStrictly(row1.PhoneService, searchStr_tReplace_1_8,
								"NA" + "", true, false);
						String searchStr_tReplace_1_9 = "No phone service" + "";
						row1.PhoneService = StringUtils.replaceAllStrictly(row1.PhoneService, searchStr_tReplace_1_9,
								"No" + "", true, false);
						String searchStr_tReplace_1_10 = "" + "";
						row1.MultipleLines = StringUtils.replaceAllStrictly(row1.MultipleLines, searchStr_tReplace_1_10,
								"NA" + "", true, false);
						String searchStr_tReplace_1_11 = "" + "";
						row1.InternetService = StringUtils.replaceAllStrictly(row1.InternetService,
								searchStr_tReplace_1_11, "NA" + "", true, false);
						String searchStr_tReplace_1_12 = "NA" + "";
						row1.InternetService = StringUtils.replaceAllStrictly(row1.InternetService,
								searchStr_tReplace_1_12, "NA" + "", true, false);
						String searchStr_tReplace_1_13 = "No internet service" + "";
						row1.OnlineSecurity = StringUtils.replaceAllStrictly(row1.OnlineSecurity,
								searchStr_tReplace_1_13, "No" + "", true, false);
						String searchStr_tReplace_1_14 = "No internet service" + "";
						row1.OnlineBackup = StringUtils.replaceAllStrictly(row1.OnlineBackup, searchStr_tReplace_1_14,
								"No" + "", true, false);
						String searchStr_tReplace_1_15 = "" + "";
						row1.OnlineBackup = StringUtils.replaceAllStrictly(row1.OnlineBackup, searchStr_tReplace_1_15,
								"NA" + "", true, false);
						String searchStr_tReplace_1_16 = "No internet service" + "";
						row1.DeviceProtection = StringUtils.replaceAllStrictly(row1.DeviceProtection,
								searchStr_tReplace_1_16, "No" + "", true, false);
						String searchStr_tReplace_1_17 = "No internet service" + "";
						row1.TechSupport = StringUtils.replaceAllStrictly(row1.TechSupport, searchStr_tReplace_1_17,
								"No" + "", true, false);
						String searchStr_tReplace_1_18 = "No internet service" + "";
						row1.StreamingTV = StringUtils.replaceAllStrictly(row1.StreamingTV, searchStr_tReplace_1_18,
								"No" + "", true, false);
						String searchStr_tReplace_1_19 = "NA" + "";
						row1.PaperlessBilling = StringUtils.replaceAllStrictly(row1.PaperlessBilling,
								searchStr_tReplace_1_19, "NA" + "", true, false);
						String searchStr_tReplace_1_20 = "NA" + "";
						row1.PaymentMethod = StringUtils.replaceAllStrictly(row1.PaymentMethod, searchStr_tReplace_1_20,
								"NA" + "", true, false);
						String searchStr_tReplace_1_21 = "NA" + "";
						row1.MonthlyCharges = StringUtils.replaceAllStrictly(row1.MonthlyCharges,
								searchStr_tReplace_1_21, "NA" + "", true, false);
						String searchStr_tReplace_1_22 = "NA" + "";
						row1.TotalCharges = StringUtils.replaceAllStrictly(row1.TotalCharges, searchStr_tReplace_1_22,
								"NA" + "", true, false);
						String searchStr_tReplace_1_23 = "" + "";
						row1.TotalCharges = StringUtils.replaceAllStrictly(row1.TotalCharges, searchStr_tReplace_1_23,
								"NA" + "", true, false);
						String searchStr_tReplace_1_24 = "No phone service" + "";
						row1.MultipleLines = StringUtils.replaceAllStrictly(row1.MultipleLines, searchStr_tReplace_1_24,
								"No" + "", true, false);
						String searchStr_tReplace_1_25 = "No internet service" + "";
						row1.StreamingMovies = StringUtils.replaceAllStrictly(row1.StreamingMovies,
								searchStr_tReplace_1_25, "No" + "", true, false);
						row2.Sno = row1.Sno;

						row2.CustomerID = row1.CustomerID;

						row2.Gender = row1.Gender;

						row2.SeniorCitizen = row1.SeniorCitizen;

						row2.Geography = row1.Geography;

						row2.Country = row1.Country;

						row2.Partner = row1.Partner;

						row2.Dependents = row1.Dependents;

						row2.Tenure = row1.Tenure;

						row2.PhoneService = row1.PhoneService;

						row2.MultipleLines = row1.MultipleLines;

						row2.InternetService = row1.InternetService;

						row2.OnlineSecurity = row1.OnlineSecurity;

						row2.OnlineBackup = row1.OnlineBackup;

						row2.DeviceProtection = row1.DeviceProtection;

						row2.TechSupport = row1.TechSupport;

						row2.StreamingTV = row1.StreamingTV;

						row2.StreamingMovies = row1.StreamingMovies;

						row2.Contract = row1.Contract;

						row2.PaperlessBilling = row1.PaperlessBilling;

						row2.PaymentMethod = row1.PaymentMethod;

						row2.MonthlyCharges = row1.MonthlyCharges;

						row2.TotalCharges = row1.TotalCharges;

						row2.Churn = row1.Churn;

						nb_line_tReplace_1++;

						tos_count_tReplace_1++;

						/**
						 * [tReplace_1 main ] stop
						 */

						/**
						 * [tReplace_1 process_data_begin ] start
						 */

						currentComponent = "tReplace_1";

						/**
						 * [tReplace_1 process_data_begin ] stop
						 */

						/**
						 * [tFilterRow_1 main ] start
						 */

						currentComponent = "tFilterRow_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
						}

						row4 = null;
						row3 = null;
						Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
						ope_tFilterRow_1.matches((row2.Geography == null ? false : row2.Geography.compareTo("NA") != 0),
								"Geography.compareTo(\"NA\") != 0 failed");
						ope_tFilterRow_1.matches((row2.Country == null ? false : row2.Country.compareTo("NA") != 0),
								"Country.compareTo(\"NA\") != 0 failed");
						ope_tFilterRow_1.matches((row2.Partner == null ? false : row2.Partner.compareTo("NA") != 0),
								"Partner.compareTo(\"NA\") != 0 failed");
						ope_tFilterRow_1.matches(
								(row2.Dependents == null ? false : row2.Dependents.compareTo("NA") != 0),
								"Dependents.compareTo(\"NA\") != 0 failed");
						ope_tFilterRow_1.matches((row2.Tenure == null ? false : row2.Tenure.compareTo("NA") != 0),
								"Tenure.compareTo(\"NA\") != 0 failed");
						ope_tFilterRow_1.matches(
								(row2.PhoneService == null ? false : row2.PhoneService.compareTo("NA") != 0),
								"PhoneService.compareTo(\"NA\") != 0 failed");
						ope_tFilterRow_1.matches(
								(row2.MultipleLines == null ? false : row2.MultipleLines.compareTo("NA") != 0),
								"MultipleLines.compareTo(\"NA\") != 0 failed");
						ope_tFilterRow_1.matches(
								(row2.InternetService == null ? false : row2.InternetService.compareTo("NA") != 0),
								"InternetService.compareTo(\"NA\") != 0 failed");
						ope_tFilterRow_1.matches(
								(row2.DeviceProtection == null ? false : row2.DeviceProtection.compareTo("NA") != 0),
								"DeviceProtection.compareTo(\"NA\") != 0 failed");
						ope_tFilterRow_1.matches(
								(row2.StreamingTV == null ? false : row2.StreamingTV.compareTo("NA") != 0),
								"StreamingTV.compareTo(\"NA\") != 0 failed");
						ope_tFilterRow_1.matches(
								(row2.StreamingMovies == null ? false : row2.StreamingMovies.compareTo("NA") != 0),
								"StreamingMovies.compareTo(\"NA\") != 0 failed");
						ope_tFilterRow_1.matches((row2.Contract == null ? false : row2.Contract.compareTo("NA") != 0),
								"Contract.compareTo(\"NA\") != 0 failed");
						ope_tFilterRow_1.matches(
								(row2.PaymentMethod == null ? false : row2.PaymentMethod.compareTo("NA") != 0),
								"PaymentMethod.compareTo(\"NA\") != 0 failed");
						ope_tFilterRow_1.matches(
								(row2.MonthlyCharges == null ? false : row2.MonthlyCharges.compareTo("NA") != 0),
								"MonthlyCharges.compareTo(\"NA\") != 0 failed");
						ope_tFilterRow_1.matches(
								(row2.TotalCharges == null ? false : row2.TotalCharges.compareTo("NA") != 0),
								"TotalCharges.compareTo(\"NA\") != 0 failed");

						if (ope_tFilterRow_1.getMatchFlag()) {
							if (row3 == null) {
								row3 = new row3Struct();
							}
							row3.Sno = row2.Sno;
							row3.CustomerID = row2.CustomerID;
							row3.Gender = row2.Gender;
							row3.SeniorCitizen = row2.SeniorCitizen;
							row3.Geography = row2.Geography;
							row3.Country = row2.Country;
							row3.Partner = row2.Partner;
							row3.Dependents = row2.Dependents;
							row3.Tenure = row2.Tenure;
							row3.PhoneService = row2.PhoneService;
							row3.MultipleLines = row2.MultipleLines;
							row3.InternetService = row2.InternetService;
							row3.OnlineSecurity = row2.OnlineSecurity;
							row3.OnlineBackup = row2.OnlineBackup;
							row3.DeviceProtection = row2.DeviceProtection;
							row3.TechSupport = row2.TechSupport;
							row3.StreamingTV = row2.StreamingTV;
							row3.StreamingMovies = row2.StreamingMovies;
							row3.Contract = row2.Contract;
							row3.PaperlessBilling = row2.PaperlessBilling;
							row3.PaymentMethod = row2.PaymentMethod;
							row3.MonthlyCharges = row2.MonthlyCharges;
							row3.TotalCharges = row2.TotalCharges;
							row3.Churn = row2.Churn;
							nb_line_ok_tFilterRow_1++;
						} else {
							if (row4 == null) {
								row4 = new row4Struct();
							}
							row4.Sno = row2.Sno;
							row4.CustomerID = row2.CustomerID;
							row4.Gender = row2.Gender;
							row4.SeniorCitizen = row2.SeniorCitizen;
							row4.Geography = row2.Geography;
							row4.Country = row2.Country;
							row4.Partner = row2.Partner;
							row4.Dependents = row2.Dependents;
							row4.Tenure = row2.Tenure;
							row4.PhoneService = row2.PhoneService;
							row4.MultipleLines = row2.MultipleLines;
							row4.InternetService = row2.InternetService;
							row4.OnlineSecurity = row2.OnlineSecurity;
							row4.OnlineBackup = row2.OnlineBackup;
							row4.DeviceProtection = row2.DeviceProtection;
							row4.TechSupport = row2.TechSupport;
							row4.StreamingTV = row2.StreamingTV;
							row4.StreamingMovies = row2.StreamingMovies;
							row4.Contract = row2.Contract;
							row4.PaperlessBilling = row2.PaperlessBilling;
							row4.PaymentMethod = row2.PaymentMethod;
							row4.MonthlyCharges = row2.MonthlyCharges;
							row4.TotalCharges = row2.TotalCharges;
							row4.Churn = row2.Churn;
							row4.errorMessage = ope_tFilterRow_1.getErrorMsg();
							nb_line_reject_tFilterRow_1++;
						}

						nb_line_tFilterRow_1++;

						tos_count_tFilterRow_1++;

						/**
						 * [tFilterRow_1 main ] stop
						 */

						/**
						 * [tFilterRow_1 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_1";

						/**
						 * [tFilterRow_1 process_data_begin ] stop
						 */
// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tSortRow_1_SortOut main ] start
							 */

							currentVirtualComponent = "tSortRow_1";

							currentComponent = "tSortRow_1_SortOut";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
							}

							Comparablerow3Struct arrayRowtSortRow_1_SortOut = new Comparablerow3Struct();

							arrayRowtSortRow_1_SortOut.Sno = row3.Sno;
							arrayRowtSortRow_1_SortOut.CustomerID = row3.CustomerID;
							arrayRowtSortRow_1_SortOut.Gender = row3.Gender;
							arrayRowtSortRow_1_SortOut.SeniorCitizen = row3.SeniorCitizen;
							arrayRowtSortRow_1_SortOut.Geography = row3.Geography;
							arrayRowtSortRow_1_SortOut.Country = row3.Country;
							arrayRowtSortRow_1_SortOut.Partner = row3.Partner;
							arrayRowtSortRow_1_SortOut.Dependents = row3.Dependents;
							arrayRowtSortRow_1_SortOut.Tenure = row3.Tenure;
							arrayRowtSortRow_1_SortOut.PhoneService = row3.PhoneService;
							arrayRowtSortRow_1_SortOut.MultipleLines = row3.MultipleLines;
							arrayRowtSortRow_1_SortOut.InternetService = row3.InternetService;
							arrayRowtSortRow_1_SortOut.OnlineSecurity = row3.OnlineSecurity;
							arrayRowtSortRow_1_SortOut.OnlineBackup = row3.OnlineBackup;
							arrayRowtSortRow_1_SortOut.DeviceProtection = row3.DeviceProtection;
							arrayRowtSortRow_1_SortOut.TechSupport = row3.TechSupport;
							arrayRowtSortRow_1_SortOut.StreamingTV = row3.StreamingTV;
							arrayRowtSortRow_1_SortOut.StreamingMovies = row3.StreamingMovies;
							arrayRowtSortRow_1_SortOut.Contract = row3.Contract;
							arrayRowtSortRow_1_SortOut.PaperlessBilling = row3.PaperlessBilling;
							arrayRowtSortRow_1_SortOut.PaymentMethod = row3.PaymentMethod;
							arrayRowtSortRow_1_SortOut.MonthlyCharges = row3.MonthlyCharges;
							arrayRowtSortRow_1_SortOut.TotalCharges = row3.TotalCharges;
							arrayRowtSortRow_1_SortOut.Churn = row3.Churn;
							list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

							tos_count_tSortRow_1_SortOut++;

							/**
							 * [tSortRow_1_SortOut main ] stop
							 */

							/**
							 * [tSortRow_1_SortOut process_data_begin ] start
							 */

							currentVirtualComponent = "tSortRow_1";

							currentComponent = "tSortRow_1_SortOut";

							/**
							 * [tSortRow_1_SortOut process_data_begin ] stop
							 */

							/**
							 * [tSortRow_1_SortOut process_data_end ] start
							 */

							currentVirtualComponent = "tSortRow_1";

							currentComponent = "tSortRow_1_SortOut";

							/**
							 * [tSortRow_1_SortOut process_data_end ] stop
							 */

						} // End of branch "row3"

// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tLogRow_2 main ] start
							 */

							currentComponent = "tLogRow_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
							}

///////////////////////		

							String[] row_tLogRow_2 = new String[25];

							if (row4.Sno != null) { //
								row_tLogRow_2[0] = String.valueOf(row4.Sno);

							} //

							if (row4.CustomerID != null) { //
								row_tLogRow_2[1] = String.valueOf(row4.CustomerID);

							} //

							if (row4.Gender != null) { //
								row_tLogRow_2[2] = String.valueOf(row4.Gender);

							} //

							if (row4.SeniorCitizen != null) { //
								row_tLogRow_2[3] = String.valueOf(row4.SeniorCitizen);

							} //

							if (row4.Geography != null) { //
								row_tLogRow_2[4] = String.valueOf(row4.Geography);

							} //

							if (row4.Country != null) { //
								row_tLogRow_2[5] = String.valueOf(row4.Country);

							} //

							if (row4.Partner != null) { //
								row_tLogRow_2[6] = String.valueOf(row4.Partner);

							} //

							if (row4.Dependents != null) { //
								row_tLogRow_2[7] = String.valueOf(row4.Dependents);

							} //

							if (row4.Tenure != null) { //
								row_tLogRow_2[8] = String.valueOf(row4.Tenure);

							} //

							if (row4.PhoneService != null) { //
								row_tLogRow_2[9] = String.valueOf(row4.PhoneService);

							} //

							if (row4.MultipleLines != null) { //
								row_tLogRow_2[10] = String.valueOf(row4.MultipleLines);

							} //

							if (row4.InternetService != null) { //
								row_tLogRow_2[11] = String.valueOf(row4.InternetService);

							} //

							if (row4.OnlineSecurity != null) { //
								row_tLogRow_2[12] = String.valueOf(row4.OnlineSecurity);

							} //

							if (row4.OnlineBackup != null) { //
								row_tLogRow_2[13] = String.valueOf(row4.OnlineBackup);

							} //

							if (row4.DeviceProtection != null) { //
								row_tLogRow_2[14] = String.valueOf(row4.DeviceProtection);

							} //

							if (row4.TechSupport != null) { //
								row_tLogRow_2[15] = String.valueOf(row4.TechSupport);

							} //

							if (row4.StreamingTV != null) { //
								row_tLogRow_2[16] = String.valueOf(row4.StreamingTV);

							} //

							if (row4.StreamingMovies != null) { //
								row_tLogRow_2[17] = String.valueOf(row4.StreamingMovies);

							} //

							if (row4.Contract != null) { //
								row_tLogRow_2[18] = String.valueOf(row4.Contract);

							} //

							if (row4.PaperlessBilling != null) { //
								row_tLogRow_2[19] = String.valueOf(row4.PaperlessBilling);

							} //

							if (row4.PaymentMethod != null) { //
								row_tLogRow_2[20] = String.valueOf(row4.PaymentMethod);

							} //

							if (row4.MonthlyCharges != null) { //
								row_tLogRow_2[21] = String.valueOf(row4.MonthlyCharges);

							} //

							if (row4.TotalCharges != null) { //
								row_tLogRow_2[22] = String.valueOf(row4.TotalCharges);

							} //

							if (row4.Churn != null) { //
								row_tLogRow_2[23] = String.valueOf(row4.Churn);

							} //

							if (row4.errorMessage != null) { //
								row_tLogRow_2[24] = String.valueOf(row4.errorMessage);

							} //

							util_tLogRow_2.addRow(row_tLogRow_2);
							nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

							tos_count_tLogRow_2++;

							/**
							 * [tLogRow_2 main ] stop
							 */

							/**
							 * [tLogRow_2 process_data_begin ] start
							 */

							currentComponent = "tLogRow_2";

							/**
							 * [tLogRow_2 process_data_begin ] stop
							 */

							/**
							 * [tLogRow_2 process_data_end ] start
							 */

							currentComponent = "tLogRow_2";

							/**
							 * [tLogRow_2 process_data_end ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFilterRow_1 process_data_end ] start
						 */

						currentComponent = "tFilterRow_1";

						/**
						 * [tFilterRow_1 process_data_end ] stop
						 */

						/**
						 * [tReplace_1 process_data_end ] start
						 */

						currentComponent = "tReplace_1";

						/**
						 * [tReplace_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tReplace_1 end ] start
				 */

				currentComponent = "tReplace_1";

				globalMap.put("tReplace_1_NB_LINE", nb_line_tReplace_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tReplace_1", true);
				end_Hash.put("tReplace_1", System.currentTimeMillis());

				/**
				 * [tReplace_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				row3Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparablerow3Struct[0]);

				java.util.Arrays.sort(array_tSortRow_1_SortOut);

				globalMap.put("tSortRow_1", array_tSortRow_1_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tSortRow_1_SortOut", true);
				end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortOut end ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;

				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "telecom_customer_stage1";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbProperties_tDBOutput_1 = "noDatetimeStringSync=true";
				String url_tDBOutput_1 = null;
				if (dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
					url_tDBOutput_1 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "telecom_staging" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_1 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "telecom_staging" + "?"
							+ properties_tDBOutput_1;
				}
				String driverClass_tDBOutput_1 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_1 = "root";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:UHbvCuazS6LFcdW1f/6hLGFB3r7MwN1eg9aWnuMklZDqwbymQQ==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables("telecom_staging", null,
						null, new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_1.next()) {
						String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
						if (table_tDBOutput_1.equalsIgnoreCase("telecom_customer_stage1")) {
							whetherExist_tDBOutput_1 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtDrop_tDBOutput_1.execute("DROP TABLE `" + tableName_tDBOutput_1 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtCreate_tDBOutput_1.execute("CREATE TABLE `" + tableName_tDBOutput_1
							+ "`(`Sno` INT(255)  ,`CustomerID` VARCHAR(255)  ,`Gender` VARCHAR(255)  ,`SeniorCitizen` VARCHAR(255)  ,`Geography` VARCHAR(255)  ,`Country` VARCHAR(255)  ,`Partner` VARCHAR(255)  ,`Dependents` VARCHAR(255)  ,`Tenure` VARCHAR(255)  ,`PhoneService` VARCHAR(255)  ,`MultipleLines` VARCHAR(255)  ,`InternetService` VARCHAR(255)  ,`OnlineSecurity` VARCHAR(255)  ,`OnlineBackup` VARCHAR(255)  ,`DeviceProtection` VARCHAR(255)  ,`TechSupport` VARCHAR(255)  ,`StreamingTV` VARCHAR(255)  ,`StreamingMovies` VARCHAR(255)  ,`Contract` VARCHAR(255)  ,`PaperlessBilling` VARCHAR(255)  ,`PaymentMethod` VARCHAR(255)  ,`MonthlyCharges` VARCHAR(255)  ,`TotalCharges` VARCHAR(255)  ,`Churn` VARCHAR(255)  ,primary key(`Sno`))");
				}

				String insert_tDBOutput_1 = "INSERT INTO `" + "telecom_customer_stage1"
						+ "` (`Sno`,`CustomerID`,`Gender`,`SeniorCitizen`,`Geography`,`Country`,`Partner`,`Dependents`,`Tenure`,`PhoneService`,`MultipleLines`,`InternetService`,`OnlineSecurity`,`OnlineBackup`,`DeviceProtection`,`TechSupport`,`StreamingTV`,`StreamingMovies`,`Contract`,`PaperlessBilling`,`PaymentMethod`,`MonthlyCharges`,`TotalCharges`,`Churn`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_1 = 100;
				int batchSizeCounter_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tSortRow_1_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortIn", false);
				start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				int tos_count_tSortRow_1_SortIn = 0;

				row3Struct[] array_tSortRow_1_SortIn = (row3Struct[]) globalMap.remove("tSortRow_1");

				int nb_line_tSortRow_1_SortIn = 0;

				row3Struct current_tSortRow_1_SortIn = null;

				for (int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++) {
					current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
					row5.Sno = current_tSortRow_1_SortIn.Sno;
					row5.CustomerID = current_tSortRow_1_SortIn.CustomerID;
					row5.Gender = current_tSortRow_1_SortIn.Gender;
					row5.SeniorCitizen = current_tSortRow_1_SortIn.SeniorCitizen;
					row5.Geography = current_tSortRow_1_SortIn.Geography;
					row5.Country = current_tSortRow_1_SortIn.Country;
					row5.Partner = current_tSortRow_1_SortIn.Partner;
					row5.Dependents = current_tSortRow_1_SortIn.Dependents;
					row5.Tenure = current_tSortRow_1_SortIn.Tenure;
					row5.PhoneService = current_tSortRow_1_SortIn.PhoneService;
					row5.MultipleLines = current_tSortRow_1_SortIn.MultipleLines;
					row5.InternetService = current_tSortRow_1_SortIn.InternetService;
					row5.OnlineSecurity = current_tSortRow_1_SortIn.OnlineSecurity;
					row5.OnlineBackup = current_tSortRow_1_SortIn.OnlineBackup;
					row5.DeviceProtection = current_tSortRow_1_SortIn.DeviceProtection;
					row5.TechSupport = current_tSortRow_1_SortIn.TechSupport;
					row5.StreamingTV = current_tSortRow_1_SortIn.StreamingTV;
					row5.StreamingMovies = current_tSortRow_1_SortIn.StreamingMovies;
					row5.Contract = current_tSortRow_1_SortIn.Contract;
					row5.PaperlessBilling = current_tSortRow_1_SortIn.PaperlessBilling;
					row5.PaymentMethod = current_tSortRow_1_SortIn.PaymentMethod;
					row5.MonthlyCharges = current_tSortRow_1_SortIn.MonthlyCharges;
					row5.TotalCharges = current_tSortRow_1_SortIn.TotalCharges;
					row5.Churn = current_tSortRow_1_SortIn.Churn;
					// increase number of line sorted
					nb_line_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_1_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					tos_count_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn main ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_begin ] stop
					 */

					/**
					 * [tDBOutput_1 main ] start
					 */

					currentComponent = "tDBOutput_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
					}

					whetherReject_tDBOutput_1 = false;
					if (row5.Sno == null) {
						pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
					} else {
						pstmt_tDBOutput_1.setInt(1, row5.Sno);
					}

					if (row5.CustomerID == null) {
						pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(2, row5.CustomerID);
					}

					if (row5.Gender == null) {
						pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(3, row5.Gender);
					}

					if (row5.SeniorCitizen == null) {
						pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(4, row5.SeniorCitizen);
					}

					if (row5.Geography == null) {
						pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(5, row5.Geography);
					}

					if (row5.Country == null) {
						pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(6, row5.Country);
					}

					if (row5.Partner == null) {
						pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(7, row5.Partner);
					}

					if (row5.Dependents == null) {
						pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(8, row5.Dependents);
					}

					if (row5.Tenure == null) {
						pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(9, row5.Tenure);
					}

					if (row5.PhoneService == null) {
						pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(10, row5.PhoneService);
					}

					if (row5.MultipleLines == null) {
						pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(11, row5.MultipleLines);
					}

					if (row5.InternetService == null) {
						pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(12, row5.InternetService);
					}

					if (row5.OnlineSecurity == null) {
						pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(13, row5.OnlineSecurity);
					}

					if (row5.OnlineBackup == null) {
						pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(14, row5.OnlineBackup);
					}

					if (row5.DeviceProtection == null) {
						pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(15, row5.DeviceProtection);
					}

					if (row5.TechSupport == null) {
						pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(16, row5.TechSupport);
					}

					if (row5.StreamingTV == null) {
						pstmt_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(17, row5.StreamingTV);
					}

					if (row5.StreamingMovies == null) {
						pstmt_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(18, row5.StreamingMovies);
					}

					if (row5.Contract == null) {
						pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(19, row5.Contract);
					}

					if (row5.PaperlessBilling == null) {
						pstmt_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(20, row5.PaperlessBilling);
					}

					if (row5.PaymentMethod == null) {
						pstmt_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(21, row5.PaymentMethod);
					}

					if (row5.MonthlyCharges == null) {
						pstmt_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(22, row5.MonthlyCharges);
					}

					if (row5.TotalCharges == null) {
						pstmt_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(23, row5.TotalCharges);
					}

					if (row5.Churn == null) {
						pstmt_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(24, row5.Churn);
					}

					pstmt_tDBOutput_1.addBatch();
					nb_line_tDBOutput_1++;

					batchSizeCounter_tDBOutput_1++;
					if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
						try {
							int countSum_tDBOutput_1 = 0;
							for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
										: 1);
							}
							insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
						} catch (java.sql.BatchUpdateException e) {
							int countSum_tDBOutput_1 = 0;
							for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
							}
							insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
							System.err.println(e.getMessage());
						}

						batchSizeCounter_tDBOutput_1 = 0;
					}
					commitCounter_tDBOutput_1++;

					if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

						try {
							int countSum_tDBOutput_1 = 0;
							for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
							}
							insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
						} catch (java.sql.BatchUpdateException e) {
							int countSum_tDBOutput_1 = 0;
							for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
							}
							insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
							System.err.println(e.getMessage());

						}
						conn_tDBOutput_1.commit();
						commitCounter_tDBOutput_1 = 0;

					}

					tos_count_tDBOutput_1++;

					/**
					 * [tDBOutput_1 main ] stop
					 */

					/**
					 * [tDBOutput_1 process_data_begin ] start
					 */

					currentComponent = "tDBOutput_1";

					/**
					 * [tDBOutput_1 process_data_begin ] stop
					 */

					/**
					 * [tDBOutput_1 process_data_end ] start
					 */

					currentComponent = "tDBOutput_1";

					/**
					 * [tDBOutput_1 process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

				}

				globalMap.put("tSortRow_1_SortIn_NB_LINE", nb_line_tSortRow_1_SortIn);

				ok_Hash.put("tSortRow_1_SortIn", true);
				end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortIn end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (batchSizeCounter_tDBOutput_1 != 0) {
						int countSum_tDBOutput_1 = 0;

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_1 = 0;

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0) {

					conn_tDBOutput_1.commit();

				}

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////

				java.io.PrintStream consoleOut_tLogRow_2 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
				}

				consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
				consoleOut_tLogRow_2.flush();
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBInput_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tSortRow_1_SortIn"
			globalMap.remove("tSortRow_1");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tReplace_1 finally ] start
				 */

				currentComponent = "tReplace_1";

				/**
				 * [tReplace_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tSortRow_1_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				/**
				 * [tSortRow_1_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_1_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				/**
				 * [tSortRow_1_SortIn finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public Integer Gender;

		public Integer getGender() {
			return this.Gender;
		}

		public Integer SeniorCitizen;

		public Integer getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public Integer Partner;

		public Integer getPartner() {
			return this.Partner;
		}

		public Integer Dependents;

		public Integer getDependents() {
			return this.Dependents;
		}

		public Integer tenure;

		public Integer getTenure() {
			return this.tenure;
		}

		public Integer PhoneService;

		public Integer getPhoneService() {
			return this.PhoneService;
		}

		public Integer MultipleLines;

		public Integer getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public Integer OnlineSecurity;

		public Integer getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public Integer OnlineBackup;

		public Integer getOnlineBackup() {
			return this.OnlineBackup;
		}

		public Integer DeviceProtection;

		public Integer getDeviceProtection() {
			return this.DeviceProtection;
		}

		public Integer TechSupport;

		public Integer getTechSupport() {
			return this.TechSupport;
		}

		public Integer StreamingTV;

		public Integer getStreamingTV() {
			return this.StreamingTV;
		}

		public Integer StreamingMovies;

		public Integer getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public Integer PaperlessBilling;

		public Integer getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public Float MonthlyCharges;

		public Float getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public Float TotalCharges;

		public Float getTotalCharges() {
			return this.TotalCharges;
		}

		public Integer Churn;

		public Integer getChurn() {
			return this.Churn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Sno == null) ? 0 : this.Sno.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.Sno == null) {
				if (other.Sno != null)
					return false;

			} else if (!this.Sno.equals(other.Sno))

				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.Sno = this.Sno;
			other.CustomerID = this.CustomerID;
			other.Gender = this.Gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.Geography = this.Geography;
			other.CountryCode = this.CountryCode;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.tenure = this.tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.InternetService = this.InternetService;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;
			other.Contract = this.Contract;
			other.PaperlessBilling = this.PaperlessBilling;
			other.PaymentMethod = this.PaymentMethod;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.Sno = this.Sno;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.CustomerID = readString(dis);

					this.Gender = readInteger(dis);

					this.SeniorCitizen = readInteger(dis);

					this.Geography = readString(dis);

					this.CountryCode = readString(dis);

					this.Partner = readInteger(dis);

					this.Dependents = readInteger(dis);

					this.tenure = readInteger(dis);

					this.PhoneService = readInteger(dis);

					this.MultipleLines = readInteger(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readInteger(dis);

					this.OnlineBackup = readInteger(dis);

					this.DeviceProtection = readInteger(dis);

					this.TechSupport = readInteger(dis);

					this.StreamingTV = readInteger(dis);

					this.StreamingMovies = readInteger(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readInteger(dis);

					this.PaymentMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MonthlyCharges = null;
					} else {
						this.MonthlyCharges = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TotalCharges = null;
					} else {
						this.TotalCharges = dis.readFloat();
					}

					this.Churn = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.CustomerID, dos);

				// Integer

				writeInteger(this.Gender, dos);

				// Integer

				writeInteger(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.CountryCode, dos);

				// Integer

				writeInteger(this.Partner, dos);

				// Integer

				writeInteger(this.Dependents, dos);

				// Integer

				writeInteger(this.tenure, dos);

				// Integer

				writeInteger(this.PhoneService, dos);

				// Integer

				writeInteger(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// Integer

				writeInteger(this.OnlineSecurity, dos);

				// Integer

				writeInteger(this.OnlineBackup, dos);

				// Integer

				writeInteger(this.DeviceProtection, dos);

				// Integer

				writeInteger(this.TechSupport, dos);

				// Integer

				writeInteger(this.StreamingTV, dos);

				// Integer

				writeInteger(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// Integer

				writeInteger(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// Float

				if (this.MonthlyCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MonthlyCharges);
				}

				// Float

				if (this.TotalCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalCharges);
				}

				// Integer

				writeInteger(this.Churn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",Gender=" + String.valueOf(Gender));
			sb.append(",SeniorCitizen=" + String.valueOf(SeniorCitizen));
			sb.append(",Geography=" + Geography);
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Partner=" + String.valueOf(Partner));
			sb.append(",Dependents=" + String.valueOf(Dependents));
			sb.append(",tenure=" + String.valueOf(tenure));
			sb.append(",PhoneService=" + String.valueOf(PhoneService));
			sb.append(",MultipleLines=" + String.valueOf(MultipleLines));
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + String.valueOf(OnlineSecurity));
			sb.append(",OnlineBackup=" + String.valueOf(OnlineBackup));
			sb.append(",DeviceProtection=" + String.valueOf(DeviceProtection));
			sb.append(",TechSupport=" + String.valueOf(TechSupport));
			sb.append(",StreamingTV=" + String.valueOf(StreamingTV));
			sb.append(",StreamingMovies=" + String.valueOf(StreamingMovies));
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + String.valueOf(PaperlessBilling));
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + String.valueOf(MonthlyCharges));
			sb.append(",TotalCharges=" + String.valueOf(TotalCharges));
			sb.append(",Churn=" + String.valueOf(Churn));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Sno, other.Sno);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public Integer Gender;

		public Integer getGender() {
			return this.Gender;
		}

		public Integer SeniorCitizen;

		public Integer getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public Integer Partner;

		public Integer getPartner() {
			return this.Partner;
		}

		public Integer Dependents;

		public Integer getDependents() {
			return this.Dependents;
		}

		public Integer tenure;

		public Integer getTenure() {
			return this.tenure;
		}

		public Integer PhoneService;

		public Integer getPhoneService() {
			return this.PhoneService;
		}

		public Integer MultipleLines;

		public Integer getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public Integer OnlineSecurity;

		public Integer getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public Integer OnlineBackup;

		public Integer getOnlineBackup() {
			return this.OnlineBackup;
		}

		public Integer DeviceProtection;

		public Integer getDeviceProtection() {
			return this.DeviceProtection;
		}

		public Integer TechSupport;

		public Integer getTechSupport() {
			return this.TechSupport;
		}

		public Integer StreamingTV;

		public Integer getStreamingTV() {
			return this.StreamingTV;
		}

		public Integer StreamingMovies;

		public Integer getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public Integer PaperlessBilling;

		public Integer getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public Float MonthlyCharges;

		public Float getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public Float TotalCharges;

		public Float getTotalCharges() {
			return this.TotalCharges;
		}

		public Integer Churn;

		public Integer getChurn() {
			return this.Churn;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Sno == null) ? 0 : this.Sno.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.Sno == null) {
				if (other.Sno != null)
					return false;

			} else if (!this.Sno.equals(other.Sno))

				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.Sno = this.Sno;
			other.CustomerID = this.CustomerID;
			other.Gender = this.Gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.Geography = this.Geography;
			other.CountryCode = this.CountryCode;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.tenure = this.tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.InternetService = this.InternetService;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;
			other.Contract = this.Contract;
			other.PaperlessBilling = this.PaperlessBilling;
			other.PaymentMethod = this.PaymentMethod;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;
			other.errorCode = this.errorCode;
			other.errorMessage = this.errorMessage;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.Sno = this.Sno;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.CustomerID = readString(dis);

					this.Gender = readInteger(dis);

					this.SeniorCitizen = readInteger(dis);

					this.Geography = readString(dis);

					this.CountryCode = readString(dis);

					this.Partner = readInteger(dis);

					this.Dependents = readInteger(dis);

					this.tenure = readInteger(dis);

					this.PhoneService = readInteger(dis);

					this.MultipleLines = readInteger(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readInteger(dis);

					this.OnlineBackup = readInteger(dis);

					this.DeviceProtection = readInteger(dis);

					this.TechSupport = readInteger(dis);

					this.StreamingTV = readInteger(dis);

					this.StreamingMovies = readInteger(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readInteger(dis);

					this.PaymentMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MonthlyCharges = null;
					} else {
						this.MonthlyCharges = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TotalCharges = null;
					} else {
						this.TotalCharges = dis.readFloat();
					}

					this.Churn = readInteger(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.CustomerID, dos);

				// Integer

				writeInteger(this.Gender, dos);

				// Integer

				writeInteger(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.CountryCode, dos);

				// Integer

				writeInteger(this.Partner, dos);

				// Integer

				writeInteger(this.Dependents, dos);

				// Integer

				writeInteger(this.tenure, dos);

				// Integer

				writeInteger(this.PhoneService, dos);

				// Integer

				writeInteger(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// Integer

				writeInteger(this.OnlineSecurity, dos);

				// Integer

				writeInteger(this.OnlineBackup, dos);

				// Integer

				writeInteger(this.DeviceProtection, dos);

				// Integer

				writeInteger(this.TechSupport, dos);

				// Integer

				writeInteger(this.StreamingTV, dos);

				// Integer

				writeInteger(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// Integer

				writeInteger(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// Float

				if (this.MonthlyCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MonthlyCharges);
				}

				// Float

				if (this.TotalCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalCharges);
				}

				// Integer

				writeInteger(this.Churn, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",Gender=" + String.valueOf(Gender));
			sb.append(",SeniorCitizen=" + String.valueOf(SeniorCitizen));
			sb.append(",Geography=" + Geography);
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Partner=" + String.valueOf(Partner));
			sb.append(",Dependents=" + String.valueOf(Dependents));
			sb.append(",tenure=" + String.valueOf(tenure));
			sb.append(",PhoneService=" + String.valueOf(PhoneService));
			sb.append(",MultipleLines=" + String.valueOf(MultipleLines));
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + String.valueOf(OnlineSecurity));
			sb.append(",OnlineBackup=" + String.valueOf(OnlineBackup));
			sb.append(",DeviceProtection=" + String.valueOf(DeviceProtection));
			sb.append(",TechSupport=" + String.valueOf(TechSupport));
			sb.append(",StreamingTV=" + String.valueOf(StreamingTV));
			sb.append(",StreamingMovies=" + String.valueOf(StreamingMovies));
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + String.valueOf(PaperlessBilling));
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + String.valueOf(MonthlyCharges));
			sb.append(",TotalCharges=" + String.valueOf(TotalCharges));
			sb.append(",Churn=" + String.valueOf(Churn));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Sno, other.Sno);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class TelecomStruct implements routines.system.IPersistableRow<TelecomStruct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String SeniorCitizen;

		public String getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public String Partner;

		public String getPartner() {
			return this.Partner;
		}

		public String Dependents;

		public String getDependents() {
			return this.Dependents;
		}

		public String tenure;

		public String getTenure() {
			return this.tenure;
		}

		public String PhoneService;

		public String getPhoneService() {
			return this.PhoneService;
		}

		public String MultipleLines;

		public String getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public String OnlineSecurity;

		public String getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public String OnlineBackup;

		public String getOnlineBackup() {
			return this.OnlineBackup;
		}

		public String DeviceProtection;

		public String getDeviceProtection() {
			return this.DeviceProtection;
		}

		public String TechSupport;

		public String getTechSupport() {
			return this.TechSupport;
		}

		public String StreamingTV;

		public String getStreamingTV() {
			return this.StreamingTV;
		}

		public String StreamingMovies;

		public String getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public String PaperlessBilling;

		public String getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public String MonthlyCharges;

		public String getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public String TotalCharges;

		public String getTotalCharges() {
			return this.TotalCharges;
		}

		public String Churn;

		public String getChurn() {
			return this.Churn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Sno == null) ? 0 : this.Sno.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final TelecomStruct other = (TelecomStruct) obj;

			if (this.Sno == null) {
				if (other.Sno != null)
					return false;

			} else if (!this.Sno.equals(other.Sno))

				return false;

			return true;
		}

		public void copyDataTo(TelecomStruct other) {

			other.Sno = this.Sno;
			other.CustomerID = this.CustomerID;
			other.Gender = this.Gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.Geography = this.Geography;
			other.CountryCode = this.CountryCode;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.tenure = this.tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.InternetService = this.InternetService;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;
			other.Contract = this.Contract;
			other.PaperlessBilling = this.PaperlessBilling;
			other.PaymentMethod = this.PaymentMethod;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;

		}

		public void copyKeysDataTo(TelecomStruct other) {

			other.Sno = this.Sno;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.CustomerID = readString(dis);

					this.Gender = readString(dis);

					this.SeniorCitizen = readString(dis);

					this.Geography = readString(dis);

					this.CountryCode = readString(dis);

					this.Partner = readString(dis);

					this.Dependents = readString(dis);

					this.tenure = readString(dis);

					this.PhoneService = readString(dis);

					this.MultipleLines = readString(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readString(dis);

					this.OnlineBackup = readString(dis);

					this.DeviceProtection = readString(dis);

					this.TechSupport = readString(dis);

					this.StreamingTV = readString(dis);

					this.StreamingMovies = readString(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readString(dis);

					this.PaymentMethod = readString(dis);

					this.MonthlyCharges = readString(dis);

					this.TotalCharges = readString(dis);

					this.Churn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.CountryCode, dos);

				// String

				writeString(this.Partner, dos);

				// String

				writeString(this.Dependents, dos);

				// String

				writeString(this.tenure, dos);

				// String

				writeString(this.PhoneService, dos);

				// String

				writeString(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// String

				writeString(this.OnlineSecurity, dos);

				// String

				writeString(this.OnlineBackup, dos);

				// String

				writeString(this.DeviceProtection, dos);

				// String

				writeString(this.TechSupport, dos);

				// String

				writeString(this.StreamingTV, dos);

				// String

				writeString(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// String

				writeString(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// String

				writeString(this.MonthlyCharges, dos);

				// String

				writeString(this.TotalCharges, dos);

				// String

				writeString(this.Churn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",Gender=" + Gender);
			sb.append(",SeniorCitizen=" + SeniorCitizen);
			sb.append(",Geography=" + Geography);
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Partner=" + Partner);
			sb.append(",Dependents=" + Dependents);
			sb.append(",tenure=" + tenure);
			sb.append(",PhoneService=" + PhoneService);
			sb.append(",MultipleLines=" + MultipleLines);
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + OnlineSecurity);
			sb.append(",OnlineBackup=" + OnlineBackup);
			sb.append(",DeviceProtection=" + DeviceProtection);
			sb.append(",TechSupport=" + TechSupport);
			sb.append(",StreamingTV=" + StreamingTV);
			sb.append(",StreamingMovies=" + StreamingMovies);
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + PaperlessBilling);
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + MonthlyCharges);
			sb.append(",TotalCharges=" + TotalCharges);
			sb.append(",Churn=" + Churn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(TelecomStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Sno, other.Sno);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String SeniorCitizen;

		public String getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public String Partner;

		public String getPartner() {
			return this.Partner;
		}

		public String Dependents;

		public String getDependents() {
			return this.Dependents;
		}

		public String tenure;

		public String getTenure() {
			return this.tenure;
		}

		public String PhoneService;

		public String getPhoneService() {
			return this.PhoneService;
		}

		public String MultipleLines;

		public String getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public String OnlineSecurity;

		public String getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public String OnlineBackup;

		public String getOnlineBackup() {
			return this.OnlineBackup;
		}

		public String DeviceProtection;

		public String getDeviceProtection() {
			return this.DeviceProtection;
		}

		public String TechSupport;

		public String getTechSupport() {
			return this.TechSupport;
		}

		public String StreamingTV;

		public String getStreamingTV() {
			return this.StreamingTV;
		}

		public String StreamingMovies;

		public String getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public String PaperlessBilling;

		public String getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public String MonthlyCharges;

		public String getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public String TotalCharges;

		public String getTotalCharges() {
			return this.TotalCharges;
		}

		public String Churn;

		public String getChurn() {
			return this.Churn;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.CustomerID = readString(dis);

					this.Gender = readString(dis);

					this.SeniorCitizen = readString(dis);

					this.Geography = readString(dis);

					this.CountryCode = readString(dis);

					this.Partner = readString(dis);

					this.Dependents = readString(dis);

					this.tenure = readString(dis);

					this.PhoneService = readString(dis);

					this.MultipleLines = readString(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readString(dis);

					this.OnlineBackup = readString(dis);

					this.DeviceProtection = readString(dis);

					this.TechSupport = readString(dis);

					this.StreamingTV = readString(dis);

					this.StreamingMovies = readString(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readString(dis);

					this.PaymentMethod = readString(dis);

					this.MonthlyCharges = readString(dis);

					this.TotalCharges = readString(dis);

					this.Churn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.CountryCode, dos);

				// String

				writeString(this.Partner, dos);

				// String

				writeString(this.Dependents, dos);

				// String

				writeString(this.tenure, dos);

				// String

				writeString(this.PhoneService, dos);

				// String

				writeString(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// String

				writeString(this.OnlineSecurity, dos);

				// String

				writeString(this.OnlineBackup, dos);

				// String

				writeString(this.DeviceProtection, dos);

				// String

				writeString(this.TechSupport, dos);

				// String

				writeString(this.StreamingTV, dos);

				// String

				writeString(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// String

				writeString(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// String

				writeString(this.MonthlyCharges, dos);

				// String

				writeString(this.TotalCharges, dos);

				// String

				writeString(this.Churn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",Gender=" + Gender);
			sb.append(",SeniorCitizen=" + SeniorCitizen);
			sb.append(",Geography=" + Geography);
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Partner=" + Partner);
			sb.append(",Dependents=" + Dependents);
			sb.append(",tenure=" + tenure);
			sb.append(",PhoneService=" + PhoneService);
			sb.append(",MultipleLines=" + MultipleLines);
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + OnlineSecurity);
			sb.append(",OnlineBackup=" + OnlineBackup);
			sb.append(",DeviceProtection=" + DeviceProtection);
			sb.append(",TechSupport=" + TechSupport);
			sb.append(",StreamingTV=" + StreamingTV);
			sb.append(",StreamingMovies=" + StreamingMovies);
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + PaperlessBilling);
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + MonthlyCharges);
			sb.append(",TotalCharges=" + TotalCharges);
			sb.append(",Churn=" + Churn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String SeniorCitizen;

		public String getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public String Partner;

		public String getPartner() {
			return this.Partner;
		}

		public String Dependents;

		public String getDependents() {
			return this.Dependents;
		}

		public String tenure;

		public String getTenure() {
			return this.tenure;
		}

		public String PhoneService;

		public String getPhoneService() {
			return this.PhoneService;
		}

		public String MultipleLines;

		public String getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public String OnlineSecurity;

		public String getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public String OnlineBackup;

		public String getOnlineBackup() {
			return this.OnlineBackup;
		}

		public String DeviceProtection;

		public String getDeviceProtection() {
			return this.DeviceProtection;
		}

		public String TechSupport;

		public String getTechSupport() {
			return this.TechSupport;
		}

		public String StreamingTV;

		public String getStreamingTV() {
			return this.StreamingTV;
		}

		public String StreamingMovies;

		public String getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public String PaperlessBilling;

		public String getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public String MonthlyCharges;

		public String getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public String TotalCharges;

		public String getTotalCharges() {
			return this.TotalCharges;
		}

		public String Churn;

		public String getChurn() {
			return this.Churn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Sno == null) ? 0 : this.Sno.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.Sno == null) {
				if (other.Sno != null)
					return false;

			} else if (!this.Sno.equals(other.Sno))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.Sno = this.Sno;
			other.CustomerID = this.CustomerID;
			other.Gender = this.Gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.Geography = this.Geography;
			other.CountryCode = this.CountryCode;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.tenure = this.tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.InternetService = this.InternetService;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;
			other.Contract = this.Contract;
			other.PaperlessBilling = this.PaperlessBilling;
			other.PaymentMethod = this.PaymentMethod;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.Sno = this.Sno;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.CustomerID = readString(dis);

					this.Gender = readString(dis);

					this.SeniorCitizen = readString(dis);

					this.Geography = readString(dis);

					this.CountryCode = readString(dis);

					this.Partner = readString(dis);

					this.Dependents = readString(dis);

					this.tenure = readString(dis);

					this.PhoneService = readString(dis);

					this.MultipleLines = readString(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readString(dis);

					this.OnlineBackup = readString(dis);

					this.DeviceProtection = readString(dis);

					this.TechSupport = readString(dis);

					this.StreamingTV = readString(dis);

					this.StreamingMovies = readString(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readString(dis);

					this.PaymentMethod = readString(dis);

					this.MonthlyCharges = readString(dis);

					this.TotalCharges = readString(dis);

					this.Churn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.CountryCode, dos);

				// String

				writeString(this.Partner, dos);

				// String

				writeString(this.Dependents, dos);

				// String

				writeString(this.tenure, dos);

				// String

				writeString(this.PhoneService, dos);

				// String

				writeString(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// String

				writeString(this.OnlineSecurity, dos);

				// String

				writeString(this.OnlineBackup, dos);

				// String

				writeString(this.DeviceProtection, dos);

				// String

				writeString(this.TechSupport, dos);

				// String

				writeString(this.StreamingTV, dos);

				// String

				writeString(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// String

				writeString(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// String

				writeString(this.MonthlyCharges, dos);

				// String

				writeString(this.TotalCharges, dos);

				// String

				writeString(this.Churn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",Gender=" + Gender);
			sb.append(",SeniorCitizen=" + SeniorCitizen);
			sb.append(",Geography=" + Geography);
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Partner=" + Partner);
			sb.append(",Dependents=" + Dependents);
			sb.append(",tenure=" + tenure);
			sb.append(",PhoneService=" + PhoneService);
			sb.append(",MultipleLines=" + MultipleLines);
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + OnlineSecurity);
			sb.append(",OnlineBackup=" + OnlineBackup);
			sb.append(",DeviceProtection=" + DeviceProtection);
			sb.append(",TechSupport=" + TechSupport);
			sb.append(",StreamingTV=" + StreamingTV);
			sb.append(",StreamingMovies=" + StreamingMovies);
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + PaperlessBilling);
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + MonthlyCharges);
			sb.append(",TotalCharges=" + TotalCharges);
			sb.append(",Churn=" + Churn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Sno, other.Sno);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String SeniorCitizen;

		public String getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public String Partner;

		public String getPartner() {
			return this.Partner;
		}

		public String Dependents;

		public String getDependents() {
			return this.Dependents;
		}

		public String tenure;

		public String getTenure() {
			return this.tenure;
		}

		public String PhoneService;

		public String getPhoneService() {
			return this.PhoneService;
		}

		public String MultipleLines;

		public String getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public String OnlineSecurity;

		public String getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public String OnlineBackup;

		public String getOnlineBackup() {
			return this.OnlineBackup;
		}

		public String DeviceProtection;

		public String getDeviceProtection() {
			return this.DeviceProtection;
		}

		public String TechSupport;

		public String getTechSupport() {
			return this.TechSupport;
		}

		public String StreamingTV;

		public String getStreamingTV() {
			return this.StreamingTV;
		}

		public String StreamingMovies;

		public String getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public String PaperlessBilling;

		public String getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public String MonthlyCharges;

		public String getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public String TotalCharges;

		public String getTotalCharges() {
			return this.TotalCharges;
		}

		public String Churn;

		public String getChurn() {
			return this.Churn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Sno == null) ? 0 : this.Sno.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.Sno == null) {
				if (other.Sno != null)
					return false;

			} else if (!this.Sno.equals(other.Sno))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.Sno = this.Sno;
			other.CustomerID = this.CustomerID;
			other.Gender = this.Gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.Geography = this.Geography;
			other.CountryCode = this.CountryCode;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.tenure = this.tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.InternetService = this.InternetService;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;
			other.Contract = this.Contract;
			other.PaperlessBilling = this.PaperlessBilling;
			other.PaymentMethod = this.PaymentMethod;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.Sno = this.Sno;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.CustomerID = readString(dis);

					this.Gender = readString(dis);

					this.SeniorCitizen = readString(dis);

					this.Geography = readString(dis);

					this.CountryCode = readString(dis);

					this.Partner = readString(dis);

					this.Dependents = readString(dis);

					this.tenure = readString(dis);

					this.PhoneService = readString(dis);

					this.MultipleLines = readString(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readString(dis);

					this.OnlineBackup = readString(dis);

					this.DeviceProtection = readString(dis);

					this.TechSupport = readString(dis);

					this.StreamingTV = readString(dis);

					this.StreamingMovies = readString(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readString(dis);

					this.PaymentMethod = readString(dis);

					this.MonthlyCharges = readString(dis);

					this.TotalCharges = readString(dis);

					this.Churn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.CountryCode, dos);

				// String

				writeString(this.Partner, dos);

				// String

				writeString(this.Dependents, dos);

				// String

				writeString(this.tenure, dos);

				// String

				writeString(this.PhoneService, dos);

				// String

				writeString(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// String

				writeString(this.OnlineSecurity, dos);

				// String

				writeString(this.OnlineBackup, dos);

				// String

				writeString(this.DeviceProtection, dos);

				// String

				writeString(this.TechSupport, dos);

				// String

				writeString(this.StreamingTV, dos);

				// String

				writeString(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// String

				writeString(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// String

				writeString(this.MonthlyCharges, dos);

				// String

				writeString(this.TotalCharges, dos);

				// String

				writeString(this.Churn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",Gender=" + Gender);
			sb.append(",SeniorCitizen=" + SeniorCitizen);
			sb.append(",Geography=" + Geography);
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Partner=" + Partner);
			sb.append(",Dependents=" + Dependents);
			sb.append(",tenure=" + tenure);
			sb.append(",PhoneService=" + PhoneService);
			sb.append(",MultipleLines=" + MultipleLines);
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + OnlineSecurity);
			sb.append(",OnlineBackup=" + OnlineBackup);
			sb.append(",DeviceProtection=" + DeviceProtection);
			sb.append(",TechSupport=" + TechSupport);
			sb.append(",StreamingTV=" + StreamingTV);
			sb.append(",StreamingMovies=" + StreamingMovies);
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + PaperlessBilling);
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + MonthlyCharges);
			sb.append(",TotalCharges=" + TotalCharges);
			sb.append(",Churn=" + Churn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Sno, other.Sno);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String SeniorCitizen;

		public String getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public String Partner;

		public String getPartner() {
			return this.Partner;
		}

		public String Dependents;

		public String getDependents() {
			return this.Dependents;
		}

		public String tenure;

		public String getTenure() {
			return this.tenure;
		}

		public String PhoneService;

		public String getPhoneService() {
			return this.PhoneService;
		}

		public String MultipleLines;

		public String getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public String OnlineSecurity;

		public String getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public String OnlineBackup;

		public String getOnlineBackup() {
			return this.OnlineBackup;
		}

		public String DeviceProtection;

		public String getDeviceProtection() {
			return this.DeviceProtection;
		}

		public String TechSupport;

		public String getTechSupport() {
			return this.TechSupport;
		}

		public String StreamingTV;

		public String getStreamingTV() {
			return this.StreamingTV;
		}

		public String StreamingMovies;

		public String getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public String PaperlessBilling;

		public String getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public String MonthlyCharges;

		public String getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public String TotalCharges;

		public String getTotalCharges() {
			return this.TotalCharges;
		}

		public String Churn;

		public String getChurn() {
			return this.Churn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Sno == null) ? 0 : this.Sno.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.Sno == null) {
				if (other.Sno != null)
					return false;

			} else if (!this.Sno.equals(other.Sno))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.Sno = this.Sno;
			other.CustomerID = this.CustomerID;
			other.Gender = this.Gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.Geography = this.Geography;
			other.CountryCode = this.CountryCode;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.tenure = this.tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.InternetService = this.InternetService;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;
			other.Contract = this.Contract;
			other.PaperlessBilling = this.PaperlessBilling;
			other.PaymentMethod = this.PaymentMethod;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.Sno = this.Sno;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.CustomerID = readString(dis);

					this.Gender = readString(dis);

					this.SeniorCitizen = readString(dis);

					this.Geography = readString(dis);

					this.CountryCode = readString(dis);

					this.Partner = readString(dis);

					this.Dependents = readString(dis);

					this.tenure = readString(dis);

					this.PhoneService = readString(dis);

					this.MultipleLines = readString(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readString(dis);

					this.OnlineBackup = readString(dis);

					this.DeviceProtection = readString(dis);

					this.TechSupport = readString(dis);

					this.StreamingTV = readString(dis);

					this.StreamingMovies = readString(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readString(dis);

					this.PaymentMethod = readString(dis);

					this.MonthlyCharges = readString(dis);

					this.TotalCharges = readString(dis);

					this.Churn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.CountryCode, dos);

				// String

				writeString(this.Partner, dos);

				// String

				writeString(this.Dependents, dos);

				// String

				writeString(this.tenure, dos);

				// String

				writeString(this.PhoneService, dos);

				// String

				writeString(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// String

				writeString(this.OnlineSecurity, dos);

				// String

				writeString(this.OnlineBackup, dos);

				// String

				writeString(this.DeviceProtection, dos);

				// String

				writeString(this.TechSupport, dos);

				// String

				writeString(this.StreamingTV, dos);

				// String

				writeString(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// String

				writeString(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// String

				writeString(this.MonthlyCharges, dos);

				// String

				writeString(this.TotalCharges, dos);

				// String

				writeString(this.Churn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",Gender=" + Gender);
			sb.append(",SeniorCitizen=" + SeniorCitizen);
			sb.append(",Geography=" + Geography);
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Partner=" + Partner);
			sb.append(",Dependents=" + Dependents);
			sb.append(",tenure=" + tenure);
			sb.append(",PhoneService=" + PhoneService);
			sb.append(",MultipleLines=" + MultipleLines);
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + OnlineSecurity);
			sb.append(",OnlineBackup=" + OnlineBackup);
			sb.append(",DeviceProtection=" + DeviceProtection);
			sb.append(",TechSupport=" + TechSupport);
			sb.append(",StreamingTV=" + StreamingTV);
			sb.append(",StreamingMovies=" + StreamingMovies);
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + PaperlessBilling);
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + MonthlyCharges);
			sb.append(",TotalCharges=" + TotalCharges);
			sb.append(",Churn=" + Churn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Sno, other.Sno);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String SeniorCitizen;

		public String getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public String Partner;

		public String getPartner() {
			return this.Partner;
		}

		public String Dependents;

		public String getDependents() {
			return this.Dependents;
		}

		public String tenure;

		public String getTenure() {
			return this.tenure;
		}

		public String PhoneService;

		public String getPhoneService() {
			return this.PhoneService;
		}

		public String MultipleLines;

		public String getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public String OnlineSecurity;

		public String getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public String OnlineBackup;

		public String getOnlineBackup() {
			return this.OnlineBackup;
		}

		public String DeviceProtection;

		public String getDeviceProtection() {
			return this.DeviceProtection;
		}

		public String TechSupport;

		public String getTechSupport() {
			return this.TechSupport;
		}

		public String StreamingTV;

		public String getStreamingTV() {
			return this.StreamingTV;
		}

		public String StreamingMovies;

		public String getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public String PaperlessBilling;

		public String getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public String MonthlyCharges;

		public String getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public String TotalCharges;

		public String getTotalCharges() {
			return this.TotalCharges;
		}

		public String Churn;

		public String getChurn() {
			return this.Churn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Sno == null) ? 0 : this.Sno.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.Sno == null) {
				if (other.Sno != null)
					return false;

			} else if (!this.Sno.equals(other.Sno))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.Sno = this.Sno;
			other.CustomerID = this.CustomerID;
			other.Gender = this.Gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.Geography = this.Geography;
			other.CountryCode = this.CountryCode;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.tenure = this.tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.InternetService = this.InternetService;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;
			other.Contract = this.Contract;
			other.PaperlessBilling = this.PaperlessBilling;
			other.PaymentMethod = this.PaymentMethod;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.Sno = this.Sno;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.CustomerID = readString(dis);

					this.Gender = readString(dis);

					this.SeniorCitizen = readString(dis);

					this.Geography = readString(dis);

					this.CountryCode = readString(dis);

					this.Partner = readString(dis);

					this.Dependents = readString(dis);

					this.tenure = readString(dis);

					this.PhoneService = readString(dis);

					this.MultipleLines = readString(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readString(dis);

					this.OnlineBackup = readString(dis);

					this.DeviceProtection = readString(dis);

					this.TechSupport = readString(dis);

					this.StreamingTV = readString(dis);

					this.StreamingMovies = readString(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readString(dis);

					this.PaymentMethod = readString(dis);

					this.MonthlyCharges = readString(dis);

					this.TotalCharges = readString(dis);

					this.Churn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.CountryCode, dos);

				// String

				writeString(this.Partner, dos);

				// String

				writeString(this.Dependents, dos);

				// String

				writeString(this.tenure, dos);

				// String

				writeString(this.PhoneService, dos);

				// String

				writeString(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// String

				writeString(this.OnlineSecurity, dos);

				// String

				writeString(this.OnlineBackup, dos);

				// String

				writeString(this.DeviceProtection, dos);

				// String

				writeString(this.TechSupport, dos);

				// String

				writeString(this.StreamingTV, dos);

				// String

				writeString(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// String

				writeString(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// String

				writeString(this.MonthlyCharges, dos);

				// String

				writeString(this.TotalCharges, dos);

				// String

				writeString(this.Churn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",Gender=" + Gender);
			sb.append(",SeniorCitizen=" + SeniorCitizen);
			sb.append(",Geography=" + Geography);
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Partner=" + Partner);
			sb.append(",Dependents=" + Dependents);
			sb.append(",tenure=" + tenure);
			sb.append(",PhoneService=" + PhoneService);
			sb.append(",MultipleLines=" + MultipleLines);
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + OnlineSecurity);
			sb.append(",OnlineBackup=" + OnlineBackup);
			sb.append(",DeviceProtection=" + DeviceProtection);
			sb.append(",TechSupport=" + TechSupport);
			sb.append(",StreamingTV=" + StreamingTV);
			sb.append(",StreamingMovies=" + StreamingMovies);
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + PaperlessBilling);
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + MonthlyCharges);
			sb.append(",TotalCharges=" + TotalCharges);
			sb.append(",Churn=" + Churn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Sno, other.Sno);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();
				row7Struct row7 = new row7Struct();
				row8Struct row8 = new row8Struct();
				row10Struct row10 = new row10Struct();
				TelecomStruct Telecom = new TelecomStruct();
				row11Struct row11 = new row11Struct();
				row12Struct row12 = new row12Struct();
				row9Struct row9 = new row9Struct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tDBOutput_2 = 0;

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;

				int rejectedCount_tDBOutput_2 = 0;

				String tableName_tDBOutput_2 = "telecom_preprocessed_customer";
				boolean whetherReject_tDBOutput_2 = false;

				java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
				calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
				calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
				long date_tDBOutput_2;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbProperties_tDBOutput_2 = "noDatetimeStringSync=true";
				String url_tDBOutput_2 = null;
				if (dbProperties_tDBOutput_2 == null || dbProperties_tDBOutput_2.trim().length() == 0) {
					url_tDBOutput_2 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "telecom_staging" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_2.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_2 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "telecom_staging" + "?"
							+ properties_tDBOutput_2;
				}
				String driverClass_tDBOutput_2 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_2 = "root";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:gFmnDwKsKAkR9ytIDF04m80JeE4EtZDj/8wAPSaimbrL+Lg09Q==");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
				java.lang.Class.forName(driverClass_tDBOutput_2);

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2,
						dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
				boolean whetherExist_tDBOutput_2 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables("telecom_staging", null,
						null, new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_2.next()) {
						String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
						if (table_tDBOutput_2.equalsIgnoreCase("telecom_preprocessed_customer")) {
							whetherExist_tDBOutput_2 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_2) {
					try (java.sql.Statement stmtDrop_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
						stmtDrop_tDBOutput_2.execute("DROP TABLE `" + tableName_tDBOutput_2 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					stmtCreate_tDBOutput_2.execute("CREATE TABLE `" + tableName_tDBOutput_2
							+ "`(`Sno` INT(10)  ,`CustomerID` VARCHAR(255)  ,`Gender` INT(0)  ,`SeniorCitizen` INT(0)  ,`Geography` VARCHAR(50)  ,`CountryCode` VARCHAR(10)  ,`Partner` INT(0)  ,`Dependents` INT(0)  ,`tenure` INT(25)  ,`PhoneService` INT(0)  ,`MultipleLines` INT(0)  ,`InternetService` VARCHAR(25)  ,`OnlineSecurity` INT(0)  ,`OnlineBackup` INT(0)  ,`DeviceProtection` INT(0)  ,`TechSupport` INT(0)  ,`StreamingTV` INT(0)  ,`StreamingMovies` INT(0)  ,`Contract` VARCHAR(50)  ,`PaperlessBilling` INT(0)  ,`PaymentMethod` VARCHAR(100)  ,`MonthlyCharges` FLOAT(20,2)  ,`TotalCharges` FLOAT(20,2)  ,`Churn` INT(0)  ,primary key(`Sno`))");
				}

				String insert_tDBOutput_2 = "INSERT INTO `" + "telecom_preprocessed_customer"
						+ "` (`Sno`,`CustomerID`,`Gender`,`SeniorCitizen`,`Geography`,`CountryCode`,`Partner`,`Dependents`,`tenure`,`PhoneService`,`MultipleLines`,`InternetService`,`OnlineSecurity`,`OnlineBackup`,`DeviceProtection`,`TechSupport`,`StreamingTV`,`StreamingMovies`,`Contract`,`PaperlessBilling`,`PaymentMethod`,`MonthlyCharges`,`TotalCharges`,`Churn`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_2 = 100;
				int batchSizeCounter_tDBOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tLogRow_3 = 0;

				///////////////////////

				class Util_tLogRow_3 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[26];

					public void addRow(String[] row) {

						for (int i = 0; i < 26; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 25 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 25 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|%16$-");
							sbformat.append(colLengths[15]);
							sbformat.append("s");

							sbformat.append("|%17$-");
							sbformat.append(colLengths[16]);
							sbformat.append("s");

							sbformat.append("|%18$-");
							sbformat.append(colLengths[17]);
							sbformat.append("s");

							sbformat.append("|%19$-");
							sbformat.append(colLengths[18]);
							sbformat.append("s");

							sbformat.append("|%20$-");
							sbformat.append(colLengths[19]);
							sbformat.append("s");

							sbformat.append("|%21$-");
							sbformat.append(colLengths[20]);
							sbformat.append("s");

							sbformat.append("|%22$-");
							sbformat.append(colLengths[21]);
							sbformat.append("s");

							sbformat.append("|%23$-");
							sbformat.append(colLengths[22]);
							sbformat.append("s");

							sbformat.append("|%24$-");
							sbformat.append(colLengths[23]);
							sbformat.append("s");

							sbformat.append("|%25$-");
							sbformat.append(colLengths[24]);
							sbformat.append("s");

							sbformat.append("|%26$-");
							sbformat.append(colLengths[25]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[25] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();
				util_tLogRow_3.setTableName("tLogRow_3");
				util_tLogRow_3.addRow(new String[] { "Sno", "CustomerID", "Gender", "SeniorCitizen", "Geography",
						"CountryCode", "Partner", "Dependents", "tenure", "PhoneService", "MultipleLines",
						"InternetService", "OnlineSecurity", "OnlineBackup", "DeviceProtection", "TechSupport",
						"StreamingTV", "StreamingMovies", "Contract", "PaperlessBilling", "PaymentMethod",
						"MonthlyCharges", "TotalCharges", "Churn", "errorCode", "errorMessage", });
				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
///////////////////////    			

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tConvertType_1 begin ] start
				 */

				ok_Hash.put("tConvertType_1", false);
				start_Hash.put("tConvertType_1", System.currentTimeMillis());

				currentComponent = "tConvertType_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Telecom");
				}

				int tos_count_tConvertType_1 = 0;

				int nb_line_tConvertType_1 = 0;

				/**
				 * [tConvertType_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
					String var1;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				TelecomStruct Telecom_tmp = new TelecomStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tLogRow_5 begin ] start
				 */

				ok_Hash.put("tLogRow_5", false);
				start_Hash.put("tLogRow_5", System.currentTimeMillis());

				currentComponent = "tLogRow_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tLogRow_5 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_5 = "|";
				java.io.PrintStream consoleOut_tLogRow_5 = null;

				StringBuilder strBuffer_tLogRow_5 = null;
				int nb_line_tLogRow_5 = 0;
///////////////////////    			

				/**
				 * [tLogRow_5 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String CustomerID;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.CustomerID == null) {
							if (other.CustomerID != null)
								return false;

						} else if (!this.CustomerID.equals(other.CustomerID))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tFilterRow_2 = 0;

				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tReplace_2 begin ] start
				 */

				ok_Hash.put("tReplace_2", false);
				start_Hash.put("tReplace_2", System.currentTimeMillis());

				currentComponent = "tReplace_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tReplace_2 = 0;

				int nb_line_tReplace_2 = 0;

				/**
				 * [tReplace_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
				calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "root";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:wSJg1+7aU065bNFzL4WyJ2J/STyxWGeTqh55m8gX4Xof/vWwnA==");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "telecom_staging" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "select * from telecom_customer_stage1";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row6.Sno = null;
						} else {

							row6.Sno = rs_tDBInput_2.getInt(1);
							if (rs_tDBInput_2.wasNull()) {
								row6.Sno = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row6.CustomerID = null;
						} else {

							row6.CustomerID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row6.Gender = null;
						} else {

							row6.Gender = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row6.SeniorCitizen = null;
						} else {

							row6.SeniorCitizen = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row6.Geography = null;
						} else {

							row6.Geography = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row6.CountryCode = null;
						} else {

							row6.CountryCode = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row6.Partner = null;
						} else {

							row6.Partner = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row6.Dependents = null;
						} else {

							row6.Dependents = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row6.tenure = null;
						} else {

							row6.tenure = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row6.PhoneService = null;
						} else {

							row6.PhoneService = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, false);
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row6.MultipleLines = null;
						} else {

							row6.MultipleLines = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, false);
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row6.InternetService = null;
						} else {

							row6.InternetService = routines.system.JDBCUtil.getString(rs_tDBInput_2, 12, false);
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row6.OnlineSecurity = null;
						} else {

							row6.OnlineSecurity = routines.system.JDBCUtil.getString(rs_tDBInput_2, 13, false);
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row6.OnlineBackup = null;
						} else {

							row6.OnlineBackup = routines.system.JDBCUtil.getString(rs_tDBInput_2, 14, false);
						}
						if (colQtyInRs_tDBInput_2 < 15) {
							row6.DeviceProtection = null;
						} else {

							row6.DeviceProtection = routines.system.JDBCUtil.getString(rs_tDBInput_2, 15, false);
						}
						if (colQtyInRs_tDBInput_2 < 16) {
							row6.TechSupport = null;
						} else {

							row6.TechSupport = routines.system.JDBCUtil.getString(rs_tDBInput_2, 16, false);
						}
						if (colQtyInRs_tDBInput_2 < 17) {
							row6.StreamingTV = null;
						} else {

							row6.StreamingTV = routines.system.JDBCUtil.getString(rs_tDBInput_2, 17, false);
						}
						if (colQtyInRs_tDBInput_2 < 18) {
							row6.StreamingMovies = null;
						} else {

							row6.StreamingMovies = routines.system.JDBCUtil.getString(rs_tDBInput_2, 18, false);
						}
						if (colQtyInRs_tDBInput_2 < 19) {
							row6.Contract = null;
						} else {

							row6.Contract = routines.system.JDBCUtil.getString(rs_tDBInput_2, 19, false);
						}
						if (colQtyInRs_tDBInput_2 < 20) {
							row6.PaperlessBilling = null;
						} else {

							row6.PaperlessBilling = routines.system.JDBCUtil.getString(rs_tDBInput_2, 20, false);
						}
						if (colQtyInRs_tDBInput_2 < 21) {
							row6.PaymentMethod = null;
						} else {

							row6.PaymentMethod = routines.system.JDBCUtil.getString(rs_tDBInput_2, 21, false);
						}
						if (colQtyInRs_tDBInput_2 < 22) {
							row6.MonthlyCharges = null;
						} else {

							row6.MonthlyCharges = routines.system.JDBCUtil.getString(rs_tDBInput_2, 22, false);
						}
						if (colQtyInRs_tDBInput_2 < 23) {
							row6.TotalCharges = null;
						} else {

							row6.TotalCharges = routines.system.JDBCUtil.getString(rs_tDBInput_2, 23, false);
						}
						if (colQtyInRs_tDBInput_2 < 24) {
							row6.Churn = null;
						} else {

							row6.Churn = routines.system.JDBCUtil.getString(rs_tDBInput_2, 24, false);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tReplace_2 main ] start
						 */

						currentComponent = "tReplace_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
						}

						String searchStr_tReplace_2_1 = "Female" + "";
						row6.Gender = StringUtils.replaceAllStrictly(row6.Gender, searchStr_tReplace_2_1, "0" + "",
								true, false);
						String searchStr_tReplace_2_2 = "Male" + "";
						row6.Gender = StringUtils.replaceAllStrictly(row6.Gender, searchStr_tReplace_2_2, "1" + "",
								true, false);
						String searchStr_tReplace_2_3 = "Yes" + "";
						row6.Partner = StringUtils.replaceAllStrictly(row6.Partner, searchStr_tReplace_2_3, "1" + "",
								true, false);
						String searchStr_tReplace_2_4 = "No" + "";
						row6.Partner = StringUtils.replaceAllStrictly(row6.Partner, searchStr_tReplace_2_4, "0" + "",
								true, false);
						String searchStr_tReplace_2_5 = "Yes" + "";
						row6.Dependents = StringUtils.replaceAllStrictly(row6.Dependents, searchStr_tReplace_2_5,
								"1" + "", true, false);
						String searchStr_tReplace_2_6 = "No" + "";
						row6.Dependents = StringUtils.replaceAllStrictly(row6.Dependents, searchStr_tReplace_2_6,
								"0" + "", true, false);
						String searchStr_tReplace_2_7 = "Yes" + "";
						row6.PhoneService = StringUtils.replaceAllStrictly(row6.PhoneService, searchStr_tReplace_2_7,
								"1" + "", true, false);
						String searchStr_tReplace_2_8 = "No" + "";
						row6.PhoneService = StringUtils.replaceAllStrictly(row6.PhoneService, searchStr_tReplace_2_8,
								"0" + "", true, false);
						String searchStr_tReplace_2_9 = "Yes" + "";
						row6.MultipleLines = StringUtils.replaceAllStrictly(row6.MultipleLines, searchStr_tReplace_2_9,
								"1" + "", true, false);
						String searchStr_tReplace_2_10 = "No" + "";
						row6.MultipleLines = StringUtils.replaceAllStrictly(row6.MultipleLines, searchStr_tReplace_2_10,
								"0" + "", true, false);
						String searchStr_tReplace_2_11 = "Yes" + "";
						row6.OnlineSecurity = StringUtils.replaceAllStrictly(row6.OnlineSecurity,
								searchStr_tReplace_2_11, "1" + "", true, false);
						String searchStr_tReplace_2_12 = "No" + "";
						row6.OnlineSecurity = StringUtils.replaceAllStrictly(row6.OnlineSecurity,
								searchStr_tReplace_2_12, "0" + "", true, false);
						String searchStr_tReplace_2_13 = "Yes" + "";
						row6.OnlineBackup = StringUtils.replaceAllStrictly(row6.OnlineBackup, searchStr_tReplace_2_13,
								"1" + "", true, false);
						String searchStr_tReplace_2_14 = "No" + "";
						row6.OnlineBackup = StringUtils.replaceAllStrictly(row6.OnlineBackup, searchStr_tReplace_2_14,
								"0" + "", true, false);
						String searchStr_tReplace_2_15 = "Yes" + "";
						row6.DeviceProtection = StringUtils.replaceAllStrictly(row6.DeviceProtection,
								searchStr_tReplace_2_15, "1" + "", true, false);
						String searchStr_tReplace_2_16 = "No" + "";
						row6.DeviceProtection = StringUtils.replaceAllStrictly(row6.DeviceProtection,
								searchStr_tReplace_2_16, "0" + "", true, false);
						String searchStr_tReplace_2_17 = "Yes" + "";
						row6.TechSupport = StringUtils.replaceAllStrictly(row6.TechSupport, searchStr_tReplace_2_17,
								"1" + "", true, false);
						String searchStr_tReplace_2_18 = "No" + "";
						row6.TechSupport = StringUtils.replaceAllStrictly(row6.TechSupport, searchStr_tReplace_2_18,
								"0" + "", true, false);
						String searchStr_tReplace_2_19 = "Yes" + "";
						row6.StreamingTV = StringUtils.replaceAllStrictly(row6.StreamingTV, searchStr_tReplace_2_19,
								"1" + "", true, false);
						String searchStr_tReplace_2_20 = "No" + "";
						row6.StreamingTV = StringUtils.replaceAllStrictly(row6.StreamingTV, searchStr_tReplace_2_20,
								"0" + "", true, false);
						String searchStr_tReplace_2_21 = "Yes" + "";
						row6.StreamingMovies = StringUtils.replaceAllStrictly(row6.StreamingMovies,
								searchStr_tReplace_2_21, "1" + "", true, false);
						String searchStr_tReplace_2_22 = "No" + "";
						row6.StreamingMovies = StringUtils.replaceAllStrictly(row6.StreamingMovies,
								searchStr_tReplace_2_22, "0" + "", true, false);
						String searchStr_tReplace_2_23 = "Yes" + "";
						row6.PaperlessBilling = StringUtils.replaceAllStrictly(row6.PaperlessBilling,
								searchStr_tReplace_2_23, "1" + "", true, false);
						String searchStr_tReplace_2_24 = "No" + "";
						row6.PaperlessBilling = StringUtils.replaceAllStrictly(row6.PaperlessBilling,
								searchStr_tReplace_2_24, "0" + "", true, false);
						String searchStr_tReplace_2_25 = "Yes" + "";
						row6.Churn = StringUtils.replaceAllStrictly(row6.Churn, searchStr_tReplace_2_25, "1" + "", true,
								false);
						String searchStr_tReplace_2_26 = "No" + "";
						row6.Churn = StringUtils.replaceAllStrictly(row6.Churn, searchStr_tReplace_2_26, "0" + "", true,
								false);
						row7.Sno = row6.Sno;

						row7.CustomerID = row6.CustomerID;

						row7.Gender = row6.Gender;

						row7.SeniorCitizen = row6.SeniorCitizen;

						row7.Geography = row6.Geography;

						row7.CountryCode = row6.CountryCode;

						row7.Partner = row6.Partner;

						row7.Dependents = row6.Dependents;

						row7.tenure = row6.tenure;

						row7.PhoneService = row6.PhoneService;

						row7.MultipleLines = row6.MultipleLines;

						row7.InternetService = row6.InternetService;

						row7.OnlineSecurity = row6.OnlineSecurity;

						row7.OnlineBackup = row6.OnlineBackup;

						row7.DeviceProtection = row6.DeviceProtection;

						row7.TechSupport = row6.TechSupport;

						row7.StreamingTV = row6.StreamingTV;

						row7.StreamingMovies = row6.StreamingMovies;

						row7.Contract = row6.Contract;

						row7.PaperlessBilling = row6.PaperlessBilling;

						row7.PaymentMethod = row6.PaymentMethod;

						row7.MonthlyCharges = row6.MonthlyCharges;

						row7.TotalCharges = row6.TotalCharges;

						row7.Churn = row6.Churn;

						nb_line_tReplace_2++;

						tos_count_tReplace_2++;

						/**
						 * [tReplace_2 main ] stop
						 */

						/**
						 * [tReplace_2 process_data_begin ] start
						 */

						currentComponent = "tReplace_2";

						/**
						 * [tReplace_2 process_data_begin ] stop
						 */

						/**
						 * [tFilterRow_2 main ] start
						 */

						currentComponent = "tFilterRow_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
						}

						row8 = null;
						Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("||");
						ope_tFilterRow_2.matches(
								(row7.InternetService == null ? false : row7.InternetService.matches("DSL") == true),
								" InternetService.matches(\"DSL\") == true failed");
						ope_tFilterRow_2.matches(
								(row7.InternetService == null ? false
										: row7.InternetService.matches("Fiber optic") == true),
								" InternetService.matches(\"Fiber optic\") == true failed");
						ope_tFilterRow_2.matches(
								(row7.Contract == null ? false : row7.Contract.matches("Month-to-month") == true),
								" Contract.matches(\"Month-to-month\") == true failed");
						ope_tFilterRow_2.matches(
								(row7.Contract == null ? false : row7.Contract.matches("One year") == true),
								" Contract.matches(\"One year\") == true failed");
						ope_tFilterRow_2.matches(
								(row7.Contract == null ? false : row7.Contract.matches("Two year") == true),
								" Contract.matches(\"Two year\") == true failed");
						ope_tFilterRow_2.matches(
								(row7.PaymentMethod == null ? false
										: row7.PaymentMethod.matches("Electronic check") == true),
								" PaymentMethod.matches(\"Electronic check\") == true failed");
						ope_tFilterRow_2.matches(
								(row7.PaymentMethod == null ? false
										: row7.PaymentMethod.matches("Mailed check") == true),
								" PaymentMethod.matches(\"Mailed check\") == true failed");
						ope_tFilterRow_2.matches(
								(row7.PaymentMethod == null ? false
										: row7.PaymentMethod.matches("Bank transfer (automatic)") == true),
								" PaymentMethod.matches(\"Bank transfer (automatic)\") == true failed");
						ope_tFilterRow_2.matches(
								(row7.PaymentMethod == null ? false
										: row7.PaymentMethod.matches("Credit card (automatic)") == true),
								" PaymentMethod.matches(\"Credit card (automatic)\") == true failed");

						if (ope_tFilterRow_2.getMatchFlag()) {
							if (row8 == null) {
								row8 = new row8Struct();
							}
							row8.Sno = row7.Sno;
							row8.CustomerID = row7.CustomerID;
							row8.Gender = row7.Gender;
							row8.SeniorCitizen = row7.SeniorCitizen;
							row8.Geography = row7.Geography;
							row8.CountryCode = row7.CountryCode;
							row8.Partner = row7.Partner;
							row8.Dependents = row7.Dependents;
							row8.tenure = row7.tenure;
							row8.PhoneService = row7.PhoneService;
							row8.MultipleLines = row7.MultipleLines;
							row8.InternetService = row7.InternetService;
							row8.OnlineSecurity = row7.OnlineSecurity;
							row8.OnlineBackup = row7.OnlineBackup;
							row8.DeviceProtection = row7.DeviceProtection;
							row8.TechSupport = row7.TechSupport;
							row8.StreamingTV = row7.StreamingTV;
							row8.StreamingMovies = row7.StreamingMovies;
							row8.Contract = row7.Contract;
							row8.PaperlessBilling = row7.PaperlessBilling;
							row8.PaymentMethod = row7.PaymentMethod;
							row8.MonthlyCharges = row7.MonthlyCharges;
							row8.TotalCharges = row7.TotalCharges;
							row8.Churn = row7.Churn;
							nb_line_ok_tFilterRow_2++;
						} else {
							nb_line_reject_tFilterRow_2++;
						}

						nb_line_tFilterRow_2++;

						tos_count_tFilterRow_2++;

						/**
						 * [tFilterRow_2 main ] stop
						 */

						/**
						 * [tFilterRow_2 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_2";

						/**
						 * [tFilterRow_2 process_data_begin ] stop
						 */
// Start of branch "row8"
						if (row8 != null) {
							row12 = null;

							/**
							 * [tUniqRow_1 main ] start
							 */

							currentComponent = "tUniqRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row8");
							}

							row9 = null;
							row10 = null;
							if (row8.CustomerID == null) {
								finder_tUniqRow_1.CustomerID = null;
							} else {
								finder_tUniqRow_1.CustomerID = row8.CustomerID.toLowerCase();
							}
							finder_tUniqRow_1.hashCodeDirty = true;
							if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
								KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

								if (row8.CustomerID == null) {
									new_tUniqRow_1.CustomerID = null;
								} else {
									new_tUniqRow_1.CustomerID = row8.CustomerID.toLowerCase();
								}

								keystUniqRow_1.add(new_tUniqRow_1);
								if (row10 == null) {

									row10 = new row10Struct();
								}
								row10.Sno = row8.Sno;
								row10.CustomerID = row8.CustomerID;
								row10.Gender = row8.Gender;
								row10.SeniorCitizen = row8.SeniorCitizen;
								row10.Geography = row8.Geography;
								row10.CountryCode = row8.CountryCode;
								row10.Partner = row8.Partner;
								row10.Dependents = row8.Dependents;
								row10.tenure = row8.tenure;
								row10.PhoneService = row8.PhoneService;
								row10.MultipleLines = row8.MultipleLines;
								row10.InternetService = row8.InternetService;
								row10.OnlineSecurity = row8.OnlineSecurity;
								row10.OnlineBackup = row8.OnlineBackup;
								row10.DeviceProtection = row8.DeviceProtection;
								row10.TechSupport = row8.TechSupport;
								row10.StreamingTV = row8.StreamingTV;
								row10.StreamingMovies = row8.StreamingMovies;
								row10.Contract = row8.Contract;
								row10.PaperlessBilling = row8.PaperlessBilling;
								row10.PaymentMethod = row8.PaymentMethod;
								row10.MonthlyCharges = row8.MonthlyCharges;
								row10.TotalCharges = row8.TotalCharges;
								row10.Churn = row8.Churn;
								nb_uniques_tUniqRow_1++;
							} else {
								if (row9 == null) {

									row9 = new row9Struct();
								}
								row9.Sno = row8.Sno;
								row9.CustomerID = row8.CustomerID;
								row9.Gender = row8.Gender;
								row9.SeniorCitizen = row8.SeniorCitizen;
								row9.Geography = row8.Geography;
								row9.CountryCode = row8.CountryCode;
								row9.Partner = row8.Partner;
								row9.Dependents = row8.Dependents;
								row9.tenure = row8.tenure;
								row9.PhoneService = row8.PhoneService;
								row9.MultipleLines = row8.MultipleLines;
								row9.InternetService = row8.InternetService;
								row9.OnlineSecurity = row8.OnlineSecurity;
								row9.OnlineBackup = row8.OnlineBackup;
								row9.DeviceProtection = row8.DeviceProtection;
								row9.TechSupport = row8.TechSupport;
								row9.StreamingTV = row8.StreamingTV;
								row9.StreamingMovies = row8.StreamingMovies;
								row9.Contract = row8.Contract;
								row9.PaperlessBilling = row8.PaperlessBilling;
								row9.PaymentMethod = row8.PaymentMethod;
								row9.MonthlyCharges = row8.MonthlyCharges;
								row9.TotalCharges = row8.TotalCharges;
								row9.Churn = row8.Churn;
								nb_duplicates_tUniqRow_1++;
							}

							tos_count_tUniqRow_1++;

							/**
							 * [tUniqRow_1 main ] stop
							 */

							/**
							 * [tUniqRow_1 process_data_begin ] start
							 */

							currentComponent = "tUniqRow_1";

							/**
							 * [tUniqRow_1 process_data_begin ] stop
							 */
// Start of branch "row10"
							if (row10 != null) {
								row12 = null;

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row10");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;
									Var.var1 = StringHandling.RIGHT(row10.tenure, 2);// ###############################
									// ###############################
									// # Output tables

									Telecom = null;

// # Output table : 'Telecom'
									Telecom_tmp.Sno = row10.Sno;
									Telecom_tmp.CustomerID = row10.CustomerID;
									Telecom_tmp.Gender = row10.Gender;
									Telecom_tmp.SeniorCitizen = row10.SeniorCitizen;
									Telecom_tmp.Geography = row10.Geography;
									Telecom_tmp.CountryCode = row10.CountryCode;
									Telecom_tmp.Partner = row10.Partner;
									Telecom_tmp.Dependents = row10.Dependents;
									Telecom_tmp.tenure = row10.tenure;
									Telecom_tmp.PhoneService = row10.PhoneService;
									Telecom_tmp.MultipleLines = row10.MultipleLines;
									Telecom_tmp.InternetService = row10.InternetService;
									Telecom_tmp.OnlineSecurity = row10.OnlineSecurity;
									Telecom_tmp.OnlineBackup = row10.OnlineBackup;
									Telecom_tmp.DeviceProtection = row10.DeviceProtection;
									Telecom_tmp.TechSupport = row10.TechSupport;
									Telecom_tmp.StreamingTV = row10.StreamingTV;
									Telecom_tmp.StreamingMovies = row10.StreamingMovies;
									Telecom_tmp.Contract = row10.Contract;
									Telecom_tmp.PaperlessBilling = row10.PaperlessBilling;
									Telecom_tmp.PaymentMethod = row10.PaymentMethod;
									Telecom_tmp.MonthlyCharges = row10.MonthlyCharges;
									Telecom_tmp.TotalCharges = row10.TotalCharges;
									Telecom_tmp.Churn = row10.Churn;
									Telecom = Telecom_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
// Start of branch "Telecom"
								if (Telecom != null) {
									row12 = null;

									/**
									 * [tConvertType_1 main ] start
									 */

									currentComponent = "tConvertType_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "Telecom");
									}

									row12 = new row12Struct();
									String errorCode_tConvertType_1 = "";
									String errorMessage_tConvertType_1 = "";

									row11 = new row11Struct();
									boolean bHasError_tConvertType_1 = false;
									try {
										row11.Sno = TypeConvert.Integer2Integer(Telecom.Sno);
										row12.Sno = row11.Sno;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "Sno" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";" + "Sno"
													+ ":" + e.getMessage();
										}
									}
									try {
										row11.CustomerID = TypeConvert.String2String(Telecom.CustomerID);
										row12.CustomerID = row11.CustomerID;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "CustomerID" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";"
													+ "CustomerID" + ":" + e.getMessage();
										}
									}
									try {
										row11.Gender = TypeConvert.String2Integer(Telecom.Gender);
										row12.Gender = row11.Gender;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "Gender" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";" + "Gender"
													+ ":" + e.getMessage();
										}
									}
									try {
										row11.SeniorCitizen = TypeConvert.String2Integer(Telecom.SeniorCitizen);
										row12.SeniorCitizen = row11.SeniorCitizen;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "SeniorCitizen" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";"
													+ "SeniorCitizen" + ":" + e.getMessage();
										}
									}
									try {
										row11.Geography = TypeConvert.String2String(Telecom.Geography);
										row12.Geography = row11.Geography;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "Geography" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";"
													+ "Geography" + ":" + e.getMessage();
										}
									}
									try {
										row11.CountryCode = TypeConvert.String2String(Telecom.CountryCode);
										row12.CountryCode = row11.CountryCode;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "CountryCode" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";"
													+ "CountryCode" + ":" + e.getMessage();
										}
									}
									try {
										row11.Partner = TypeConvert.String2Integer(Telecom.Partner);
										row12.Partner = row11.Partner;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "Partner" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";" + "Partner"
													+ ":" + e.getMessage();
										}
									}
									try {
										row11.Dependents = TypeConvert.String2Integer(Telecom.Dependents);
										row12.Dependents = row11.Dependents;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "Dependents" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";"
													+ "Dependents" + ":" + e.getMessage();
										}
									}
									try {
										row11.tenure = TypeConvert.String2Integer(Telecom.tenure);
										row12.tenure = row11.tenure;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "tenure" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";" + "tenure"
													+ ":" + e.getMessage();
										}
									}
									try {
										row11.PhoneService = TypeConvert.String2Integer(Telecom.PhoneService);
										row12.PhoneService = row11.PhoneService;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "PhoneService" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";"
													+ "PhoneService" + ":" + e.getMessage();
										}
									}
									try {
										row11.MultipleLines = TypeConvert.String2Integer(Telecom.MultipleLines);
										row12.MultipleLines = row11.MultipleLines;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "MultipleLines" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";"
													+ "MultipleLines" + ":" + e.getMessage();
										}
									}
									try {
										row11.InternetService = TypeConvert.String2String(Telecom.InternetService);
										row12.InternetService = row11.InternetService;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "InternetService" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";"
													+ "InternetService" + ":" + e.getMessage();
										}
									}
									try {
										row11.OnlineSecurity = TypeConvert.String2Integer(Telecom.OnlineSecurity);
										row12.OnlineSecurity = row11.OnlineSecurity;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "OnlineSecurity" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";"
													+ "OnlineSecurity" + ":" + e.getMessage();
										}
									}
									try {
										row11.OnlineBackup = TypeConvert.String2Integer(Telecom.OnlineBackup);
										row12.OnlineBackup = row11.OnlineBackup;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "OnlineBackup" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";"
													+ "OnlineBackup" + ":" + e.getMessage();
										}
									}
									try {
										row11.DeviceProtection = TypeConvert.String2Integer(Telecom.DeviceProtection);
										row12.DeviceProtection = row11.DeviceProtection;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "DeviceProtection" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";"
													+ "DeviceProtection" + ":" + e.getMessage();
										}
									}
									try {
										row11.TechSupport = TypeConvert.String2Integer(Telecom.TechSupport);
										row12.TechSupport = row11.TechSupport;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "TechSupport" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";"
													+ "TechSupport" + ":" + e.getMessage();
										}
									}
									try {
										row11.StreamingTV = TypeConvert.String2Integer(Telecom.StreamingTV);
										row12.StreamingTV = row11.StreamingTV;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "StreamingTV" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";"
													+ "StreamingTV" + ":" + e.getMessage();
										}
									}
									try {
										row11.StreamingMovies = TypeConvert.String2Integer(Telecom.StreamingMovies);
										row12.StreamingMovies = row11.StreamingMovies;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "StreamingMovies" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";"
													+ "StreamingMovies" + ":" + e.getMessage();
										}
									}
									try {
										row11.Contract = TypeConvert.String2String(Telecom.Contract);
										row12.Contract = row11.Contract;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "Contract" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";" + "Contract"
													+ ":" + e.getMessage();
										}
									}
									try {
										row11.PaperlessBilling = TypeConvert.String2Integer(Telecom.PaperlessBilling);
										row12.PaperlessBilling = row11.PaperlessBilling;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "PaperlessBilling" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";"
													+ "PaperlessBilling" + ":" + e.getMessage();
										}
									}
									try {
										row11.PaymentMethod = TypeConvert.String2String(Telecom.PaymentMethod);
										row12.PaymentMethod = row11.PaymentMethod;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "PaymentMethod" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";"
													+ "PaymentMethod" + ":" + e.getMessage();
										}
									}
									try {
										row11.MonthlyCharges = TypeConvert.String2Float(Telecom.MonthlyCharges);
										row12.MonthlyCharges = row11.MonthlyCharges;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "MonthlyCharges" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";"
													+ "MonthlyCharges" + ":" + e.getMessage();
										}
									}
									try {
										row11.TotalCharges = TypeConvert.String2Float(Telecom.TotalCharges);
										row12.TotalCharges = row11.TotalCharges;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "TotalCharges" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";"
													+ "TotalCharges" + ":" + e.getMessage();
										}
									}
									try {
										row11.Churn = TypeConvert.String2Integer(Telecom.Churn);
										row12.Churn = row11.Churn;
									} catch (java.lang.Exception e) {
										bHasError_tConvertType_1 = true;
										if (("").equals(errorMessage_tConvertType_1)) {
											errorMessage_tConvertType_1 = "Churn" + ":" + e.getMessage();
										} else {
											errorMessage_tConvertType_1 = errorMessage_tConvertType_1 + ";" + "Churn"
													+ ":" + e.getMessage();
										}
									}
									if (bHasError_tConvertType_1) {
										row11 = null;
									}

									if (errorMessage_tConvertType_1.length() > 0) {
										if (errorMessage_tConvertType_1.contains("Can't support convert")) {
											errorCode_tConvertType_1 = "1"; // ConvertTypeNotSupportException
										} else {
											errorCode_tConvertType_1 = "2"; // Other Java exception
										}
										row12.errorCode = errorCode_tConvertType_1;
										row12.errorMessage = errorMessage_tConvertType_1 + " - Line: "
												+ tos_count_tConvertType_1;
									} else {
										row12 = null;
									}
									errorMessage_tConvertType_1 = "";
									nb_line_tConvertType_1++;

									tos_count_tConvertType_1++;

									/**
									 * [tConvertType_1 main ] stop
									 */

									/**
									 * [tConvertType_1 process_data_begin ] start
									 */

									currentComponent = "tConvertType_1";

									/**
									 * [tConvertType_1 process_data_begin ] stop
									 */
// Start of branch "row11"
									if (row11 != null) {

										/**
										 * [tDBOutput_2 main ] start
										 */

										currentComponent = "tDBOutput_2";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "row11");
										}

										whetherReject_tDBOutput_2 = false;
										if (row11.Sno == null) {
											pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(1, row11.Sno);
										}

										if (row11.CustomerID == null) {
											pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2.setString(2, row11.CustomerID);
										}

										if (row11.Gender == null) {
											pstmt_tDBOutput_2.setNull(3, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(3, row11.Gender);
										}

										if (row11.SeniorCitizen == null) {
											pstmt_tDBOutput_2.setNull(4, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(4, row11.SeniorCitizen);
										}

										if (row11.Geography == null) {
											pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2.setString(5, row11.Geography);
										}

										if (row11.CountryCode == null) {
											pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2.setString(6, row11.CountryCode);
										}

										if (row11.Partner == null) {
											pstmt_tDBOutput_2.setNull(7, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(7, row11.Partner);
										}

										if (row11.Dependents == null) {
											pstmt_tDBOutput_2.setNull(8, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(8, row11.Dependents);
										}

										if (row11.tenure == null) {
											pstmt_tDBOutput_2.setNull(9, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(9, row11.tenure);
										}

										if (row11.PhoneService == null) {
											pstmt_tDBOutput_2.setNull(10, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(10, row11.PhoneService);
										}

										if (row11.MultipleLines == null) {
											pstmt_tDBOutput_2.setNull(11, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(11, row11.MultipleLines);
										}

										if (row11.InternetService == null) {
											pstmt_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2.setString(12, row11.InternetService);
										}

										if (row11.OnlineSecurity == null) {
											pstmt_tDBOutput_2.setNull(13, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(13, row11.OnlineSecurity);
										}

										if (row11.OnlineBackup == null) {
											pstmt_tDBOutput_2.setNull(14, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(14, row11.OnlineBackup);
										}

										if (row11.DeviceProtection == null) {
											pstmt_tDBOutput_2.setNull(15, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(15, row11.DeviceProtection);
										}

										if (row11.TechSupport == null) {
											pstmt_tDBOutput_2.setNull(16, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(16, row11.TechSupport);
										}

										if (row11.StreamingTV == null) {
											pstmt_tDBOutput_2.setNull(17, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(17, row11.StreamingTV);
										}

										if (row11.StreamingMovies == null) {
											pstmt_tDBOutput_2.setNull(18, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(18, row11.StreamingMovies);
										}

										if (row11.Contract == null) {
											pstmt_tDBOutput_2.setNull(19, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2.setString(19, row11.Contract);
										}

										if (row11.PaperlessBilling == null) {
											pstmt_tDBOutput_2.setNull(20, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(20, row11.PaperlessBilling);
										}

										if (row11.PaymentMethod == null) {
											pstmt_tDBOutput_2.setNull(21, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2.setString(21, row11.PaymentMethod);
										}

										if (row11.MonthlyCharges == null) {
											pstmt_tDBOutput_2.setNull(22, java.sql.Types.FLOAT);
										} else {
											pstmt_tDBOutput_2.setFloat(22, row11.MonthlyCharges);
										}

										if (row11.TotalCharges == null) {
											pstmt_tDBOutput_2.setNull(23, java.sql.Types.FLOAT);
										} else {
											pstmt_tDBOutput_2.setFloat(23, row11.TotalCharges);
										}

										if (row11.Churn == null) {
											pstmt_tDBOutput_2.setNull(24, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(24, row11.Churn);
										}

										pstmt_tDBOutput_2.addBatch();
										nb_line_tDBOutput_2++;

										batchSizeCounter_tDBOutput_2++;
										if (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2) {
											try {
												int countSum_tDBOutput_2 = 0;
												for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED
															? 0
															: 1);
												}
												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tDBOutput_2 = 0;
												for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
												System.err.println(e.getMessage());
											}

											batchSizeCounter_tDBOutput_2 = 0;
										}
										commitCounter_tDBOutput_2++;

										if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {

											try {
												int countSum_tDBOutput_2 = 0;
												for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : 1);
												}
												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tDBOutput_2 = 0;
												for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
												System.err.println(e.getMessage());

											}
											conn_tDBOutput_2.commit();
											commitCounter_tDBOutput_2 = 0;

										}

										tos_count_tDBOutput_2++;

										/**
										 * [tDBOutput_2 main ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_end ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_end ] stop
										 */

									} // End of branch "row11"

// Start of branch "row12"
									if (row12 != null) {

										/**
										 * [tLogRow_3 main ] start
										 */

										currentComponent = "tLogRow_3";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "row12");
										}

///////////////////////		

										String[] row_tLogRow_3 = new String[26];

										if (row12.Sno != null) { //
											row_tLogRow_3[0] = String.valueOf(row12.Sno);

										} //

										if (row12.CustomerID != null) { //
											row_tLogRow_3[1] = String.valueOf(row12.CustomerID);

										} //

										if (row12.Gender != null) { //
											row_tLogRow_3[2] = String.valueOf(row12.Gender);

										} //

										if (row12.SeniorCitizen != null) { //
											row_tLogRow_3[3] = String.valueOf(row12.SeniorCitizen);

										} //

										if (row12.Geography != null) { //
											row_tLogRow_3[4] = String.valueOf(row12.Geography);

										} //

										if (row12.CountryCode != null) { //
											row_tLogRow_3[5] = String.valueOf(row12.CountryCode);

										} //

										if (row12.Partner != null) { //
											row_tLogRow_3[6] = String.valueOf(row12.Partner);

										} //

										if (row12.Dependents != null) { //
											row_tLogRow_3[7] = String.valueOf(row12.Dependents);

										} //

										if (row12.tenure != null) { //
											row_tLogRow_3[8] = String.valueOf(row12.tenure);

										} //

										if (row12.PhoneService != null) { //
											row_tLogRow_3[9] = String.valueOf(row12.PhoneService);

										} //

										if (row12.MultipleLines != null) { //
											row_tLogRow_3[10] = String.valueOf(row12.MultipleLines);

										} //

										if (row12.InternetService != null) { //
											row_tLogRow_3[11] = String.valueOf(row12.InternetService);

										} //

										if (row12.OnlineSecurity != null) { //
											row_tLogRow_3[12] = String.valueOf(row12.OnlineSecurity);

										} //

										if (row12.OnlineBackup != null) { //
											row_tLogRow_3[13] = String.valueOf(row12.OnlineBackup);

										} //

										if (row12.DeviceProtection != null) { //
											row_tLogRow_3[14] = String.valueOf(row12.DeviceProtection);

										} //

										if (row12.TechSupport != null) { //
											row_tLogRow_3[15] = String.valueOf(row12.TechSupport);

										} //

										if (row12.StreamingTV != null) { //
											row_tLogRow_3[16] = String.valueOf(row12.StreamingTV);

										} //

										if (row12.StreamingMovies != null) { //
											row_tLogRow_3[17] = String.valueOf(row12.StreamingMovies);

										} //

										if (row12.Contract != null) { //
											row_tLogRow_3[18] = String.valueOf(row12.Contract);

										} //

										if (row12.PaperlessBilling != null) { //
											row_tLogRow_3[19] = String.valueOf(row12.PaperlessBilling);

										} //

										if (row12.PaymentMethod != null) { //
											row_tLogRow_3[20] = String.valueOf(row12.PaymentMethod);

										} //

										if (row12.MonthlyCharges != null) { //
											row_tLogRow_3[21] = FormatterUtils.formatUnwithE(row12.MonthlyCharges);

										} //

										if (row12.TotalCharges != null) { //
											row_tLogRow_3[22] = FormatterUtils.formatUnwithE(row12.TotalCharges);

										} //

										if (row12.Churn != null) { //
											row_tLogRow_3[23] = String.valueOf(row12.Churn);

										} //

										if (row12.errorCode != null) { //
											row_tLogRow_3[24] = String.valueOf(row12.errorCode);

										} //

										if (row12.errorMessage != null) { //
											row_tLogRow_3[25] = String.valueOf(row12.errorMessage);

										} //

										util_tLogRow_3.addRow(row_tLogRow_3);
										nb_line_tLogRow_3++;
//////

//////                    

///////////////////////    			

										tos_count_tLogRow_3++;

										/**
										 * [tLogRow_3 main ] stop
										 */

										/**
										 * [tLogRow_3 process_data_begin ] start
										 */

										currentComponent = "tLogRow_3";

										/**
										 * [tLogRow_3 process_data_begin ] stop
										 */

										/**
										 * [tLogRow_3 process_data_end ] start
										 */

										currentComponent = "tLogRow_3";

										/**
										 * [tLogRow_3 process_data_end ] stop
										 */

									} // End of branch "row12"

									/**
									 * [tConvertType_1 process_data_end ] start
									 */

									currentComponent = "tConvertType_1";

									/**
									 * [tConvertType_1 process_data_end ] stop
									 */

								} // End of branch "Telecom"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "row10"

// Start of branch "row9"
							if (row9 != null) {

								/**
								 * [tLogRow_5 main ] start
								 */

								currentComponent = "tLogRow_5";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row9");
								}

///////////////////////		

								strBuffer_tLogRow_5 = new StringBuilder();

								if (row9.Sno != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.Sno));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.CustomerID != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.CustomerID));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.Gender != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.Gender));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.SeniorCitizen != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.SeniorCitizen));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.Geography != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.Geography));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.CountryCode != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.CountryCode));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.Partner != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.Partner));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.Dependents != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.Dependents));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.tenure != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.tenure));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.PhoneService != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.PhoneService));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.MultipleLines != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.MultipleLines));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.InternetService != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.InternetService));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.OnlineSecurity != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.OnlineSecurity));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.OnlineBackup != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.OnlineBackup));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.DeviceProtection != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.DeviceProtection));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.TechSupport != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.TechSupport));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.StreamingTV != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.StreamingTV));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.StreamingMovies != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.StreamingMovies));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.Contract != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.Contract));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.PaperlessBilling != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.PaperlessBilling));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.PaymentMethod != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.PaymentMethod));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.MonthlyCharges != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.MonthlyCharges));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.TotalCharges != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.TotalCharges));

								} //

								strBuffer_tLogRow_5.append("|");

								if (row9.Churn != null) { //

									strBuffer_tLogRow_5.append(String.valueOf(row9.Churn));

								} //

								if (globalMap.get("tLogRow_CONSOLE") != null) {
									consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
								} else {
									consoleOut_tLogRow_5 = new java.io.PrintStream(
											new java.io.BufferedOutputStream(System.out));
									globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_5);
								}
								consoleOut_tLogRow_5.println(strBuffer_tLogRow_5.toString());
								consoleOut_tLogRow_5.flush();
								nb_line_tLogRow_5++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_5++;

								/**
								 * [tLogRow_5 main ] stop
								 */

								/**
								 * [tLogRow_5 process_data_begin ] start
								 */

								currentComponent = "tLogRow_5";

								/**
								 * [tLogRow_5 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_5 process_data_end ] start
								 */

								currentComponent = "tLogRow_5";

								/**
								 * [tLogRow_5 process_data_end ] stop
								 */

							} // End of branch "row9"

							/**
							 * [tUniqRow_1 process_data_end ] start
							 */

							currentComponent = "tUniqRow_1";

							/**
							 * [tUniqRow_1 process_data_end ] stop
							 */

						} // End of branch "row8"

						/**
						 * [tFilterRow_2 process_data_end ] start
						 */

						currentComponent = "tFilterRow_2";

						/**
						 * [tFilterRow_2 process_data_end ] stop
						 */

						/**
						 * [tReplace_2 process_data_end ] start
						 */

						currentComponent = "tReplace_2";

						/**
						 * [tReplace_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tReplace_2 end ] start
				 */

				currentComponent = "tReplace_2";

				globalMap.put("tReplace_2_NB_LINE", nb_line_tReplace_2);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tReplace_2", true);
				end_Hash.put("tReplace_2", System.currentTimeMillis());

				/**
				 * [tReplace_2 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tConvertType_1 end ] start
				 */

				currentComponent = "tConvertType_1";

				globalMap.put("tConvertType_1_NB_LINE", nb_line_tConvertType_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Telecom");
				}

				ok_Hash.put("tConvertType_1", true);
				end_Hash.put("tConvertType_1", System.currentTimeMillis());

				/**
				 * [tConvertType_1 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (batchSizeCounter_tDBOutput_2 != 0) {
						int countSum_tDBOutput_2 = 0;

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_2 = 0;

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");

				}
				resourceMap.put("statementClosed_tDBOutput_2", true);
				if (commitCounter_tDBOutput_2 > 0) {

					conn_tDBOutput_2.commit();

				}

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

//////

				java.io.PrintStream consoleOut_tLogRow_3 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
				}

				consoleOut_tLogRow_3.println(util_tLogRow_3.format().toString());
				consoleOut_tLogRow_3.flush();
//////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

				/**
				 * [tLogRow_5 end ] start
				 */

				currentComponent = "tLogRow_5";

//////
//////
				globalMap.put("tLogRow_5_NB_LINE", nb_line_tLogRow_5);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tLogRow_5", true);
				end_Hash.put("tLogRow_5", System.currentTimeMillis());

				/**
				 * [tLogRow_5 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tDBInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tReplace_2 finally ] start
				 */

				currentComponent = "tReplace_2";

				/**
				 * [tReplace_2 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tConvertType_1 finally ] start
				 */

				currentComponent = "tConvertType_1";

				/**
				 * [tConvertType_1 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

				/**
				 * [tLogRow_5 finally ] start
				 */

				currentComponent = "tLogRow_5";

				/**
				 * [tLogRow_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CountryCode == null) ? 0 : this.CountryCode.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row27Struct other = (row27Struct) obj;

			if (this.CountryCode == null) {
				if (other.CountryCode != null)
					return false;

			} else if (!this.CountryCode.equals(other.CountryCode))

				return false;

			return true;
		}

		public void copyDataTo(row27Struct other) {

			other.Geography = this.Geography;
			other.CountryCode = this.CountryCode;

		}

		public void copyKeysDataTo(row27Struct other) {

			other.CountryCode = this.CountryCode;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Geography = readString(dis);

					this.CountryCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.CountryCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Geography=" + Geography);
			sb.append(",CountryCode=" + CountryCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CountryCode, other.CountryCode);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CountryCode == null) ? 0 : this.CountryCode.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row26Struct other = (row26Struct) obj;

			if (this.CountryCode == null) {
				if (other.CountryCode != null)
					return false;

			} else if (!this.CountryCode.equals(other.CountryCode))

				return false;

			return true;
		}

		public void copyDataTo(row26Struct other) {

			other.Geography = this.Geography;
			other.CountryCode = this.CountryCode;

		}

		public void copyKeysDataTo(row26Struct other) {

			other.CountryCode = this.CountryCode;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Geography = readString(dis);

					this.CountryCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.CountryCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Geography=" + Geography);
			sb.append(",CountryCode=" + CountryCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CountryCode, other.CountryCode);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Gender;

		public Integer getGender() {
			return this.Gender;
		}

		public String Gender_type;

		public String getGender_type() {
			return this.Gender_type;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Gender == null) ? 0 : this.Gender.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row24Struct other = (row24Struct) obj;

			if (this.Gender == null) {
				if (other.Gender != null)
					return false;

			} else if (!this.Gender.equals(other.Gender))

				return false;

			return true;
		}

		public void copyDataTo(row24Struct other) {

			other.Gender = this.Gender;
			other.Gender_type = this.Gender_type;

		}

		public void copyKeysDataTo(row24Struct other) {

			other.Gender = this.Gender;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Gender = readInteger(dis);

					this.Gender_type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Gender, dos);

				// String

				writeString(this.Gender_type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Gender=" + String.valueOf(Gender));
			sb.append(",Gender_type=" + Gender_type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Gender, other.Gender);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Gender;

		public Integer getGender() {
			return this.Gender;
		}

		public String Gender_type;

		public String getGender_type() {
			return this.Gender_type;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Gender == null) ? 0 : this.Gender.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row23Struct other = (row23Struct) obj;

			if (this.Gender == null) {
				if (other.Gender != null)
					return false;

			} else if (!this.Gender.equals(other.Gender))

				return false;

			return true;
		}

		public void copyDataTo(row23Struct other) {

			other.Gender = this.Gender;
			other.Gender_type = this.Gender_type;

		}

		public void copyKeysDataTo(row23Struct other) {

			other.Gender = this.Gender;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Gender = readInteger(dis);

					this.Gender_type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Gender, dos);

				// String

				writeString(this.Gender_type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Gender=" + String.valueOf(Gender));
			sb.append(",Gender_type=" + Gender_type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Gender, other.Gender);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_4
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_4> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Gender;

		public Integer getGender() {
			return this.Gender;
		}

		public String Gender_type;

		public String getGender_type() {
			return this.Gender_type;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Gender == null) ? 0 : this.Gender.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtSortRow_4 other = (OnRowsEndStructtSortRow_4) obj;

			if (this.Gender == null) {
				if (other.Gender != null)
					return false;

			} else if (!this.Gender.equals(other.Gender))

				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtSortRow_4 other) {

			other.Gender = this.Gender;
			other.Gender_type = this.Gender_type;

		}

		public void copyKeysDataTo(OnRowsEndStructtSortRow_4 other) {

			other.Gender = this.Gender;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Gender = readInteger(dis);

					this.Gender_type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Gender, dos);

				// String

				writeString(this.Gender_type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Gender=" + String.valueOf(Gender));
			sb.append(",Gender_type=" + Gender_type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_4 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Gender, other.Gender);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class Telecom_GenderStruct implements routines.system.IPersistableRow<Telecom_GenderStruct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Gender;

		public Integer getGender() {
			return this.Gender;
		}

		public String Gender_type;

		public String getGender_type() {
			return this.Gender_type;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Gender == null) ? 0 : this.Gender.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final Telecom_GenderStruct other = (Telecom_GenderStruct) obj;

			if (this.Gender == null) {
				if (other.Gender != null)
					return false;

			} else if (!this.Gender.equals(other.Gender))

				return false;

			return true;
		}

		public void copyDataTo(Telecom_GenderStruct other) {

			other.Gender = this.Gender;
			other.Gender_type = this.Gender_type;

		}

		public void copyKeysDataTo(Telecom_GenderStruct other) {

			other.Gender = this.Gender;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Gender = readInteger(dis);

					this.Gender_type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Gender, dos);

				// String

				writeString(this.Gender_type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Gender=" + String.valueOf(Gender));
			sb.append(",Gender_type=" + Gender_type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(Telecom_GenderStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Gender, other.Gender);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row21Struct other = (row21Struct) obj;

			if (this.CustomerID == null) {
				if (other.CustomerID != null)
					return false;

			} else if (!this.CustomerID.equals(other.CustomerID))

				return false;

			return true;
		}

		public void copyDataTo(row21Struct other) {

			other.CustomerID = this.CustomerID;
			other.InternetService = this.InternetService;
			other.Contract = this.Contract;
			other.PaymentMethod = this.PaymentMethod;

		}

		public void copyKeysDataTo(row21Struct other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.CustomerID = readString(dis);

					this.InternetService = readString(dis);

					this.Contract = readString(dis);

					this.PaymentMethod = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.InternetService, dos);

				// String

				writeString(this.Contract, dos);

				// String

				writeString(this.PaymentMethod, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + CustomerID);
			sb.append(",InternetService=" + InternetService);
			sb.append(",Contract=" + Contract);
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row20Struct other = (row20Struct) obj;

			if (this.CustomerID == null) {
				if (other.CustomerID != null)
					return false;

			} else if (!this.CustomerID.equals(other.CustomerID))

				return false;

			return true;
		}

		public void copyDataTo(row20Struct other) {

			other.CustomerID = this.CustomerID;
			other.InternetService = this.InternetService;
			other.Contract = this.Contract;
			other.PaymentMethod = this.PaymentMethod;

		}

		public void copyKeysDataTo(row20Struct other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.CustomerID = readString(dis);

					this.InternetService = readString(dis);

					this.Contract = readString(dis);

					this.PaymentMethod = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.InternetService, dos);

				// String

				writeString(this.Contract, dos);

				// String

				writeString(this.PaymentMethod, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + CustomerID);
			sb.append(",InternetService=" + InternetService);
			sb.append(",Contract=" + Contract);
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_3
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_3> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtSortRow_3 other = (OnRowsEndStructtSortRow_3) obj;

			if (this.CustomerID == null) {
				if (other.CustomerID != null)
					return false;

			} else if (!this.CustomerID.equals(other.CustomerID))

				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtSortRow_3 other) {

			other.CustomerID = this.CustomerID;
			other.InternetService = this.InternetService;
			other.Contract = this.Contract;
			other.PaymentMethod = this.PaymentMethod;

		}

		public void copyKeysDataTo(OnRowsEndStructtSortRow_3 other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.CustomerID = readString(dis);

					this.InternetService = readString(dis);

					this.Contract = readString(dis);

					this.PaymentMethod = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.InternetService, dos);

				// String

				writeString(this.Contract, dos);

				// String

				writeString(this.PaymentMethod, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + CustomerID);
			sb.append(",InternetService=" + InternetService);
			sb.append(",Contract=" + Contract);
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_3 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row19Struct other = (row19Struct) obj;

			if (this.CustomerID == null) {
				if (other.CustomerID != null)
					return false;

			} else if (!this.CustomerID.equals(other.CustomerID))

				return false;

			return true;
		}

		public void copyDataTo(row19Struct other) {

			other.CustomerID = this.CustomerID;
			other.InternetService = this.InternetService;
			other.Contract = this.Contract;
			other.PaymentMethod = this.PaymentMethod;

		}

		public void copyKeysDataTo(row19Struct other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.CustomerID = readString(dis);

					this.InternetService = readString(dis);

					this.Contract = readString(dis);

					this.PaymentMethod = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.InternetService, dos);

				// String

				writeString(this.Contract, dos);

				// String

				writeString(this.PaymentMethod, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + CustomerID);
			sb.append(",InternetService=" + InternetService);
			sb.append(",Contract=" + Contract);
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public Integer Gender;

		public Integer getGender() {
			return this.Gender;
		}

		public Integer SeniorCitizen;

		public Integer getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public Integer Partner;

		public Integer getPartner() {
			return this.Partner;
		}

		public Integer Dependents;

		public Integer getDependents() {
			return this.Dependents;
		}

		public Integer tenure;

		public Integer getTenure() {
			return this.tenure;
		}

		public Integer PhoneService;

		public Integer getPhoneService() {
			return this.PhoneService;
		}

		public Integer MultipleLines;

		public Integer getMultipleLines() {
			return this.MultipleLines;
		}

		public Integer PaperlessBilling;

		public Integer getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public Float MonthlyCharges;

		public Float getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public Float TotalCharges;

		public Float getTotalCharges() {
			return this.TotalCharges;
		}

		public Integer Churn;

		public Integer getChurn() {
			return this.Churn;
		}

		public Integer OnlineSecurity;

		public Integer getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public Integer OnlineBackup;

		public Integer getOnlineBackup() {
			return this.OnlineBackup;
		}

		public Integer DeviceProtection;

		public Integer getDeviceProtection() {
			return this.DeviceProtection;
		}

		public Integer TechSupport;

		public Integer getTechSupport() {
			return this.TechSupport;
		}

		public Integer StreamingTV;

		public Integer getStreamingTV() {
			return this.StreamingTV;
		}

		public Integer StreamingMovies;

		public Integer getStreamingMovies() {
			return this.StreamingMovies;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row17Struct other = (row17Struct) obj;

			if (this.CustomerID == null) {
				if (other.CustomerID != null)
					return false;

			} else if (!this.CustomerID.equals(other.CustomerID))

				return false;

			return true;
		}

		public void copyDataTo(row17Struct other) {

			other.CustomerID = this.CustomerID;
			other.Gender = this.Gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.CountryCode = this.CountryCode;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.tenure = this.tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.PaperlessBilling = this.PaperlessBilling;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;

		}

		public void copyKeysDataTo(row17Struct other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.CustomerID = readString(dis);

					this.Gender = readInteger(dis);

					this.SeniorCitizen = readInteger(dis);

					this.CountryCode = readString(dis);

					this.Partner = readInteger(dis);

					this.Dependents = readInteger(dis);

					this.tenure = readInteger(dis);

					this.PhoneService = readInteger(dis);

					this.MultipleLines = readInteger(dis);

					this.PaperlessBilling = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MonthlyCharges = null;
					} else {
						this.MonthlyCharges = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TotalCharges = null;
					} else {
						this.TotalCharges = dis.readFloat();
					}

					this.Churn = readInteger(dis);

					this.OnlineSecurity = readInteger(dis);

					this.OnlineBackup = readInteger(dis);

					this.DeviceProtection = readInteger(dis);

					this.TechSupport = readInteger(dis);

					this.StreamingTV = readInteger(dis);

					this.StreamingMovies = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CustomerID, dos);

				// Integer

				writeInteger(this.Gender, dos);

				// Integer

				writeInteger(this.SeniorCitizen, dos);

				// String

				writeString(this.CountryCode, dos);

				// Integer

				writeInteger(this.Partner, dos);

				// Integer

				writeInteger(this.Dependents, dos);

				// Integer

				writeInteger(this.tenure, dos);

				// Integer

				writeInteger(this.PhoneService, dos);

				// Integer

				writeInteger(this.MultipleLines, dos);

				// Integer

				writeInteger(this.PaperlessBilling, dos);

				// Float

				if (this.MonthlyCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MonthlyCharges);
				}

				// Float

				if (this.TotalCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalCharges);
				}

				// Integer

				writeInteger(this.Churn, dos);

				// Integer

				writeInteger(this.OnlineSecurity, dos);

				// Integer

				writeInteger(this.OnlineBackup, dos);

				// Integer

				writeInteger(this.DeviceProtection, dos);

				// Integer

				writeInteger(this.TechSupport, dos);

				// Integer

				writeInteger(this.StreamingTV, dos);

				// Integer

				writeInteger(this.StreamingMovies, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + CustomerID);
			sb.append(",Gender=" + String.valueOf(Gender));
			sb.append(",SeniorCitizen=" + String.valueOf(SeniorCitizen));
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Partner=" + String.valueOf(Partner));
			sb.append(",Dependents=" + String.valueOf(Dependents));
			sb.append(",tenure=" + String.valueOf(tenure));
			sb.append(",PhoneService=" + String.valueOf(PhoneService));
			sb.append(",MultipleLines=" + String.valueOf(MultipleLines));
			sb.append(",PaperlessBilling=" + String.valueOf(PaperlessBilling));
			sb.append(",MonthlyCharges=" + String.valueOf(MonthlyCharges));
			sb.append(",TotalCharges=" + String.valueOf(TotalCharges));
			sb.append(",Churn=" + String.valueOf(Churn));
			sb.append(",OnlineSecurity=" + String.valueOf(OnlineSecurity));
			sb.append(",OnlineBackup=" + String.valueOf(OnlineBackup));
			sb.append(",DeviceProtection=" + String.valueOf(DeviceProtection));
			sb.append(",TechSupport=" + String.valueOf(TechSupport));
			sb.append(",StreamingTV=" + String.valueOf(StreamingTV));
			sb.append(",StreamingMovies=" + String.valueOf(StreamingMovies));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public Integer Gender;

		public Integer getGender() {
			return this.Gender;
		}

		public Integer SeniorCitizen;

		public Integer getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public Integer Partner;

		public Integer getPartner() {
			return this.Partner;
		}

		public Integer Dependents;

		public Integer getDependents() {
			return this.Dependents;
		}

		public Integer tenure;

		public Integer getTenure() {
			return this.tenure;
		}

		public Integer PhoneService;

		public Integer getPhoneService() {
			return this.PhoneService;
		}

		public Integer MultipleLines;

		public Integer getMultipleLines() {
			return this.MultipleLines;
		}

		public Integer PaperlessBilling;

		public Integer getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public Float MonthlyCharges;

		public Float getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public Float TotalCharges;

		public Float getTotalCharges() {
			return this.TotalCharges;
		}

		public Integer Churn;

		public Integer getChurn() {
			return this.Churn;
		}

		public Integer OnlineSecurity;

		public Integer getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public Integer OnlineBackup;

		public Integer getOnlineBackup() {
			return this.OnlineBackup;
		}

		public Integer DeviceProtection;

		public Integer getDeviceProtection() {
			return this.DeviceProtection;
		}

		public Integer TechSupport;

		public Integer getTechSupport() {
			return this.TechSupport;
		}

		public Integer StreamingTV;

		public Integer getStreamingTV() {
			return this.StreamingTV;
		}

		public Integer StreamingMovies;

		public Integer getStreamingMovies() {
			return this.StreamingMovies;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.CustomerID == null) {
				if (other.CustomerID != null)
					return false;

			} else if (!this.CustomerID.equals(other.CustomerID))

				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.CustomerID = this.CustomerID;
			other.Gender = this.Gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.CountryCode = this.CountryCode;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.tenure = this.tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.PaperlessBilling = this.PaperlessBilling;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.CustomerID = readString(dis);

					this.Gender = readInteger(dis);

					this.SeniorCitizen = readInteger(dis);

					this.CountryCode = readString(dis);

					this.Partner = readInteger(dis);

					this.Dependents = readInteger(dis);

					this.tenure = readInteger(dis);

					this.PhoneService = readInteger(dis);

					this.MultipleLines = readInteger(dis);

					this.PaperlessBilling = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MonthlyCharges = null;
					} else {
						this.MonthlyCharges = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TotalCharges = null;
					} else {
						this.TotalCharges = dis.readFloat();
					}

					this.Churn = readInteger(dis);

					this.OnlineSecurity = readInteger(dis);

					this.OnlineBackup = readInteger(dis);

					this.DeviceProtection = readInteger(dis);

					this.TechSupport = readInteger(dis);

					this.StreamingTV = readInteger(dis);

					this.StreamingMovies = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CustomerID, dos);

				// Integer

				writeInteger(this.Gender, dos);

				// Integer

				writeInteger(this.SeniorCitizen, dos);

				// String

				writeString(this.CountryCode, dos);

				// Integer

				writeInteger(this.Partner, dos);

				// Integer

				writeInteger(this.Dependents, dos);

				// Integer

				writeInteger(this.tenure, dos);

				// Integer

				writeInteger(this.PhoneService, dos);

				// Integer

				writeInteger(this.MultipleLines, dos);

				// Integer

				writeInteger(this.PaperlessBilling, dos);

				// Float

				if (this.MonthlyCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MonthlyCharges);
				}

				// Float

				if (this.TotalCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalCharges);
				}

				// Integer

				writeInteger(this.Churn, dos);

				// Integer

				writeInteger(this.OnlineSecurity, dos);

				// Integer

				writeInteger(this.OnlineBackup, dos);

				// Integer

				writeInteger(this.DeviceProtection, dos);

				// Integer

				writeInteger(this.TechSupport, dos);

				// Integer

				writeInteger(this.StreamingTV, dos);

				// Integer

				writeInteger(this.StreamingMovies, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + CustomerID);
			sb.append(",Gender=" + String.valueOf(Gender));
			sb.append(",SeniorCitizen=" + String.valueOf(SeniorCitizen));
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Partner=" + String.valueOf(Partner));
			sb.append(",Dependents=" + String.valueOf(Dependents));
			sb.append(",tenure=" + String.valueOf(tenure));
			sb.append(",PhoneService=" + String.valueOf(PhoneService));
			sb.append(",MultipleLines=" + String.valueOf(MultipleLines));
			sb.append(",PaperlessBilling=" + String.valueOf(PaperlessBilling));
			sb.append(",MonthlyCharges=" + String.valueOf(MonthlyCharges));
			sb.append(",TotalCharges=" + String.valueOf(TotalCharges));
			sb.append(",Churn=" + String.valueOf(Churn));
			sb.append(",OnlineSecurity=" + String.valueOf(OnlineSecurity));
			sb.append(",OnlineBackup=" + String.valueOf(OnlineBackup));
			sb.append(",DeviceProtection=" + String.valueOf(DeviceProtection));
			sb.append(",TechSupport=" + String.valueOf(TechSupport));
			sb.append(",StreamingTV=" + String.valueOf(StreamingTV));
			sb.append(",StreamingMovies=" + String.valueOf(StreamingMovies));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_2
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_2> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public Integer Gender;

		public Integer getGender() {
			return this.Gender;
		}

		public Integer SeniorCitizen;

		public Integer getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public Integer Partner;

		public Integer getPartner() {
			return this.Partner;
		}

		public Integer Dependents;

		public Integer getDependents() {
			return this.Dependents;
		}

		public Integer tenure;

		public Integer getTenure() {
			return this.tenure;
		}

		public Integer PhoneService;

		public Integer getPhoneService() {
			return this.PhoneService;
		}

		public Integer MultipleLines;

		public Integer getMultipleLines() {
			return this.MultipleLines;
		}

		public Integer PaperlessBilling;

		public Integer getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public Float MonthlyCharges;

		public Float getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public Float TotalCharges;

		public Float getTotalCharges() {
			return this.TotalCharges;
		}

		public Integer Churn;

		public Integer getChurn() {
			return this.Churn;
		}

		public Integer OnlineSecurity;

		public Integer getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public Integer OnlineBackup;

		public Integer getOnlineBackup() {
			return this.OnlineBackup;
		}

		public Integer DeviceProtection;

		public Integer getDeviceProtection() {
			return this.DeviceProtection;
		}

		public Integer TechSupport;

		public Integer getTechSupport() {
			return this.TechSupport;
		}

		public Integer StreamingTV;

		public Integer getStreamingTV() {
			return this.StreamingTV;
		}

		public Integer StreamingMovies;

		public Integer getStreamingMovies() {
			return this.StreamingMovies;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtSortRow_2 other = (OnRowsEndStructtSortRow_2) obj;

			if (this.CustomerID == null) {
				if (other.CustomerID != null)
					return false;

			} else if (!this.CustomerID.equals(other.CustomerID))

				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtSortRow_2 other) {

			other.CustomerID = this.CustomerID;
			other.Gender = this.Gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.CountryCode = this.CountryCode;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.tenure = this.tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.PaperlessBilling = this.PaperlessBilling;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;

		}

		public void copyKeysDataTo(OnRowsEndStructtSortRow_2 other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.CustomerID = readString(dis);

					this.Gender = readInteger(dis);

					this.SeniorCitizen = readInteger(dis);

					this.CountryCode = readString(dis);

					this.Partner = readInteger(dis);

					this.Dependents = readInteger(dis);

					this.tenure = readInteger(dis);

					this.PhoneService = readInteger(dis);

					this.MultipleLines = readInteger(dis);

					this.PaperlessBilling = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MonthlyCharges = null;
					} else {
						this.MonthlyCharges = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TotalCharges = null;
					} else {
						this.TotalCharges = dis.readFloat();
					}

					this.Churn = readInteger(dis);

					this.OnlineSecurity = readInteger(dis);

					this.OnlineBackup = readInteger(dis);

					this.DeviceProtection = readInteger(dis);

					this.TechSupport = readInteger(dis);

					this.StreamingTV = readInteger(dis);

					this.StreamingMovies = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CustomerID, dos);

				// Integer

				writeInteger(this.Gender, dos);

				// Integer

				writeInteger(this.SeniorCitizen, dos);

				// String

				writeString(this.CountryCode, dos);

				// Integer

				writeInteger(this.Partner, dos);

				// Integer

				writeInteger(this.Dependents, dos);

				// Integer

				writeInteger(this.tenure, dos);

				// Integer

				writeInteger(this.PhoneService, dos);

				// Integer

				writeInteger(this.MultipleLines, dos);

				// Integer

				writeInteger(this.PaperlessBilling, dos);

				// Float

				if (this.MonthlyCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MonthlyCharges);
				}

				// Float

				if (this.TotalCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalCharges);
				}

				// Integer

				writeInteger(this.Churn, dos);

				// Integer

				writeInteger(this.OnlineSecurity, dos);

				// Integer

				writeInteger(this.OnlineBackup, dos);

				// Integer

				writeInteger(this.DeviceProtection, dos);

				// Integer

				writeInteger(this.TechSupport, dos);

				// Integer

				writeInteger(this.StreamingTV, dos);

				// Integer

				writeInteger(this.StreamingMovies, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + CustomerID);
			sb.append(",Gender=" + String.valueOf(Gender));
			sb.append(",SeniorCitizen=" + String.valueOf(SeniorCitizen));
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Partner=" + String.valueOf(Partner));
			sb.append(",Dependents=" + String.valueOf(Dependents));
			sb.append(",tenure=" + String.valueOf(tenure));
			sb.append(",PhoneService=" + String.valueOf(PhoneService));
			sb.append(",MultipleLines=" + String.valueOf(MultipleLines));
			sb.append(",PaperlessBilling=" + String.valueOf(PaperlessBilling));
			sb.append(",MonthlyCharges=" + String.valueOf(MonthlyCharges));
			sb.append(",TotalCharges=" + String.valueOf(TotalCharges));
			sb.append(",Churn=" + String.valueOf(Churn));
			sb.append(",OnlineSecurity=" + String.valueOf(OnlineSecurity));
			sb.append(",OnlineBackup=" + String.valueOf(OnlineBackup));
			sb.append(",DeviceProtection=" + String.valueOf(DeviceProtection));
			sb.append(",TechSupport=" + String.valueOf(TechSupport));
			sb.append(",StreamingTV=" + String.valueOf(StreamingTV));
			sb.append(",StreamingMovies=" + String.valueOf(StreamingMovies));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_2 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public Integer Gender;

		public Integer getGender() {
			return this.Gender;
		}

		public Integer SeniorCitizen;

		public Integer getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public Integer Partner;

		public Integer getPartner() {
			return this.Partner;
		}

		public Integer Dependents;

		public Integer getDependents() {
			return this.Dependents;
		}

		public Integer tenure;

		public Integer getTenure() {
			return this.tenure;
		}

		public Integer PhoneService;

		public Integer getPhoneService() {
			return this.PhoneService;
		}

		public Integer MultipleLines;

		public Integer getMultipleLines() {
			return this.MultipleLines;
		}

		public Integer PaperlessBilling;

		public Integer getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public Float MonthlyCharges;

		public Float getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public Float TotalCharges;

		public Float getTotalCharges() {
			return this.TotalCharges;
		}

		public Integer Churn;

		public Integer getChurn() {
			return this.Churn;
		}

		public Integer OnlineSecurity;

		public Integer getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public Integer OnlineBackup;

		public Integer getOnlineBackup() {
			return this.OnlineBackup;
		}

		public Integer DeviceProtection;

		public Integer getDeviceProtection() {
			return this.DeviceProtection;
		}

		public Integer TechSupport;

		public Integer getTechSupport() {
			return this.TechSupport;
		}

		public Integer StreamingTV;

		public Integer getStreamingTV() {
			return this.StreamingTV;
		}

		public Integer StreamingMovies;

		public Integer getStreamingMovies() {
			return this.StreamingMovies;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.CustomerID == null) {
				if (other.CustomerID != null)
					return false;

			} else if (!this.CustomerID.equals(other.CustomerID))

				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.CustomerID = this.CustomerID;
			other.Gender = this.Gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.CountryCode = this.CountryCode;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.tenure = this.tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.PaperlessBilling = this.PaperlessBilling;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.CustomerID = readString(dis);

					this.Gender = readInteger(dis);

					this.SeniorCitizen = readInteger(dis);

					this.CountryCode = readString(dis);

					this.Partner = readInteger(dis);

					this.Dependents = readInteger(dis);

					this.tenure = readInteger(dis);

					this.PhoneService = readInteger(dis);

					this.MultipleLines = readInteger(dis);

					this.PaperlessBilling = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MonthlyCharges = null;
					} else {
						this.MonthlyCharges = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TotalCharges = null;
					} else {
						this.TotalCharges = dis.readFloat();
					}

					this.Churn = readInteger(dis);

					this.OnlineSecurity = readInteger(dis);

					this.OnlineBackup = readInteger(dis);

					this.DeviceProtection = readInteger(dis);

					this.TechSupport = readInteger(dis);

					this.StreamingTV = readInteger(dis);

					this.StreamingMovies = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CustomerID, dos);

				// Integer

				writeInteger(this.Gender, dos);

				// Integer

				writeInteger(this.SeniorCitizen, dos);

				// String

				writeString(this.CountryCode, dos);

				// Integer

				writeInteger(this.Partner, dos);

				// Integer

				writeInteger(this.Dependents, dos);

				// Integer

				writeInteger(this.tenure, dos);

				// Integer

				writeInteger(this.PhoneService, dos);

				// Integer

				writeInteger(this.MultipleLines, dos);

				// Integer

				writeInteger(this.PaperlessBilling, dos);

				// Float

				if (this.MonthlyCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MonthlyCharges);
				}

				// Float

				if (this.TotalCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalCharges);
				}

				// Integer

				writeInteger(this.Churn, dos);

				// Integer

				writeInteger(this.OnlineSecurity, dos);

				// Integer

				writeInteger(this.OnlineBackup, dos);

				// Integer

				writeInteger(this.DeviceProtection, dos);

				// Integer

				writeInteger(this.TechSupport, dos);

				// Integer

				writeInteger(this.StreamingTV, dos);

				// Integer

				writeInteger(this.StreamingMovies, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + CustomerID);
			sb.append(",Gender=" + String.valueOf(Gender));
			sb.append(",SeniorCitizen=" + String.valueOf(SeniorCitizen));
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Partner=" + String.valueOf(Partner));
			sb.append(",Dependents=" + String.valueOf(Dependents));
			sb.append(",tenure=" + String.valueOf(tenure));
			sb.append(",PhoneService=" + String.valueOf(PhoneService));
			sb.append(",MultipleLines=" + String.valueOf(MultipleLines));
			sb.append(",PaperlessBilling=" + String.valueOf(PaperlessBilling));
			sb.append(",MonthlyCharges=" + String.valueOf(MonthlyCharges));
			sb.append(",TotalCharges=" + String.valueOf(TotalCharges));
			sb.append(",Churn=" + String.valueOf(Churn));
			sb.append(",OnlineSecurity=" + String.valueOf(OnlineSecurity));
			sb.append(",OnlineBackup=" + String.valueOf(OnlineBackup));
			sb.append(",DeviceProtection=" + String.valueOf(DeviceProtection));
			sb.append(",TechSupport=" + String.valueOf(TechSupport));
			sb.append(",StreamingTV=" + String.valueOf(StreamingTV));
			sb.append(",StreamingMovies=" + String.valueOf(StreamingMovies));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public Integer Gender;

		public Integer getGender() {
			return this.Gender;
		}

		public Integer SeniorCitizen;

		public Integer getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public Integer Partner;

		public Integer getPartner() {
			return this.Partner;
		}

		public Integer Dependents;

		public Integer getDependents() {
			return this.Dependents;
		}

		public Integer tenure;

		public Integer getTenure() {
			return this.tenure;
		}

		public Integer PhoneService;

		public Integer getPhoneService() {
			return this.PhoneService;
		}

		public Integer MultipleLines;

		public Integer getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public Integer OnlineSecurity;

		public Integer getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public Integer OnlineBackup;

		public Integer getOnlineBackup() {
			return this.OnlineBackup;
		}

		public Integer DeviceProtection;

		public Integer getDeviceProtection() {
			return this.DeviceProtection;
		}

		public Integer TechSupport;

		public Integer getTechSupport() {
			return this.TechSupport;
		}

		public Integer StreamingTV;

		public Integer getStreamingTV() {
			return this.StreamingTV;
		}

		public Integer StreamingMovies;

		public Integer getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public Integer PaperlessBilling;

		public Integer getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public Float MonthlyCharges;

		public Float getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public Float TotalCharges;

		public Float getTotalCharges() {
			return this.TotalCharges;
		}

		public Integer Churn;

		public Integer getChurn() {
			return this.Churn;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.CustomerID = readString(dis);

					this.Gender = readInteger(dis);

					this.SeniorCitizen = readInteger(dis);

					this.Geography = readString(dis);

					this.CountryCode = readString(dis);

					this.Partner = readInteger(dis);

					this.Dependents = readInteger(dis);

					this.tenure = readInteger(dis);

					this.PhoneService = readInteger(dis);

					this.MultipleLines = readInteger(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readInteger(dis);

					this.OnlineBackup = readInteger(dis);

					this.DeviceProtection = readInteger(dis);

					this.TechSupport = readInteger(dis);

					this.StreamingTV = readInteger(dis);

					this.StreamingMovies = readInteger(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readInteger(dis);

					this.PaymentMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MonthlyCharges = null;
					} else {
						this.MonthlyCharges = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TotalCharges = null;
					} else {
						this.TotalCharges = dis.readFloat();
					}

					this.Churn = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.CustomerID, dos);

				// Integer

				writeInteger(this.Gender, dos);

				// Integer

				writeInteger(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.CountryCode, dos);

				// Integer

				writeInteger(this.Partner, dos);

				// Integer

				writeInteger(this.Dependents, dos);

				// Integer

				writeInteger(this.tenure, dos);

				// Integer

				writeInteger(this.PhoneService, dos);

				// Integer

				writeInteger(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// Integer

				writeInteger(this.OnlineSecurity, dos);

				// Integer

				writeInteger(this.OnlineBackup, dos);

				// Integer

				writeInteger(this.DeviceProtection, dos);

				// Integer

				writeInteger(this.TechSupport, dos);

				// Integer

				writeInteger(this.StreamingTV, dos);

				// Integer

				writeInteger(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// Integer

				writeInteger(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// Float

				if (this.MonthlyCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MonthlyCharges);
				}

				// Float

				if (this.TotalCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalCharges);
				}

				// Integer

				writeInteger(this.Churn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",Gender=" + String.valueOf(Gender));
			sb.append(",SeniorCitizen=" + String.valueOf(SeniorCitizen));
			sb.append(",Geography=" + Geography);
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Partner=" + String.valueOf(Partner));
			sb.append(",Dependents=" + String.valueOf(Dependents));
			sb.append(",tenure=" + String.valueOf(tenure));
			sb.append(",PhoneService=" + String.valueOf(PhoneService));
			sb.append(",MultipleLines=" + String.valueOf(MultipleLines));
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + String.valueOf(OnlineSecurity));
			sb.append(",OnlineBackup=" + String.valueOf(OnlineBackup));
			sb.append(",DeviceProtection=" + String.valueOf(DeviceProtection));
			sb.append(",TechSupport=" + String.valueOf(TechSupport));
			sb.append(",StreamingTV=" + String.valueOf(StreamingTV));
			sb.append(",StreamingMovies=" + String.valueOf(StreamingMovies));
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + String.valueOf(PaperlessBilling));
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + String.valueOf(MonthlyCharges));
			sb.append(",TotalCharges=" + String.valueOf(TotalCharges));
			sb.append(",Churn=" + String.valueOf(Churn));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public Integer Gender;

		public Integer getGender() {
			return this.Gender;
		}

		public Integer SeniorCitizen;

		public Integer getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public Integer Partner;

		public Integer getPartner() {
			return this.Partner;
		}

		public Integer Dependents;

		public Integer getDependents() {
			return this.Dependents;
		}

		public Integer tenure;

		public Integer getTenure() {
			return this.tenure;
		}

		public Integer PhoneService;

		public Integer getPhoneService() {
			return this.PhoneService;
		}

		public Integer MultipleLines;

		public Integer getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public Integer OnlineSecurity;

		public Integer getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public Integer OnlineBackup;

		public Integer getOnlineBackup() {
			return this.OnlineBackup;
		}

		public Integer DeviceProtection;

		public Integer getDeviceProtection() {
			return this.DeviceProtection;
		}

		public Integer TechSupport;

		public Integer getTechSupport() {
			return this.TechSupport;
		}

		public Integer StreamingTV;

		public Integer getStreamingTV() {
			return this.StreamingTV;
		}

		public Integer StreamingMovies;

		public Integer getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public Integer PaperlessBilling;

		public Integer getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public Float MonthlyCharges;

		public Float getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public Float TotalCharges;

		public Float getTotalCharges() {
			return this.TotalCharges;
		}

		public Integer Churn;

		public Integer getChurn() {
			return this.Churn;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.CustomerID = readString(dis);

					this.Gender = readInteger(dis);

					this.SeniorCitizen = readInteger(dis);

					this.Geography = readString(dis);

					this.CountryCode = readString(dis);

					this.Partner = readInteger(dis);

					this.Dependents = readInteger(dis);

					this.tenure = readInteger(dis);

					this.PhoneService = readInteger(dis);

					this.MultipleLines = readInteger(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readInteger(dis);

					this.OnlineBackup = readInteger(dis);

					this.DeviceProtection = readInteger(dis);

					this.TechSupport = readInteger(dis);

					this.StreamingTV = readInteger(dis);

					this.StreamingMovies = readInteger(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readInteger(dis);

					this.PaymentMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MonthlyCharges = null;
					} else {
						this.MonthlyCharges = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TotalCharges = null;
					} else {
						this.TotalCharges = dis.readFloat();
					}

					this.Churn = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.CustomerID, dos);

				// Integer

				writeInteger(this.Gender, dos);

				// Integer

				writeInteger(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.CountryCode, dos);

				// Integer

				writeInteger(this.Partner, dos);

				// Integer

				writeInteger(this.Dependents, dos);

				// Integer

				writeInteger(this.tenure, dos);

				// Integer

				writeInteger(this.PhoneService, dos);

				// Integer

				writeInteger(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// Integer

				writeInteger(this.OnlineSecurity, dos);

				// Integer

				writeInteger(this.OnlineBackup, dos);

				// Integer

				writeInteger(this.DeviceProtection, dos);

				// Integer

				writeInteger(this.TechSupport, dos);

				// Integer

				writeInteger(this.StreamingTV, dos);

				// Integer

				writeInteger(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// Integer

				writeInteger(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// Float

				if (this.MonthlyCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MonthlyCharges);
				}

				// Float

				if (this.TotalCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalCharges);
				}

				// Integer

				writeInteger(this.Churn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",Gender=" + String.valueOf(Gender));
			sb.append(",SeniorCitizen=" + String.valueOf(SeniorCitizen));
			sb.append(",Geography=" + Geography);
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Partner=" + String.valueOf(Partner));
			sb.append(",Dependents=" + String.valueOf(Dependents));
			sb.append(",tenure=" + String.valueOf(tenure));
			sb.append(",PhoneService=" + String.valueOf(PhoneService));
			sb.append(",MultipleLines=" + String.valueOf(MultipleLines));
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + String.valueOf(OnlineSecurity));
			sb.append(",OnlineBackup=" + String.valueOf(OnlineBackup));
			sb.append(",DeviceProtection=" + String.valueOf(DeviceProtection));
			sb.append(",TechSupport=" + String.valueOf(TechSupport));
			sb.append(",StreamingTV=" + String.valueOf(StreamingTV));
			sb.append(",StreamingMovies=" + String.valueOf(StreamingMovies));
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + String.valueOf(PaperlessBilling));
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + String.valueOf(MonthlyCharges));
			sb.append(",TotalCharges=" + String.valueOf(TotalCharges));
			sb.append(",Churn=" + String.valueOf(Churn));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public Integer Gender;

		public Integer getGender() {
			return this.Gender;
		}

		public Integer SeniorCitizen;

		public Integer getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public Integer Partner;

		public Integer getPartner() {
			return this.Partner;
		}

		public Integer Dependents;

		public Integer getDependents() {
			return this.Dependents;
		}

		public Integer tenure;

		public Integer getTenure() {
			return this.tenure;
		}

		public Integer PhoneService;

		public Integer getPhoneService() {
			return this.PhoneService;
		}

		public Integer MultipleLines;

		public Integer getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public Integer OnlineSecurity;

		public Integer getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public Integer OnlineBackup;

		public Integer getOnlineBackup() {
			return this.OnlineBackup;
		}

		public Integer DeviceProtection;

		public Integer getDeviceProtection() {
			return this.DeviceProtection;
		}

		public Integer TechSupport;

		public Integer getTechSupport() {
			return this.TechSupport;
		}

		public Integer StreamingTV;

		public Integer getStreamingTV() {
			return this.StreamingTV;
		}

		public Integer StreamingMovies;

		public Integer getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public Integer PaperlessBilling;

		public Integer getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public Float MonthlyCharges;

		public Float getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public Float TotalCharges;

		public Float getTotalCharges() {
			return this.TotalCharges;
		}

		public Integer Churn;

		public Integer getChurn() {
			return this.Churn;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.CustomerID = readString(dis);

					this.Gender = readInteger(dis);

					this.SeniorCitizen = readInteger(dis);

					this.Geography = readString(dis);

					this.CountryCode = readString(dis);

					this.Partner = readInteger(dis);

					this.Dependents = readInteger(dis);

					this.tenure = readInteger(dis);

					this.PhoneService = readInteger(dis);

					this.MultipleLines = readInteger(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readInteger(dis);

					this.OnlineBackup = readInteger(dis);

					this.DeviceProtection = readInteger(dis);

					this.TechSupport = readInteger(dis);

					this.StreamingTV = readInteger(dis);

					this.StreamingMovies = readInteger(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readInteger(dis);

					this.PaymentMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MonthlyCharges = null;
					} else {
						this.MonthlyCharges = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TotalCharges = null;
					} else {
						this.TotalCharges = dis.readFloat();
					}

					this.Churn = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.CustomerID, dos);

				// Integer

				writeInteger(this.Gender, dos);

				// Integer

				writeInteger(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.CountryCode, dos);

				// Integer

				writeInteger(this.Partner, dos);

				// Integer

				writeInteger(this.Dependents, dos);

				// Integer

				writeInteger(this.tenure, dos);

				// Integer

				writeInteger(this.PhoneService, dos);

				// Integer

				writeInteger(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// Integer

				writeInteger(this.OnlineSecurity, dos);

				// Integer

				writeInteger(this.OnlineBackup, dos);

				// Integer

				writeInteger(this.DeviceProtection, dos);

				// Integer

				writeInteger(this.TechSupport, dos);

				// Integer

				writeInteger(this.StreamingTV, dos);

				// Integer

				writeInteger(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// Integer

				writeInteger(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// Float

				if (this.MonthlyCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MonthlyCharges);
				}

				// Float

				if (this.TotalCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalCharges);
				}

				// Integer

				writeInteger(this.Churn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",Gender=" + String.valueOf(Gender));
			sb.append(",SeniorCitizen=" + String.valueOf(SeniorCitizen));
			sb.append(",Geography=" + Geography);
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Partner=" + String.valueOf(Partner));
			sb.append(",Dependents=" + String.valueOf(Dependents));
			sb.append(",tenure=" + String.valueOf(tenure));
			sb.append(",PhoneService=" + String.valueOf(PhoneService));
			sb.append(",MultipleLines=" + String.valueOf(MultipleLines));
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + String.valueOf(OnlineSecurity));
			sb.append(",OnlineBackup=" + String.valueOf(OnlineBackup));
			sb.append(",DeviceProtection=" + String.valueOf(DeviceProtection));
			sb.append(",TechSupport=" + String.valueOf(TechSupport));
			sb.append(",StreamingTV=" + String.valueOf(StreamingTV));
			sb.append(",StreamingMovies=" + String.valueOf(StreamingMovies));
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + String.valueOf(PaperlessBilling));
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + String.valueOf(MonthlyCharges));
			sb.append(",TotalCharges=" + String.valueOf(TotalCharges));
			sb.append(",Churn=" + String.valueOf(Churn));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public Integer Gender;

		public Integer getGender() {
			return this.Gender;
		}

		public Integer SeniorCitizen;

		public Integer getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public Integer Partner;

		public Integer getPartner() {
			return this.Partner;
		}

		public Integer Dependents;

		public Integer getDependents() {
			return this.Dependents;
		}

		public Integer tenure;

		public Integer getTenure() {
			return this.tenure;
		}

		public Integer PhoneService;

		public Integer getPhoneService() {
			return this.PhoneService;
		}

		public Integer MultipleLines;

		public Integer getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public Integer OnlineSecurity;

		public Integer getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public Integer OnlineBackup;

		public Integer getOnlineBackup() {
			return this.OnlineBackup;
		}

		public Integer DeviceProtection;

		public Integer getDeviceProtection() {
			return this.DeviceProtection;
		}

		public Integer TechSupport;

		public Integer getTechSupport() {
			return this.TechSupport;
		}

		public Integer StreamingTV;

		public Integer getStreamingTV() {
			return this.StreamingTV;
		}

		public Integer StreamingMovies;

		public Integer getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public Integer PaperlessBilling;

		public Integer getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public Float MonthlyCharges;

		public Float getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public Float TotalCharges;

		public Float getTotalCharges() {
			return this.TotalCharges;
		}

		public Integer Churn;

		public Integer getChurn() {
			return this.Churn;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.CustomerID = readString(dis);

					this.Gender = readInteger(dis);

					this.SeniorCitizen = readInteger(dis);

					this.Geography = readString(dis);

					this.CountryCode = readString(dis);

					this.Partner = readInteger(dis);

					this.Dependents = readInteger(dis);

					this.tenure = readInteger(dis);

					this.PhoneService = readInteger(dis);

					this.MultipleLines = readInteger(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readInteger(dis);

					this.OnlineBackup = readInteger(dis);

					this.DeviceProtection = readInteger(dis);

					this.TechSupport = readInteger(dis);

					this.StreamingTV = readInteger(dis);

					this.StreamingMovies = readInteger(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readInteger(dis);

					this.PaymentMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MonthlyCharges = null;
					} else {
						this.MonthlyCharges = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TotalCharges = null;
					} else {
						this.TotalCharges = dis.readFloat();
					}

					this.Churn = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.CustomerID, dos);

				// Integer

				writeInteger(this.Gender, dos);

				// Integer

				writeInteger(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.CountryCode, dos);

				// Integer

				writeInteger(this.Partner, dos);

				// Integer

				writeInteger(this.Dependents, dos);

				// Integer

				writeInteger(this.tenure, dos);

				// Integer

				writeInteger(this.PhoneService, dos);

				// Integer

				writeInteger(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// Integer

				writeInteger(this.OnlineSecurity, dos);

				// Integer

				writeInteger(this.OnlineBackup, dos);

				// Integer

				writeInteger(this.DeviceProtection, dos);

				// Integer

				writeInteger(this.TechSupport, dos);

				// Integer

				writeInteger(this.StreamingTV, dos);

				// Integer

				writeInteger(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// Integer

				writeInteger(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// Float

				if (this.MonthlyCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MonthlyCharges);
				}

				// Float

				if (this.TotalCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalCharges);
				}

				// Integer

				writeInteger(this.Churn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",Gender=" + String.valueOf(Gender));
			sb.append(",SeniorCitizen=" + String.valueOf(SeniorCitizen));
			sb.append(",Geography=" + Geography);
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Partner=" + String.valueOf(Partner));
			sb.append(",Dependents=" + String.valueOf(Dependents));
			sb.append(",tenure=" + String.valueOf(tenure));
			sb.append(",PhoneService=" + String.valueOf(PhoneService));
			sb.append(",MultipleLines=" + String.valueOf(MultipleLines));
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + String.valueOf(OnlineSecurity));
			sb.append(",OnlineBackup=" + String.valueOf(OnlineBackup));
			sb.append(",DeviceProtection=" + String.valueOf(DeviceProtection));
			sb.append(",TechSupport=" + String.valueOf(TechSupport));
			sb.append(",StreamingTV=" + String.valueOf(StreamingTV));
			sb.append(",StreamingMovies=" + String.valueOf(StreamingMovies));
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + String.valueOf(PaperlessBilling));
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + String.valueOf(MonthlyCharges));
			sb.append(",TotalCharges=" + String.valueOf(TotalCharges));
			sb.append(",Churn=" + String.valueOf(Churn));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public Integer Gender;

		public Integer getGender() {
			return this.Gender;
		}

		public Integer SeniorCitizen;

		public Integer getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public Integer Partner;

		public Integer getPartner() {
			return this.Partner;
		}

		public Integer Dependents;

		public Integer getDependents() {
			return this.Dependents;
		}

		public Integer tenure;

		public Integer getTenure() {
			return this.tenure;
		}

		public Integer PhoneService;

		public Integer getPhoneService() {
			return this.PhoneService;
		}

		public Integer MultipleLines;

		public Integer getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public Integer OnlineSecurity;

		public Integer getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public Integer OnlineBackup;

		public Integer getOnlineBackup() {
			return this.OnlineBackup;
		}

		public Integer DeviceProtection;

		public Integer getDeviceProtection() {
			return this.DeviceProtection;
		}

		public Integer TechSupport;

		public Integer getTechSupport() {
			return this.TechSupport;
		}

		public Integer StreamingTV;

		public Integer getStreamingTV() {
			return this.StreamingTV;
		}

		public Integer StreamingMovies;

		public Integer getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public Integer PaperlessBilling;

		public Integer getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public Float MonthlyCharges;

		public Float getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public Float TotalCharges;

		public Float getTotalCharges() {
			return this.TotalCharges;
		}

		public Integer Churn;

		public Integer getChurn() {
			return this.Churn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Sno == null) ? 0 : this.Sno.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row13Struct other = (row13Struct) obj;

			if (this.Sno == null) {
				if (other.Sno != null)
					return false;

			} else if (!this.Sno.equals(other.Sno))

				return false;

			return true;
		}

		public void copyDataTo(row13Struct other) {

			other.Sno = this.Sno;
			other.CustomerID = this.CustomerID;
			other.Gender = this.Gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.Geography = this.Geography;
			other.CountryCode = this.CountryCode;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.tenure = this.tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.InternetService = this.InternetService;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;
			other.Contract = this.Contract;
			other.PaperlessBilling = this.PaperlessBilling;
			other.PaymentMethod = this.PaymentMethod;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;

		}

		public void copyKeysDataTo(row13Struct other) {

			other.Sno = this.Sno;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobETL_Telecom.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobETL_Telecom.length == 0) {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobETL_Telecom = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobETL_Telecom, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobETL_Telecom) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.CustomerID = readString(dis);

					this.Gender = readInteger(dis);

					this.SeniorCitizen = readInteger(dis);

					this.Geography = readString(dis);

					this.CountryCode = readString(dis);

					this.Partner = readInteger(dis);

					this.Dependents = readInteger(dis);

					this.tenure = readInteger(dis);

					this.PhoneService = readInteger(dis);

					this.MultipleLines = readInteger(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readInteger(dis);

					this.OnlineBackup = readInteger(dis);

					this.DeviceProtection = readInteger(dis);

					this.TechSupport = readInteger(dis);

					this.StreamingTV = readInteger(dis);

					this.StreamingMovies = readInteger(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readInteger(dis);

					this.PaymentMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MonthlyCharges = null;
					} else {
						this.MonthlyCharges = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.TotalCharges = null;
					} else {
						this.TotalCharges = dis.readFloat();
					}

					this.Churn = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.CustomerID, dos);

				// Integer

				writeInteger(this.Gender, dos);

				// Integer

				writeInteger(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.CountryCode, dos);

				// Integer

				writeInteger(this.Partner, dos);

				// Integer

				writeInteger(this.Dependents, dos);

				// Integer

				writeInteger(this.tenure, dos);

				// Integer

				writeInteger(this.PhoneService, dos);

				// Integer

				writeInteger(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// Integer

				writeInteger(this.OnlineSecurity, dos);

				// Integer

				writeInteger(this.OnlineBackup, dos);

				// Integer

				writeInteger(this.DeviceProtection, dos);

				// Integer

				writeInteger(this.TechSupport, dos);

				// Integer

				writeInteger(this.StreamingTV, dos);

				// Integer

				writeInteger(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// Integer

				writeInteger(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// Float

				if (this.MonthlyCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MonthlyCharges);
				}

				// Float

				if (this.TotalCharges == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalCharges);
				}

				// Integer

				writeInteger(this.Churn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",Gender=" + String.valueOf(Gender));
			sb.append(",SeniorCitizen=" + String.valueOf(SeniorCitizen));
			sb.append(",Geography=" + Geography);
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Partner=" + String.valueOf(Partner));
			sb.append(",Dependents=" + String.valueOf(Dependents));
			sb.append(",tenure=" + String.valueOf(tenure));
			sb.append(",PhoneService=" + String.valueOf(PhoneService));
			sb.append(",MultipleLines=" + String.valueOf(MultipleLines));
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + String.valueOf(OnlineSecurity));
			sb.append(",OnlineBackup=" + String.valueOf(OnlineBackup));
			sb.append(",DeviceProtection=" + String.valueOf(DeviceProtection));
			sb.append(",TechSupport=" + String.valueOf(TechSupport));
			sb.append(",StreamingTV=" + String.valueOf(StreamingTV));
			sb.append(",StreamingMovies=" + String.valueOf(StreamingMovies));
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + String.valueOf(PaperlessBilling));
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + String.valueOf(MonthlyCharges));
			sb.append(",TotalCharges=" + String.valueOf(TotalCharges));
			sb.append(",Churn=" + String.valueOf(Churn));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Sno, other.Sno);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();
				row14Struct row14 = new row14Struct();
				row15Struct row15 = new row15Struct();
				row16Struct row16 = new row16Struct();
				row17Struct row17 = new row17Struct();
				row18Struct row18 = new row18Struct();
				row19Struct row19 = new row19Struct();
				row20Struct row20 = new row20Struct();
				row21Struct row21 = new row21Struct();
				row22Struct row22 = new row22Struct();
				Telecom_GenderStruct Telecom_Gender = new Telecom_GenderStruct();
				row23Struct row23 = new row23Struct();
				row24Struct row24 = new row24Struct();
				row25Struct row25 = new row25Struct();
				row26Struct row26 = new row26Struct();
				row27Struct row27 = new row27Struct();

				/**
				 * [tSortRow_2_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_2_SortOut", false);
				start_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tSortRow_2_SortOut = 0;

				class Comparablerow15Struct extends row15Struct implements Comparable<Comparablerow15Struct> {

					public int compareTo(Comparablerow15Struct other) {

						if (this.CustomerID == null && other.CustomerID != null) {
							return -1;

						} else if (this.CustomerID != null && other.CustomerID == null) {
							return 1;

						} else if (this.CustomerID != null && other.CustomerID != null) {
							if (!this.CustomerID.equals(other.CustomerID)) {
								return this.CustomerID.compareTo(other.CustomerID);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow15Struct> list_tSortRow_2_SortOut = new java.util.ArrayList<Comparablerow15Struct>();

				/**
				 * [tSortRow_2_SortOut begin ] stop
				 */

				/**
				 * [tFilterColumns_1 begin ] start
				 */

				ok_Hash.put("tFilterColumns_1", false);
				start_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				currentComponent = "tFilterColumns_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tFilterColumns_1 = 0;

				int nb_line_tFilterColumns_1 = 0;

				/**
				 * [tFilterColumns_1 begin ] stop
				 */

				/**
				 * [tSortRow_3_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_3_SortOut", false);
				start_Hash.put("tSortRow_3_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row19");
				}

				int tos_count_tSortRow_3_SortOut = 0;

				class Comparablerow19Struct extends row19Struct implements Comparable<Comparablerow19Struct> {

					public int compareTo(Comparablerow19Struct other) {

						if (this.CustomerID == null && other.CustomerID != null) {
							return -1;

						} else if (this.CustomerID != null && other.CustomerID == null) {
							return 1;

						} else if (this.CustomerID != null && other.CustomerID != null) {
							if (!this.CustomerID.equals(other.CustomerID)) {
								return this.CustomerID.compareTo(other.CustomerID);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow19Struct> list_tSortRow_3_SortOut = new java.util.ArrayList<Comparablerow19Struct>();

				/**
				 * [tSortRow_3_SortOut begin ] stop
				 */

				/**
				 * [tFilterColumns_2 begin ] start
				 */

				ok_Hash.put("tFilterColumns_2", false);
				start_Hash.put("tFilterColumns_2", System.currentTimeMillis());

				currentComponent = "tFilterColumns_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row18");
				}

				int tos_count_tFilterColumns_2 = 0;

				int nb_line_tFilterColumns_2 = 0;

				/**
				 * [tFilterColumns_2 begin ] stop
				 */

				/**
				 * [tSortRow_4_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_4_SortOut", false);
				start_Hash.put("tSortRow_4_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_4";

				currentComponent = "tSortRow_4_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Telecom_Gender");
				}

				int tos_count_tSortRow_4_SortOut = 0;

				class ComparableTelecom_GenderStruct extends Telecom_GenderStruct
						implements Comparable<ComparableTelecom_GenderStruct> {

					public int compareTo(ComparableTelecom_GenderStruct other) {

						if (this.Gender_type == null && other.Gender_type != null) {
							return -1;

						} else if (this.Gender_type != null && other.Gender_type == null) {
							return 1;

						} else if (this.Gender_type != null && other.Gender_type != null) {
							if (!this.Gender_type.equals(other.Gender_type)) {
								return this.Gender_type.compareTo(other.Gender_type);
							}
						}
						return 0;
					}
				}

				java.util.List<ComparableTelecom_GenderStruct> list_tSortRow_4_SortOut = new java.util.ArrayList<ComparableTelecom_GenderStruct>();

				/**
				 * [tSortRow_4_SortOut begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row22");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
					String Gender_type;
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				Telecom_GenderStruct Telecom_Gender_tmp = new Telecom_GenderStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tDBOutput_6 begin ] start
				 */

				ok_Hash.put("tDBOutput_6", false);
				start_Hash.put("tDBOutput_6", System.currentTimeMillis());

				currentComponent = "tDBOutput_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row27");
				}

				int tos_count_tDBOutput_6 = 0;

				int nb_line_tDBOutput_6 = 0;
				int nb_line_update_tDBOutput_6 = 0;
				int nb_line_inserted_tDBOutput_6 = 0;
				int nb_line_deleted_tDBOutput_6 = 0;
				int nb_line_rejected_tDBOutput_6 = 0;

				int deletedCount_tDBOutput_6 = 0;
				int updatedCount_tDBOutput_6 = 0;
				int insertedCount_tDBOutput_6 = 0;

				int rejectedCount_tDBOutput_6 = 0;

				String tableName_tDBOutput_6 = "Telecom_customer_country";
				boolean whetherReject_tDBOutput_6 = false;

				java.util.Calendar calendar_tDBOutput_6 = java.util.Calendar.getInstance();
				calendar_tDBOutput_6.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_6 = calendar_tDBOutput_6.getTime().getTime();
				calendar_tDBOutput_6.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_6 = calendar_tDBOutput_6.getTime().getTime();
				long date_tDBOutput_6;

				java.sql.Connection conn_tDBOutput_6 = null;
				String dbProperties_tDBOutput_6 = "noDatetimeStringSync=true";
				String url_tDBOutput_6 = null;
				if (dbProperties_tDBOutput_6 == null || dbProperties_tDBOutput_6.trim().length() == 0) {
					url_tDBOutput_6 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "telecom_star_prod" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_6 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_6.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_6 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_6 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "telecom_star_prod" + "?"
							+ properties_tDBOutput_6;
				}
				String driverClass_tDBOutput_6 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_6 = "root";

				final String decryptedPassword_tDBOutput_6 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:N9PFqUwo6xtGUtbyIYqb41q7yjBswJ3cGbNgLQ0dVLw1rfRkEA==");

				String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;
				java.lang.Class.forName(driverClass_tDBOutput_6);

				conn_tDBOutput_6 = java.sql.DriverManager.getConnection(url_tDBOutput_6, dbUser_tDBOutput_6,
						dbPwd_tDBOutput_6);

				resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);
				conn_tDBOutput_6.setAutoCommit(false);
				int commitEvery_tDBOutput_6 = 10000;
				int commitCounter_tDBOutput_6 = 0;

				int count_tDBOutput_6 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_6 = conn_tDBOutput_6.getMetaData();
				boolean whetherExist_tDBOutput_6 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_6 = dbMetaData_tDBOutput_6.getTables("telecom_star_prod",
						null, null, new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_6.next()) {
						String table_tDBOutput_6 = rsTable_tDBOutput_6.getString("TABLE_NAME");
						if (table_tDBOutput_6.equalsIgnoreCase("Telecom_customer_country")) {
							whetherExist_tDBOutput_6 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_6) {
					try (java.sql.Statement stmtDrop_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
						stmtDrop_tDBOutput_6.execute("DROP TABLE `" + tableName_tDBOutput_6 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
					stmtCreate_tDBOutput_6.execute("CREATE TABLE `" + tableName_tDBOutput_6
							+ "`(`Geography` VARCHAR(50)  ,`CountryCode` VARCHAR(10)  ,primary key(`CountryCode`))");
				}

				String insert_tDBOutput_6 = "INSERT INTO `" + "Telecom_customer_country"
						+ "` (`Geography`,`CountryCode`) VALUES (?,?)";
				int batchSize_tDBOutput_6 = 100;
				int batchSizeCounter_tDBOutput_6 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
				resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);

				/**
				 * [tDBOutput_6 begin ] stop
				 */

				/**
				 * [tUniqRow_5 begin ] start
				 */

				ok_Hash.put("tUniqRow_5", false);
				start_Hash.put("tUniqRow_5", System.currentTimeMillis());

				currentComponent = "tUniqRow_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row26");
				}

				int tos_count_tUniqRow_5 = 0;

				class KeyStruct_tUniqRow_5 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String CountryCode;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.CountryCode == null) ? 0 : this.CountryCode.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_5 other = (KeyStruct_tUniqRow_5) obj;

						if (this.CountryCode == null) {
							if (other.CountryCode != null)
								return false;

						} else if (!this.CountryCode.equals(other.CountryCode))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_5 = 0;
				int nb_duplicates_tUniqRow_5 = 0;
				KeyStruct_tUniqRow_5 finder_tUniqRow_5 = new KeyStruct_tUniqRow_5();
				java.util.Set<KeyStruct_tUniqRow_5> keystUniqRow_5 = new java.util.HashSet<KeyStruct_tUniqRow_5>();

				/**
				 * [tUniqRow_5 begin ] stop
				 */

				/**
				 * [tFilterColumns_3 begin ] start
				 */

				ok_Hash.put("tFilterColumns_3", false);
				start_Hash.put("tFilterColumns_3", System.currentTimeMillis());

				currentComponent = "tFilterColumns_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row25");
				}

				int tos_count_tFilterColumns_3 = 0;

				int nb_line_tFilterColumns_3 = 0;

				/**
				 * [tFilterColumns_3 begin ] stop
				 */

				/**
				 * [tReplicate_1 begin ] start
				 */

				ok_Hash.put("tReplicate_1", false);
				start_Hash.put("tReplicate_1", System.currentTimeMillis());

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tReplicate_1 = 0;

				/**
				 * [tReplicate_1 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
				calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "root";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:zmR6YiXd2vxTMTdh+DQouhOG18uvG6QiLTpdYzmZ9RTNOAUyog==");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String url_tDBInput_3 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "telecom_staging" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "select * from telecom_preprocessed_customer";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row13.Sno = null;
						} else {

							row13.Sno = rs_tDBInput_3.getInt(1);
							if (rs_tDBInput_3.wasNull()) {
								row13.Sno = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row13.CustomerID = null;
						} else {

							row13.CustomerID = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row13.Gender = null;
						} else {

							row13.Gender = rs_tDBInput_3.getInt(3);
							if (rs_tDBInput_3.wasNull()) {
								row13.Gender = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row13.SeniorCitizen = null;
						} else {

							row13.SeniorCitizen = rs_tDBInput_3.getInt(4);
							if (rs_tDBInput_3.wasNull()) {
								row13.SeniorCitizen = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row13.Geography = null;
						} else {

							row13.Geography = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row13.CountryCode = null;
						} else {

							row13.CountryCode = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							row13.Partner = null;
						} else {

							row13.Partner = rs_tDBInput_3.getInt(7);
							if (rs_tDBInput_3.wasNull()) {
								row13.Partner = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 8) {
							row13.Dependents = null;
						} else {

							row13.Dependents = rs_tDBInput_3.getInt(8);
							if (rs_tDBInput_3.wasNull()) {
								row13.Dependents = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 9) {
							row13.tenure = null;
						} else {

							row13.tenure = rs_tDBInput_3.getInt(9);
							if (rs_tDBInput_3.wasNull()) {
								row13.tenure = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 10) {
							row13.PhoneService = null;
						} else {

							row13.PhoneService = rs_tDBInput_3.getInt(10);
							if (rs_tDBInput_3.wasNull()) {
								row13.PhoneService = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 11) {
							row13.MultipleLines = null;
						} else {

							row13.MultipleLines = rs_tDBInput_3.getInt(11);
							if (rs_tDBInput_3.wasNull()) {
								row13.MultipleLines = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 12) {
							row13.InternetService = null;
						} else {

							row13.InternetService = routines.system.JDBCUtil.getString(rs_tDBInput_3, 12, false);
						}
						if (colQtyInRs_tDBInput_3 < 13) {
							row13.OnlineSecurity = null;
						} else {

							row13.OnlineSecurity = rs_tDBInput_3.getInt(13);
							if (rs_tDBInput_3.wasNull()) {
								row13.OnlineSecurity = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 14) {
							row13.OnlineBackup = null;
						} else {

							row13.OnlineBackup = rs_tDBInput_3.getInt(14);
							if (rs_tDBInput_3.wasNull()) {
								row13.OnlineBackup = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 15) {
							row13.DeviceProtection = null;
						} else {

							row13.DeviceProtection = rs_tDBInput_3.getInt(15);
							if (rs_tDBInput_3.wasNull()) {
								row13.DeviceProtection = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 16) {
							row13.TechSupport = null;
						} else {

							row13.TechSupport = rs_tDBInput_3.getInt(16);
							if (rs_tDBInput_3.wasNull()) {
								row13.TechSupport = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 17) {
							row13.StreamingTV = null;
						} else {

							row13.StreamingTV = rs_tDBInput_3.getInt(17);
							if (rs_tDBInput_3.wasNull()) {
								row13.StreamingTV = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 18) {
							row13.StreamingMovies = null;
						} else {

							row13.StreamingMovies = rs_tDBInput_3.getInt(18);
							if (rs_tDBInput_3.wasNull()) {
								row13.StreamingMovies = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 19) {
							row13.Contract = null;
						} else {

							row13.Contract = routines.system.JDBCUtil.getString(rs_tDBInput_3, 19, false);
						}
						if (colQtyInRs_tDBInput_3 < 20) {
							row13.PaperlessBilling = null;
						} else {

							row13.PaperlessBilling = rs_tDBInput_3.getInt(20);
							if (rs_tDBInput_3.wasNull()) {
								row13.PaperlessBilling = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 21) {
							row13.PaymentMethod = null;
						} else {

							row13.PaymentMethod = routines.system.JDBCUtil.getString(rs_tDBInput_3, 21, false);
						}
						if (colQtyInRs_tDBInput_3 < 22) {
							row13.MonthlyCharges = null;
						} else {

							row13.MonthlyCharges = rs_tDBInput_3.getFloat(22);
							if (rs_tDBInput_3.wasNull()) {
								row13.MonthlyCharges = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 23) {
							row13.TotalCharges = null;
						} else {

							row13.TotalCharges = rs_tDBInput_3.getFloat(23);
							if (rs_tDBInput_3.wasNull()) {
								row13.TotalCharges = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 24) {
							row13.Churn = null;
						} else {

							row13.Churn = rs_tDBInput_3.getInt(24);
							if (rs_tDBInput_3.wasNull()) {
								row13.Churn = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tReplicate_1 main ] start
						 */

						currentComponent = "tReplicate_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row13");
						}

						row14 = new row14Struct();

						row14.Sno = row13.Sno;
						row14.CustomerID = row13.CustomerID;
						row14.Gender = row13.Gender;
						row14.SeniorCitizen = row13.SeniorCitizen;
						row14.Geography = row13.Geography;
						row14.CountryCode = row13.CountryCode;
						row14.Partner = row13.Partner;
						row14.Dependents = row13.Dependents;
						row14.tenure = row13.tenure;
						row14.PhoneService = row13.PhoneService;
						row14.MultipleLines = row13.MultipleLines;
						row14.InternetService = row13.InternetService;
						row14.OnlineSecurity = row13.OnlineSecurity;
						row14.OnlineBackup = row13.OnlineBackup;
						row14.DeviceProtection = row13.DeviceProtection;
						row14.TechSupport = row13.TechSupport;
						row14.StreamingTV = row13.StreamingTV;
						row14.StreamingMovies = row13.StreamingMovies;
						row14.Contract = row13.Contract;
						row14.PaperlessBilling = row13.PaperlessBilling;
						row14.PaymentMethod = row13.PaymentMethod;
						row14.MonthlyCharges = row13.MonthlyCharges;
						row14.TotalCharges = row13.TotalCharges;
						row14.Churn = row13.Churn;
						row18 = new row18Struct();

						row18.Sno = row13.Sno;
						row18.CustomerID = row13.CustomerID;
						row18.Gender = row13.Gender;
						row18.SeniorCitizen = row13.SeniorCitizen;
						row18.Geography = row13.Geography;
						row18.CountryCode = row13.CountryCode;
						row18.Partner = row13.Partner;
						row18.Dependents = row13.Dependents;
						row18.tenure = row13.tenure;
						row18.PhoneService = row13.PhoneService;
						row18.MultipleLines = row13.MultipleLines;
						row18.InternetService = row13.InternetService;
						row18.OnlineSecurity = row13.OnlineSecurity;
						row18.OnlineBackup = row13.OnlineBackup;
						row18.DeviceProtection = row13.DeviceProtection;
						row18.TechSupport = row13.TechSupport;
						row18.StreamingTV = row13.StreamingTV;
						row18.StreamingMovies = row13.StreamingMovies;
						row18.Contract = row13.Contract;
						row18.PaperlessBilling = row13.PaperlessBilling;
						row18.PaymentMethod = row13.PaymentMethod;
						row18.MonthlyCharges = row13.MonthlyCharges;
						row18.TotalCharges = row13.TotalCharges;
						row18.Churn = row13.Churn;
						row22 = new row22Struct();

						row22.Sno = row13.Sno;
						row22.CustomerID = row13.CustomerID;
						row22.Gender = row13.Gender;
						row22.SeniorCitizen = row13.SeniorCitizen;
						row22.Geography = row13.Geography;
						row22.CountryCode = row13.CountryCode;
						row22.Partner = row13.Partner;
						row22.Dependents = row13.Dependents;
						row22.tenure = row13.tenure;
						row22.PhoneService = row13.PhoneService;
						row22.MultipleLines = row13.MultipleLines;
						row22.InternetService = row13.InternetService;
						row22.OnlineSecurity = row13.OnlineSecurity;
						row22.OnlineBackup = row13.OnlineBackup;
						row22.DeviceProtection = row13.DeviceProtection;
						row22.TechSupport = row13.TechSupport;
						row22.StreamingTV = row13.StreamingTV;
						row22.StreamingMovies = row13.StreamingMovies;
						row22.Contract = row13.Contract;
						row22.PaperlessBilling = row13.PaperlessBilling;
						row22.PaymentMethod = row13.PaymentMethod;
						row22.MonthlyCharges = row13.MonthlyCharges;
						row22.TotalCharges = row13.TotalCharges;
						row22.Churn = row13.Churn;
						row25 = new row25Struct();

						row25.Sno = row13.Sno;
						row25.CustomerID = row13.CustomerID;
						row25.Gender = row13.Gender;
						row25.SeniorCitizen = row13.SeniorCitizen;
						row25.Geography = row13.Geography;
						row25.CountryCode = row13.CountryCode;
						row25.Partner = row13.Partner;
						row25.Dependents = row13.Dependents;
						row25.tenure = row13.tenure;
						row25.PhoneService = row13.PhoneService;
						row25.MultipleLines = row13.MultipleLines;
						row25.InternetService = row13.InternetService;
						row25.OnlineSecurity = row13.OnlineSecurity;
						row25.OnlineBackup = row13.OnlineBackup;
						row25.DeviceProtection = row13.DeviceProtection;
						row25.TechSupport = row13.TechSupport;
						row25.StreamingTV = row13.StreamingTV;
						row25.StreamingMovies = row13.StreamingMovies;
						row25.Contract = row13.Contract;
						row25.PaperlessBilling = row13.PaperlessBilling;
						row25.PaymentMethod = row13.PaymentMethod;
						row25.MonthlyCharges = row13.MonthlyCharges;
						row25.TotalCharges = row13.TotalCharges;
						row25.Churn = row13.Churn;

						tos_count_tReplicate_1++;

						/**
						 * [tReplicate_1 main ] stop
						 */

						/**
						 * [tReplicate_1 process_data_begin ] start
						 */

						currentComponent = "tReplicate_1";

						/**
						 * [tReplicate_1 process_data_begin ] stop
						 */

						/**
						 * [tFilterColumns_1 main ] start
						 */

						currentComponent = "tFilterColumns_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row14");
						}

						row15.CustomerID = row14.CustomerID;

						row15.Gender = row14.Gender;

						row15.SeniorCitizen = row14.SeniorCitizen;

						row15.CountryCode = row14.CountryCode;

						row15.Partner = row14.Partner;

						row15.Dependents = row14.Dependents;

						row15.tenure = row14.tenure;

						row15.PhoneService = row14.PhoneService;

						row15.MultipleLines = row14.MultipleLines;

						row15.PaperlessBilling = row14.PaperlessBilling;

						row15.MonthlyCharges = row14.MonthlyCharges;

						row15.TotalCharges = row14.TotalCharges;

						row15.Churn = row14.Churn;

						row15.OnlineSecurity = row14.OnlineSecurity;

						row15.OnlineBackup = row14.OnlineBackup;

						row15.DeviceProtection = row14.DeviceProtection;

						row15.TechSupport = row14.TechSupport;

						row15.StreamingTV = row14.StreamingTV;

						row15.StreamingMovies = row14.StreamingMovies;

						nb_line_tFilterColumns_1++;

						tos_count_tFilterColumns_1++;

						/**
						 * [tFilterColumns_1 main ] stop
						 */

						/**
						 * [tFilterColumns_1 process_data_begin ] start
						 */

						currentComponent = "tFilterColumns_1";

						/**
						 * [tFilterColumns_1 process_data_begin ] stop
						 */

						/**
						 * [tSortRow_2_SortOut main ] start
						 */

						currentVirtualComponent = "tSortRow_2";

						currentComponent = "tSortRow_2_SortOut";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row15");
						}

						Comparablerow15Struct arrayRowtSortRow_2_SortOut = new Comparablerow15Struct();

						arrayRowtSortRow_2_SortOut.CustomerID = row15.CustomerID;
						arrayRowtSortRow_2_SortOut.Gender = row15.Gender;
						arrayRowtSortRow_2_SortOut.SeniorCitizen = row15.SeniorCitizen;
						arrayRowtSortRow_2_SortOut.CountryCode = row15.CountryCode;
						arrayRowtSortRow_2_SortOut.Partner = row15.Partner;
						arrayRowtSortRow_2_SortOut.Dependents = row15.Dependents;
						arrayRowtSortRow_2_SortOut.tenure = row15.tenure;
						arrayRowtSortRow_2_SortOut.PhoneService = row15.PhoneService;
						arrayRowtSortRow_2_SortOut.MultipleLines = row15.MultipleLines;
						arrayRowtSortRow_2_SortOut.PaperlessBilling = row15.PaperlessBilling;
						arrayRowtSortRow_2_SortOut.MonthlyCharges = row15.MonthlyCharges;
						arrayRowtSortRow_2_SortOut.TotalCharges = row15.TotalCharges;
						arrayRowtSortRow_2_SortOut.Churn = row15.Churn;
						arrayRowtSortRow_2_SortOut.OnlineSecurity = row15.OnlineSecurity;
						arrayRowtSortRow_2_SortOut.OnlineBackup = row15.OnlineBackup;
						arrayRowtSortRow_2_SortOut.DeviceProtection = row15.DeviceProtection;
						arrayRowtSortRow_2_SortOut.TechSupport = row15.TechSupport;
						arrayRowtSortRow_2_SortOut.StreamingTV = row15.StreamingTV;
						arrayRowtSortRow_2_SortOut.StreamingMovies = row15.StreamingMovies;
						list_tSortRow_2_SortOut.add(arrayRowtSortRow_2_SortOut);

						tos_count_tSortRow_2_SortOut++;

						/**
						 * [tSortRow_2_SortOut main ] stop
						 */

						/**
						 * [tSortRow_2_SortOut process_data_begin ] start
						 */

						currentVirtualComponent = "tSortRow_2";

						currentComponent = "tSortRow_2_SortOut";

						/**
						 * [tSortRow_2_SortOut process_data_begin ] stop
						 */

						/**
						 * [tSortRow_2_SortOut process_data_end ] start
						 */

						currentVirtualComponent = "tSortRow_2";

						currentComponent = "tSortRow_2_SortOut";

						/**
						 * [tSortRow_2_SortOut process_data_end ] stop
						 */

						/**
						 * [tFilterColumns_1 process_data_end ] start
						 */

						currentComponent = "tFilterColumns_1";

						/**
						 * [tFilterColumns_1 process_data_end ] stop
						 */

						/**
						 * [tFilterColumns_2 main ] start
						 */

						currentComponent = "tFilterColumns_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row18");
						}

						row19.CustomerID = row18.CustomerID;

						row19.InternetService = row18.InternetService;

						row19.Contract = row18.Contract;

						row19.PaymentMethod = row18.PaymentMethod;

						nb_line_tFilterColumns_2++;

						tos_count_tFilterColumns_2++;

						/**
						 * [tFilterColumns_2 main ] stop
						 */

						/**
						 * [tFilterColumns_2 process_data_begin ] start
						 */

						currentComponent = "tFilterColumns_2";

						/**
						 * [tFilterColumns_2 process_data_begin ] stop
						 */

						/**
						 * [tSortRow_3_SortOut main ] start
						 */

						currentVirtualComponent = "tSortRow_3";

						currentComponent = "tSortRow_3_SortOut";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row19");
						}

						Comparablerow19Struct arrayRowtSortRow_3_SortOut = new Comparablerow19Struct();

						arrayRowtSortRow_3_SortOut.CustomerID = row19.CustomerID;
						arrayRowtSortRow_3_SortOut.InternetService = row19.InternetService;
						arrayRowtSortRow_3_SortOut.Contract = row19.Contract;
						arrayRowtSortRow_3_SortOut.PaymentMethod = row19.PaymentMethod;
						list_tSortRow_3_SortOut.add(arrayRowtSortRow_3_SortOut);

						tos_count_tSortRow_3_SortOut++;

						/**
						 * [tSortRow_3_SortOut main ] stop
						 */

						/**
						 * [tSortRow_3_SortOut process_data_begin ] start
						 */

						currentVirtualComponent = "tSortRow_3";

						currentComponent = "tSortRow_3_SortOut";

						/**
						 * [tSortRow_3_SortOut process_data_begin ] stop
						 */

						/**
						 * [tSortRow_3_SortOut process_data_end ] start
						 */

						currentVirtualComponent = "tSortRow_3";

						currentComponent = "tSortRow_3_SortOut";

						/**
						 * [tSortRow_3_SortOut process_data_end ] stop
						 */

						/**
						 * [tFilterColumns_2 process_data_end ] start
						 */

						currentComponent = "tFilterColumns_2";

						/**
						 * [tFilterColumns_2 process_data_end ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row22");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;
							Var.Gender_type = row22.Gender == 1 ? "M" : "F";// ###############################
							// ###############################
							// # Output tables

							Telecom_Gender = null;

// # Output table : 'Telecom_Gender'
							Telecom_Gender_tmp.Gender = row22.Gender;
							Telecom_Gender_tmp.Gender_type = Var.Gender_type;
							Telecom_Gender = Telecom_Gender_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */

						/**
						 * [tMap_2 process_data_begin ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_begin ] stop
						 */
// Start of branch "Telecom_Gender"
						if (Telecom_Gender != null) {

							/**
							 * [tSortRow_4_SortOut main ] start
							 */

							currentVirtualComponent = "tSortRow_4";

							currentComponent = "tSortRow_4_SortOut";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "Telecom_Gender");
							}

							ComparableTelecom_GenderStruct arrayRowtSortRow_4_SortOut = new ComparableTelecom_GenderStruct();

							arrayRowtSortRow_4_SortOut.Gender = Telecom_Gender.Gender;
							arrayRowtSortRow_4_SortOut.Gender_type = Telecom_Gender.Gender_type;
							list_tSortRow_4_SortOut.add(arrayRowtSortRow_4_SortOut);

							tos_count_tSortRow_4_SortOut++;

							/**
							 * [tSortRow_4_SortOut main ] stop
							 */

							/**
							 * [tSortRow_4_SortOut process_data_begin ] start
							 */

							currentVirtualComponent = "tSortRow_4";

							currentComponent = "tSortRow_4_SortOut";

							/**
							 * [tSortRow_4_SortOut process_data_begin ] stop
							 */

							/**
							 * [tSortRow_4_SortOut process_data_end ] start
							 */

							currentVirtualComponent = "tSortRow_4";

							currentComponent = "tSortRow_4_SortOut";

							/**
							 * [tSortRow_4_SortOut process_data_end ] stop
							 */

						} // End of branch "Telecom_Gender"

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

						/**
						 * [tFilterColumns_3 main ] start
						 */

						currentComponent = "tFilterColumns_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row25");
						}

						row26.Geography = row25.Geography;

						row26.CountryCode = row25.CountryCode;

						nb_line_tFilterColumns_3++;

						tos_count_tFilterColumns_3++;

						/**
						 * [tFilterColumns_3 main ] stop
						 */

						/**
						 * [tFilterColumns_3 process_data_begin ] start
						 */

						currentComponent = "tFilterColumns_3";

						/**
						 * [tFilterColumns_3 process_data_begin ] stop
						 */

						/**
						 * [tUniqRow_5 main ] start
						 */

						currentComponent = "tUniqRow_5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row26");
						}

						row27 = null;
						if (row26.CountryCode == null) {
							finder_tUniqRow_5.CountryCode = null;
						} else {
							finder_tUniqRow_5.CountryCode = row26.CountryCode.toLowerCase();
						}
						finder_tUniqRow_5.hashCodeDirty = true;
						if (!keystUniqRow_5.contains(finder_tUniqRow_5)) {
							KeyStruct_tUniqRow_5 new_tUniqRow_5 = new KeyStruct_tUniqRow_5();

							if (row26.CountryCode == null) {
								new_tUniqRow_5.CountryCode = null;
							} else {
								new_tUniqRow_5.CountryCode = row26.CountryCode.toLowerCase();
							}

							keystUniqRow_5.add(new_tUniqRow_5);
							if (row27 == null) {

								row27 = new row27Struct();
							}
							row27.Geography = row26.Geography;
							row27.CountryCode = row26.CountryCode;
							nb_uniques_tUniqRow_5++;
						} else {
							nb_duplicates_tUniqRow_5++;
						}

						tos_count_tUniqRow_5++;

						/**
						 * [tUniqRow_5 main ] stop
						 */

						/**
						 * [tUniqRow_5 process_data_begin ] start
						 */

						currentComponent = "tUniqRow_5";

						/**
						 * [tUniqRow_5 process_data_begin ] stop
						 */
// Start of branch "row27"
						if (row27 != null) {

							/**
							 * [tDBOutput_6 main ] start
							 */

							currentComponent = "tDBOutput_6";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row27");
							}

							whetherReject_tDBOutput_6 = false;
							if (row27.Geography == null) {
								pstmt_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_6.setString(1, row27.Geography);
							}

							if (row27.CountryCode == null) {
								pstmt_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_6.setString(2, row27.CountryCode);
							}

							pstmt_tDBOutput_6.addBatch();
							nb_line_tDBOutput_6++;

							batchSizeCounter_tDBOutput_6++;
							if (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6) {
								try {
									int countSum_tDBOutput_6 = 0;
									for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6.executeBatch()) {
										countSum_tDBOutput_6 += (countEach_tDBOutput_6 == java.sql.Statement.EXECUTE_FAILED
												? 0
												: 1);
									}
									insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_6 = 0;
									for (int countEach_tDBOutput_6 : e.getUpdateCounts()) {
										countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
									}
									insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
									System.err.println(e.getMessage());
								}

								batchSizeCounter_tDBOutput_6 = 0;
							}
							commitCounter_tDBOutput_6++;

							if (commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {

								try {
									int countSum_tDBOutput_6 = 0;
									for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6.executeBatch()) {
										countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : 1);
									}
									insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_6 = 0;
									for (int countEach_tDBOutput_6 : e.getUpdateCounts()) {
										countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
									}
									insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
									System.err.println(e.getMessage());

								}
								conn_tDBOutput_6.commit();
								commitCounter_tDBOutput_6 = 0;

							}

							tos_count_tDBOutput_6++;

							/**
							 * [tDBOutput_6 main ] stop
							 */

							/**
							 * [tDBOutput_6 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_6";

							/**
							 * [tDBOutput_6 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_6 process_data_end ] start
							 */

							currentComponent = "tDBOutput_6";

							/**
							 * [tDBOutput_6 process_data_end ] stop
							 */

						} // End of branch "row27"

						/**
						 * [tUniqRow_5 process_data_end ] start
						 */

						currentComponent = "tUniqRow_5";

						/**
						 * [tUniqRow_5 process_data_end ] stop
						 */

						/**
						 * [tFilterColumns_3 process_data_end ] start
						 */

						currentComponent = "tFilterColumns_3";

						/**
						 * [tFilterColumns_3 process_data_end ] stop
						 */

						/**
						 * [tReplicate_1 process_data_end ] start
						 */

						currentComponent = "tReplicate_1";

						/**
						 * [tReplicate_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tReplicate_1 end ] start
				 */

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tReplicate_1", true);
				end_Hash.put("tReplicate_1", System.currentTimeMillis());

				/**
				 * [tReplicate_1 end ] stop
				 */

				/**
				 * [tFilterColumns_1 end ] start
				 */

				currentComponent = "tFilterColumns_1";

				globalMap.put("tFilterColumns_1_NB_LINE", nb_line_tFilterColumns_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tFilterColumns_1", true);
				end_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				/**
				 * [tFilterColumns_1 end ] stop
				 */

				/**
				 * [tSortRow_2_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortOut";

				row15Struct[] array_tSortRow_2_SortOut = list_tSortRow_2_SortOut.toArray(new Comparablerow15Struct[0]);

				java.util.Arrays.sort(array_tSortRow_2_SortOut);

				globalMap.put("tSortRow_2", array_tSortRow_2_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tSortRow_2_SortOut", true);
				end_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_2_SortOut end ] stop
				 */

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row17");
				}

				int tos_count_tDBOutput_3 = 0;

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;

				int rejectedCount_tDBOutput_3 = 0;

				String tableName_tDBOutput_3 = "Telecom_customer_churn_primary";
				boolean whetherReject_tDBOutput_3 = false;

				java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar.getInstance();
				calendar_tDBOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_3 = calendar_tDBOutput_3.getTime().getTime();
				calendar_tDBOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_3 = calendar_tDBOutput_3.getTime().getTime();
				long date_tDBOutput_3;

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbProperties_tDBOutput_3 = "noDatetimeStringSync=true";
				String url_tDBOutput_3 = null;
				if (dbProperties_tDBOutput_3 == null || dbProperties_tDBOutput_3.trim().length() == 0) {
					url_tDBOutput_3 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "telecom_star_prod" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_3 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_3.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_3 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_3 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "telecom_star_prod" + "?"
							+ properties_tDBOutput_3;
				}
				String driverClass_tDBOutput_3 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_3 = "root";

				final String decryptedPassword_tDBOutput_3 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:2yJmft/eG6bDjE0+wHLfchueqbjm6FbyBDEAprWZZjyHJoQtSw==");

				String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;
				java.lang.Class.forName(driverClass_tDBOutput_3);

				conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3, dbUser_tDBOutput_3,
						dbPwd_tDBOutput_3);

				resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
				conn_tDBOutput_3.setAutoCommit(false);
				int commitEvery_tDBOutput_3 = 10000;
				int commitCounter_tDBOutput_3 = 0;

				int count_tDBOutput_3 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_3 = conn_tDBOutput_3.getMetaData();
				boolean whetherExist_tDBOutput_3 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_3 = dbMetaData_tDBOutput_3.getTables("telecom_star_prod",
						null, null, new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_3.next()) {
						String table_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_NAME");
						if (table_tDBOutput_3.equalsIgnoreCase("Telecom_customer_churn_primary")) {
							whetherExist_tDBOutput_3 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_3) {
					try (java.sql.Statement stmtDrop_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
						stmtDrop_tDBOutput_3.execute("DROP TABLE `" + tableName_tDBOutput_3 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
					stmtCreate_tDBOutput_3.execute("CREATE TABLE `" + tableName_tDBOutput_3
							+ "`(`CustomerID` VARCHAR(255)  ,`Gender` INT(0)  ,`SeniorCitizen` INT(0)  ,`CountryCode` VARCHAR(10)  ,`Partner` INT(0)  ,`Dependents` INT(0)  ,`tenure` INT(25)  ,`PhoneService` INT(0)  ,`MultipleLines` INT(0)  ,`PaperlessBilling` INT(0)  ,`MonthlyCharges` FLOAT(20,2)  ,`TotalCharges` FLOAT(20,2)  ,`Churn` INT(0)  ,`OnlineSecurity` INT(0)  ,`OnlineBackup` INT(0)  ,`DeviceProtection` INT(0)  ,`TechSupport` INT(0)  ,`StreamingTV` INT(0)  ,`StreamingMovies` INT(0)  ,primary key(`CustomerID`))");
				}

				String insert_tDBOutput_3 = "INSERT INTO `" + "Telecom_customer_churn_primary"
						+ "` (`CustomerID`,`Gender`,`SeniorCitizen`,`CountryCode`,`Partner`,`Dependents`,`tenure`,`PhoneService`,`MultipleLines`,`PaperlessBilling`,`MonthlyCharges`,`TotalCharges`,`Churn`,`OnlineSecurity`,`OnlineBackup`,`DeviceProtection`,`TechSupport`,`StreamingTV`,`StreamingMovies`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_3 = 100;
				int batchSizeCounter_tDBOutput_3 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tUniqRow_2 begin ] start
				 */

				ok_Hash.put("tUniqRow_2", false);
				start_Hash.put("tUniqRow_2", System.currentTimeMillis());

				currentComponent = "tUniqRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row16");
				}

				int tos_count_tUniqRow_2 = 0;

				class KeyStruct_tUniqRow_2 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String CustomerID;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;

						if (this.CustomerID == null) {
							if (other.CustomerID != null)
								return false;

						} else if (!this.CustomerID.equals(other.CustomerID))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_2 = 0;
				int nb_duplicates_tUniqRow_2 = 0;
				KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
				java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>();

				/**
				 * [tUniqRow_2 begin ] stop
				 */

				/**
				 * [tSortRow_2_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_2_SortIn", false);
				start_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortIn";

				int tos_count_tSortRow_2_SortIn = 0;

				row15Struct[] array_tSortRow_2_SortIn = (row15Struct[]) globalMap.remove("tSortRow_2");

				int nb_line_tSortRow_2_SortIn = 0;

				row15Struct current_tSortRow_2_SortIn = null;

				for (int i_tSortRow_2_SortIn = 0; i_tSortRow_2_SortIn < array_tSortRow_2_SortIn.length; i_tSortRow_2_SortIn++) {
					current_tSortRow_2_SortIn = array_tSortRow_2_SortIn[i_tSortRow_2_SortIn];
					row16.CustomerID = current_tSortRow_2_SortIn.CustomerID;
					row16.Gender = current_tSortRow_2_SortIn.Gender;
					row16.SeniorCitizen = current_tSortRow_2_SortIn.SeniorCitizen;
					row16.CountryCode = current_tSortRow_2_SortIn.CountryCode;
					row16.Partner = current_tSortRow_2_SortIn.Partner;
					row16.Dependents = current_tSortRow_2_SortIn.Dependents;
					row16.tenure = current_tSortRow_2_SortIn.tenure;
					row16.PhoneService = current_tSortRow_2_SortIn.PhoneService;
					row16.MultipleLines = current_tSortRow_2_SortIn.MultipleLines;
					row16.PaperlessBilling = current_tSortRow_2_SortIn.PaperlessBilling;
					row16.MonthlyCharges = current_tSortRow_2_SortIn.MonthlyCharges;
					row16.TotalCharges = current_tSortRow_2_SortIn.TotalCharges;
					row16.Churn = current_tSortRow_2_SortIn.Churn;
					row16.OnlineSecurity = current_tSortRow_2_SortIn.OnlineSecurity;
					row16.OnlineBackup = current_tSortRow_2_SortIn.OnlineBackup;
					row16.DeviceProtection = current_tSortRow_2_SortIn.DeviceProtection;
					row16.TechSupport = current_tSortRow_2_SortIn.TechSupport;
					row16.StreamingTV = current_tSortRow_2_SortIn.StreamingTV;
					row16.StreamingMovies = current_tSortRow_2_SortIn.StreamingMovies;
					// increase number of line sorted
					nb_line_tSortRow_2_SortIn++;

					/**
					 * [tSortRow_2_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_2_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortIn";

					tos_count_tSortRow_2_SortIn++;

					/**
					 * [tSortRow_2_SortIn main ] stop
					 */

					/**
					 * [tSortRow_2_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortIn";

					/**
					 * [tSortRow_2_SortIn process_data_begin ] stop
					 */

					/**
					 * [tUniqRow_2 main ] start
					 */

					currentComponent = "tUniqRow_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row16");
					}

					row17 = null;
					if (row16.CustomerID == null) {
						finder_tUniqRow_2.CustomerID = null;
					} else {
						finder_tUniqRow_2.CustomerID = row16.CustomerID.toLowerCase();
					}
					finder_tUniqRow_2.hashCodeDirty = true;
					if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
						KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

						if (row16.CustomerID == null) {
							new_tUniqRow_2.CustomerID = null;
						} else {
							new_tUniqRow_2.CustomerID = row16.CustomerID.toLowerCase();
						}

						keystUniqRow_2.add(new_tUniqRow_2);
						if (row17 == null) {

							row17 = new row17Struct();
						}
						row17.CustomerID = row16.CustomerID;
						row17.Gender = row16.Gender;
						row17.SeniorCitizen = row16.SeniorCitizen;
						row17.CountryCode = row16.CountryCode;
						row17.Partner = row16.Partner;
						row17.Dependents = row16.Dependents;
						row17.tenure = row16.tenure;
						row17.PhoneService = row16.PhoneService;
						row17.MultipleLines = row16.MultipleLines;
						row17.PaperlessBilling = row16.PaperlessBilling;
						row17.MonthlyCharges = row16.MonthlyCharges;
						row17.TotalCharges = row16.TotalCharges;
						row17.Churn = row16.Churn;
						row17.OnlineSecurity = row16.OnlineSecurity;
						row17.OnlineBackup = row16.OnlineBackup;
						row17.DeviceProtection = row16.DeviceProtection;
						row17.TechSupport = row16.TechSupport;
						row17.StreamingTV = row16.StreamingTV;
						row17.StreamingMovies = row16.StreamingMovies;
						nb_uniques_tUniqRow_2++;
					} else {
						nb_duplicates_tUniqRow_2++;
					}

					tos_count_tUniqRow_2++;

					/**
					 * [tUniqRow_2 main ] stop
					 */

					/**
					 * [tUniqRow_2 process_data_begin ] start
					 */

					currentComponent = "tUniqRow_2";

					/**
					 * [tUniqRow_2 process_data_begin ] stop
					 */
// Start of branch "row17"
					if (row17 != null) {

						/**
						 * [tDBOutput_3 main ] start
						 */

						currentComponent = "tDBOutput_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row17");
						}

						whetherReject_tDBOutput_3 = false;
						if (row17.CustomerID == null) {
							pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(1, row17.CustomerID);
						}

						if (row17.Gender == null) {
							pstmt_tDBOutput_3.setNull(2, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setInt(2, row17.Gender);
						}

						if (row17.SeniorCitizen == null) {
							pstmt_tDBOutput_3.setNull(3, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setInt(3, row17.SeniorCitizen);
						}

						if (row17.CountryCode == null) {
							pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(4, row17.CountryCode);
						}

						if (row17.Partner == null) {
							pstmt_tDBOutput_3.setNull(5, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setInt(5, row17.Partner);
						}

						if (row17.Dependents == null) {
							pstmt_tDBOutput_3.setNull(6, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setInt(6, row17.Dependents);
						}

						if (row17.tenure == null) {
							pstmt_tDBOutput_3.setNull(7, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setInt(7, row17.tenure);
						}

						if (row17.PhoneService == null) {
							pstmt_tDBOutput_3.setNull(8, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setInt(8, row17.PhoneService);
						}

						if (row17.MultipleLines == null) {
							pstmt_tDBOutput_3.setNull(9, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setInt(9, row17.MultipleLines);
						}

						if (row17.PaperlessBilling == null) {
							pstmt_tDBOutput_3.setNull(10, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setInt(10, row17.PaperlessBilling);
						}

						if (row17.MonthlyCharges == null) {
							pstmt_tDBOutput_3.setNull(11, java.sql.Types.FLOAT);
						} else {
							pstmt_tDBOutput_3.setFloat(11, row17.MonthlyCharges);
						}

						if (row17.TotalCharges == null) {
							pstmt_tDBOutput_3.setNull(12, java.sql.Types.FLOAT);
						} else {
							pstmt_tDBOutput_3.setFloat(12, row17.TotalCharges);
						}

						if (row17.Churn == null) {
							pstmt_tDBOutput_3.setNull(13, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setInt(13, row17.Churn);
						}

						if (row17.OnlineSecurity == null) {
							pstmt_tDBOutput_3.setNull(14, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setInt(14, row17.OnlineSecurity);
						}

						if (row17.OnlineBackup == null) {
							pstmt_tDBOutput_3.setNull(15, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setInt(15, row17.OnlineBackup);
						}

						if (row17.DeviceProtection == null) {
							pstmt_tDBOutput_3.setNull(16, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setInt(16, row17.DeviceProtection);
						}

						if (row17.TechSupport == null) {
							pstmt_tDBOutput_3.setNull(17, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setInt(17, row17.TechSupport);
						}

						if (row17.StreamingTV == null) {
							pstmt_tDBOutput_3.setNull(18, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setInt(18, row17.StreamingTV);
						}

						if (row17.StreamingMovies == null) {
							pstmt_tDBOutput_3.setNull(19, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setInt(19, row17.StreamingMovies);
						}

						pstmt_tDBOutput_3.addBatch();
						nb_line_tDBOutput_3++;

						batchSizeCounter_tDBOutput_3++;
						if (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3) {
							try {
								int countSum_tDBOutput_3 = 0;
								for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 == java.sql.Statement.EXECUTE_FAILED
											? 0
											: 1);
								}
								insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tDBOutput_3 = 0;
								for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
								}
								insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tDBOutput_3 = 0;
						}
						commitCounter_tDBOutput_3++;

						if (commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {

							try {
								int countSum_tDBOutput_3 = 0;
								for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : 1);
								}
								insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tDBOutput_3 = 0;
								for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
								}
								insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
								System.err.println(e.getMessage());

							}
							conn_tDBOutput_3.commit();
							commitCounter_tDBOutput_3 = 0;

						}

						tos_count_tDBOutput_3++;

						/**
						 * [tDBOutput_3 main ] stop
						 */

						/**
						 * [tDBOutput_3 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_3";

						/**
						 * [tDBOutput_3 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_3 process_data_end ] start
						 */

						currentComponent = "tDBOutput_3";

						/**
						 * [tDBOutput_3 process_data_end ] stop
						 */

					} // End of branch "row17"

					/**
					 * [tUniqRow_2 process_data_end ] start
					 */

					currentComponent = "tUniqRow_2";

					/**
					 * [tUniqRow_2 process_data_end ] stop
					 */

					/**
					 * [tSortRow_2_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortIn";

					/**
					 * [tSortRow_2_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_2_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortIn";

				}

				globalMap.put("tSortRow_2_SortIn_NB_LINE", nb_line_tSortRow_2_SortIn);

				ok_Hash.put("tSortRow_2_SortIn", true);
				end_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_2_SortIn end ] stop
				 */

				/**
				 * [tUniqRow_2 end ] start
				 */

				currentComponent = "tUniqRow_2";

				globalMap.put("tUniqRow_2_NB_UNIQUES", nb_uniques_tUniqRow_2);
				globalMap.put("tUniqRow_2_NB_DUPLICATES", nb_duplicates_tUniqRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row16");
				}

				ok_Hash.put("tUniqRow_2", true);
				end_Hash.put("tUniqRow_2", System.currentTimeMillis());

				/**
				 * [tUniqRow_2 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (batchSizeCounter_tDBOutput_3 != 0) {
						int countSum_tDBOutput_3 = 0;

						for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_3 = 0;
					for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_3 = 0;

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");

				}
				resourceMap.put("statementClosed_tDBOutput_3", true);
				if (commitCounter_tDBOutput_3 > 0) {

					conn_tDBOutput_3.commit();

				}

				conn_tDBOutput_3.close();

				resourceMap.put("finish_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3 + deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED", nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED", nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row17");
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

				/**
				 * [tFilterColumns_2 end ] start
				 */

				currentComponent = "tFilterColumns_2";

				globalMap.put("tFilterColumns_2_NB_LINE", nb_line_tFilterColumns_2);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row18");
				}

				ok_Hash.put("tFilterColumns_2", true);
				end_Hash.put("tFilterColumns_2", System.currentTimeMillis());

				/**
				 * [tFilterColumns_2 end ] stop
				 */

				/**
				 * [tSortRow_3_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortOut";

				row19Struct[] array_tSortRow_3_SortOut = list_tSortRow_3_SortOut.toArray(new Comparablerow19Struct[0]);

				java.util.Arrays.sort(array_tSortRow_3_SortOut);

				globalMap.put("tSortRow_3", array_tSortRow_3_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row19");
				}

				ok_Hash.put("tSortRow_3_SortOut", true);
				end_Hash.put("tSortRow_3_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_3_SortOut end ] stop
				 */

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row21");
				}

				int tos_count_tDBOutput_4 = 0;

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;

				int rejectedCount_tDBOutput_4 = 0;

				String tableName_tDBOutput_4 = "Telecom_customer_ValueAdded_service";
				boolean whetherReject_tDBOutput_4 = false;

				java.util.Calendar calendar_tDBOutput_4 = java.util.Calendar.getInstance();
				calendar_tDBOutput_4.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_4 = calendar_tDBOutput_4.getTime().getTime();
				calendar_tDBOutput_4.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_4 = calendar_tDBOutput_4.getTime().getTime();
				long date_tDBOutput_4;

				java.sql.Connection conn_tDBOutput_4 = null;
				String dbProperties_tDBOutput_4 = "noDatetimeStringSync=true";
				String url_tDBOutput_4 = null;
				if (dbProperties_tDBOutput_4 == null || dbProperties_tDBOutput_4.trim().length() == 0) {
					url_tDBOutput_4 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "telecom_star_prod" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_4 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_4.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_4 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_4 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "telecom_star_prod" + "?"
							+ properties_tDBOutput_4;
				}
				String driverClass_tDBOutput_4 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_4 = "root";

				final String decryptedPassword_tDBOutput_4 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:EWioQRb9E+mxoSvuFx5TkfPEKU6tqVWP+8IQ/YQ+BF0H/G1XQg==");

				String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;
				java.lang.Class.forName(driverClass_tDBOutput_4);

				conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4, dbUser_tDBOutput_4,
						dbPwd_tDBOutput_4);

				resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
				conn_tDBOutput_4.setAutoCommit(false);
				int commitEvery_tDBOutput_4 = 10000;
				int commitCounter_tDBOutput_4 = 0;

				int count_tDBOutput_4 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_4 = conn_tDBOutput_4.getMetaData();
				boolean whetherExist_tDBOutput_4 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_4 = dbMetaData_tDBOutput_4.getTables("telecom_star_prod",
						null, null, new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_4.next()) {
						String table_tDBOutput_4 = rsTable_tDBOutput_4.getString("TABLE_NAME");
						if (table_tDBOutput_4.equalsIgnoreCase("Telecom_customer_ValueAdded_service")) {
							whetherExist_tDBOutput_4 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_4) {
					try (java.sql.Statement stmtDrop_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
						stmtDrop_tDBOutput_4.execute("DROP TABLE `" + tableName_tDBOutput_4 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
					stmtCreate_tDBOutput_4.execute("CREATE TABLE `" + tableName_tDBOutput_4
							+ "`(`CustomerID` VARCHAR(255)  ,`InternetService` VARCHAR(25)  ,`Contract` VARCHAR(50)  ,`PaymentMethod` VARCHAR(100)  ,primary key(`CustomerID`))");
				}

				String insert_tDBOutput_4 = "INSERT INTO `" + "Telecom_customer_ValueAdded_service"
						+ "` (`CustomerID`,`InternetService`,`Contract`,`PaymentMethod`) VALUES (?,?,?,?)";
				int batchSize_tDBOutput_4 = 100;
				int batchSizeCounter_tDBOutput_4 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tUniqRow_3 begin ] start
				 */

				ok_Hash.put("tUniqRow_3", false);
				start_Hash.put("tUniqRow_3", System.currentTimeMillis());

				currentComponent = "tUniqRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row20");
				}

				int tos_count_tUniqRow_3 = 0;

				class KeyStruct_tUniqRow_3 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String CustomerID;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;

						if (this.CustomerID == null) {
							if (other.CustomerID != null)
								return false;

						} else if (!this.CustomerID.equals(other.CustomerID))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_3 = 0;
				int nb_duplicates_tUniqRow_3 = 0;
				KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
				java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>();

				/**
				 * [tUniqRow_3 begin ] stop
				 */

				/**
				 * [tSortRow_3_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_3_SortIn", false);
				start_Hash.put("tSortRow_3_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortIn";

				int tos_count_tSortRow_3_SortIn = 0;

				row19Struct[] array_tSortRow_3_SortIn = (row19Struct[]) globalMap.remove("tSortRow_3");

				int nb_line_tSortRow_3_SortIn = 0;

				row19Struct current_tSortRow_3_SortIn = null;

				for (int i_tSortRow_3_SortIn = 0; i_tSortRow_3_SortIn < array_tSortRow_3_SortIn.length; i_tSortRow_3_SortIn++) {
					current_tSortRow_3_SortIn = array_tSortRow_3_SortIn[i_tSortRow_3_SortIn];
					row20.CustomerID = current_tSortRow_3_SortIn.CustomerID;
					row20.InternetService = current_tSortRow_3_SortIn.InternetService;
					row20.Contract = current_tSortRow_3_SortIn.Contract;
					row20.PaymentMethod = current_tSortRow_3_SortIn.PaymentMethod;
					// increase number of line sorted
					nb_line_tSortRow_3_SortIn++;

					/**
					 * [tSortRow_3_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_3_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortIn";

					tos_count_tSortRow_3_SortIn++;

					/**
					 * [tSortRow_3_SortIn main ] stop
					 */

					/**
					 * [tSortRow_3_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortIn";

					/**
					 * [tSortRow_3_SortIn process_data_begin ] stop
					 */

					/**
					 * [tUniqRow_3 main ] start
					 */

					currentComponent = "tUniqRow_3";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row20");
					}

					row21 = null;
					if (row20.CustomerID == null) {
						finder_tUniqRow_3.CustomerID = null;
					} else {
						finder_tUniqRow_3.CustomerID = row20.CustomerID.toLowerCase();
					}
					finder_tUniqRow_3.hashCodeDirty = true;
					if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
						KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

						if (row20.CustomerID == null) {
							new_tUniqRow_3.CustomerID = null;
						} else {
							new_tUniqRow_3.CustomerID = row20.CustomerID.toLowerCase();
						}

						keystUniqRow_3.add(new_tUniqRow_3);
						if (row21 == null) {

							row21 = new row21Struct();
						}
						row21.CustomerID = row20.CustomerID;
						row21.InternetService = row20.InternetService;
						row21.Contract = row20.Contract;
						row21.PaymentMethod = row20.PaymentMethod;
						nb_uniques_tUniqRow_3++;
					} else {
						nb_duplicates_tUniqRow_3++;
					}

					tos_count_tUniqRow_3++;

					/**
					 * [tUniqRow_3 main ] stop
					 */

					/**
					 * [tUniqRow_3 process_data_begin ] start
					 */

					currentComponent = "tUniqRow_3";

					/**
					 * [tUniqRow_3 process_data_begin ] stop
					 */
// Start of branch "row21"
					if (row21 != null) {

						/**
						 * [tDBOutput_4 main ] start
						 */

						currentComponent = "tDBOutput_4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row21");
						}

						whetherReject_tDBOutput_4 = false;
						if (row21.CustomerID == null) {
							pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(1, row21.CustomerID);
						}

						if (row21.InternetService == null) {
							pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(2, row21.InternetService);
						}

						if (row21.Contract == null) {
							pstmt_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(3, row21.Contract);
						}

						if (row21.PaymentMethod == null) {
							pstmt_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(4, row21.PaymentMethod);
						}

						pstmt_tDBOutput_4.addBatch();
						nb_line_tDBOutput_4++;

						batchSizeCounter_tDBOutput_4++;
						if (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4) {
							try {
								int countSum_tDBOutput_4 = 0;
								for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
									countSum_tDBOutput_4 += (countEach_tDBOutput_4 == java.sql.Statement.EXECUTE_FAILED
											? 0
											: 1);
								}
								insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tDBOutput_4 = 0;
								for (int countEach_tDBOutput_4 : e.getUpdateCounts()) {
									countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
								}
								insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tDBOutput_4 = 0;
						}
						commitCounter_tDBOutput_4++;

						if (commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {

							try {
								int countSum_tDBOutput_4 = 0;
								for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
									countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : 1);
								}
								insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tDBOutput_4 = 0;
								for (int countEach_tDBOutput_4 : e.getUpdateCounts()) {
									countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
								}
								insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
								System.err.println(e.getMessage());

							}
							conn_tDBOutput_4.commit();
							commitCounter_tDBOutput_4 = 0;

						}

						tos_count_tDBOutput_4++;

						/**
						 * [tDBOutput_4 main ] stop
						 */

						/**
						 * [tDBOutput_4 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_4";

						/**
						 * [tDBOutput_4 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_4 process_data_end ] start
						 */

						currentComponent = "tDBOutput_4";

						/**
						 * [tDBOutput_4 process_data_end ] stop
						 */

					} // End of branch "row21"

					/**
					 * [tUniqRow_3 process_data_end ] start
					 */

					currentComponent = "tUniqRow_3";

					/**
					 * [tUniqRow_3 process_data_end ] stop
					 */

					/**
					 * [tSortRow_3_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortIn";

					/**
					 * [tSortRow_3_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_3_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortIn";

				}

				globalMap.put("tSortRow_3_SortIn_NB_LINE", nb_line_tSortRow_3_SortIn);

				ok_Hash.put("tSortRow_3_SortIn", true);
				end_Hash.put("tSortRow_3_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_3_SortIn end ] stop
				 */

				/**
				 * [tUniqRow_3 end ] start
				 */

				currentComponent = "tUniqRow_3";

				globalMap.put("tUniqRow_3_NB_UNIQUES", nb_uniques_tUniqRow_3);
				globalMap.put("tUniqRow_3_NB_DUPLICATES", nb_duplicates_tUniqRow_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row20");
				}

				ok_Hash.put("tUniqRow_3", true);
				end_Hash.put("tUniqRow_3", System.currentTimeMillis());

				/**
				 * [tUniqRow_3 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					if (batchSizeCounter_tDBOutput_4 != 0) {
						int countSum_tDBOutput_4 = 0;

						for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_4 = 0;
					for (int countEach_tDBOutput_4 : e.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_4 = 0;

				if (pstmt_tDBOutput_4 != null) {

					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");

				}
				resourceMap.put("statementClosed_tDBOutput_4", true);
				if (commitCounter_tDBOutput_4 > 0) {

					conn_tDBOutput_4.commit();

				}

				conn_tDBOutput_4.close();

				resourceMap.put("finish_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4 + deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED", nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED", nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row21");
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row22");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tSortRow_4_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_4";

				currentComponent = "tSortRow_4_SortOut";

				Telecom_GenderStruct[] array_tSortRow_4_SortOut = list_tSortRow_4_SortOut
						.toArray(new ComparableTelecom_GenderStruct[0]);

				java.util.Arrays.sort(array_tSortRow_4_SortOut);

				globalMap.put("tSortRow_4", array_tSortRow_4_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Telecom_Gender");
				}

				ok_Hash.put("tSortRow_4_SortOut", true);
				end_Hash.put("tSortRow_4_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_4_SortOut end ] stop
				 */

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row24");
				}

				int tos_count_tDBOutput_5 = 0;

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;

				int rejectedCount_tDBOutput_5 = 0;

				String tableName_tDBOutput_5 = "Telecom_customer_gender";
				boolean whetherReject_tDBOutput_5 = false;

				java.util.Calendar calendar_tDBOutput_5 = java.util.Calendar.getInstance();
				calendar_tDBOutput_5.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_5 = calendar_tDBOutput_5.getTime().getTime();
				calendar_tDBOutput_5.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_5 = calendar_tDBOutput_5.getTime().getTime();
				long date_tDBOutput_5;

				java.sql.Connection conn_tDBOutput_5 = null;
				String dbProperties_tDBOutput_5 = "noDatetimeStringSync=true";
				String url_tDBOutput_5 = null;
				if (dbProperties_tDBOutput_5 == null || dbProperties_tDBOutput_5.trim().length() == 0) {
					url_tDBOutput_5 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "telecom_star_prod" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_5 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_5.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_5 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_5 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "telecom_star_prod" + "?"
							+ properties_tDBOutput_5;
				}
				String driverClass_tDBOutput_5 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_5 = "root";

				final String decryptedPassword_tDBOutput_5 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:5KnqtWt3hPe+28UMQ6r7JuJ/WgyOHNX+FshYocDqAKMOi4u19A==");

				String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;
				java.lang.Class.forName(driverClass_tDBOutput_5);

				conn_tDBOutput_5 = java.sql.DriverManager.getConnection(url_tDBOutput_5, dbUser_tDBOutput_5,
						dbPwd_tDBOutput_5);

				resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
				conn_tDBOutput_5.setAutoCommit(false);
				int commitEvery_tDBOutput_5 = 10000;
				int commitCounter_tDBOutput_5 = 0;

				int count_tDBOutput_5 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_5 = conn_tDBOutput_5.getMetaData();
				boolean whetherExist_tDBOutput_5 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_5 = dbMetaData_tDBOutput_5.getTables("telecom_star_prod",
						null, null, new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_5.next()) {
						String table_tDBOutput_5 = rsTable_tDBOutput_5.getString("TABLE_NAME");
						if (table_tDBOutput_5.equalsIgnoreCase("Telecom_customer_gender")) {
							whetherExist_tDBOutput_5 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_5) {
					try (java.sql.Statement stmtDrop_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
						stmtDrop_tDBOutput_5.execute("DROP TABLE `" + tableName_tDBOutput_5 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
					stmtCreate_tDBOutput_5.execute("CREATE TABLE `" + tableName_tDBOutput_5
							+ "`(`Gender` INT(0)  ,`Gender_type` VARCHAR(10)   not null ,primary key(`Gender`))");
				}

				String insert_tDBOutput_5 = "INSERT INTO `" + "Telecom_customer_gender"
						+ "` (`Gender`,`Gender_type`) VALUES (?,?)";
				int batchSize_tDBOutput_5 = 100;
				int batchSizeCounter_tDBOutput_5 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tUniqRow_4 begin ] start
				 */

				ok_Hash.put("tUniqRow_4", false);
				start_Hash.put("tUniqRow_4", System.currentTimeMillis());

				currentComponent = "tUniqRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row23");
				}

				int tos_count_tUniqRow_4 = 0;

				class KeyStruct_tUniqRow_4 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Integer Gender;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.Gender == null) ? 0 : this.Gender.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;

						if (this.Gender == null) {
							if (other.Gender != null)
								return false;

						} else if (!this.Gender.equals(other.Gender))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_4 = 0;
				int nb_duplicates_tUniqRow_4 = 0;
				KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
				java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>();

				/**
				 * [tUniqRow_4 begin ] stop
				 */

				/**
				 * [tSortRow_4_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_4_SortIn", false);
				start_Hash.put("tSortRow_4_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_4";

				currentComponent = "tSortRow_4_SortIn";

				int tos_count_tSortRow_4_SortIn = 0;

				Telecom_GenderStruct[] array_tSortRow_4_SortIn = (Telecom_GenderStruct[]) globalMap
						.remove("tSortRow_4");

				int nb_line_tSortRow_4_SortIn = 0;

				Telecom_GenderStruct current_tSortRow_4_SortIn = null;

				for (int i_tSortRow_4_SortIn = 0; i_tSortRow_4_SortIn < array_tSortRow_4_SortIn.length; i_tSortRow_4_SortIn++) {
					current_tSortRow_4_SortIn = array_tSortRow_4_SortIn[i_tSortRow_4_SortIn];
					row23.Gender = current_tSortRow_4_SortIn.Gender;
					row23.Gender_type = current_tSortRow_4_SortIn.Gender_type;
					// increase number of line sorted
					nb_line_tSortRow_4_SortIn++;

					/**
					 * [tSortRow_4_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_4_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_4";

					currentComponent = "tSortRow_4_SortIn";

					tos_count_tSortRow_4_SortIn++;

					/**
					 * [tSortRow_4_SortIn main ] stop
					 */

					/**
					 * [tSortRow_4_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_4";

					currentComponent = "tSortRow_4_SortIn";

					/**
					 * [tSortRow_4_SortIn process_data_begin ] stop
					 */

					/**
					 * [tUniqRow_4 main ] start
					 */

					currentComponent = "tUniqRow_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row23");
					}

					row24 = null;
					finder_tUniqRow_4.Gender = row23.Gender;
					finder_tUniqRow_4.hashCodeDirty = true;
					if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
						KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

						new_tUniqRow_4.Gender = row23.Gender;

						keystUniqRow_4.add(new_tUniqRow_4);
						if (row24 == null) {

							row24 = new row24Struct();
						}
						row24.Gender = row23.Gender;
						row24.Gender_type = row23.Gender_type;
						nb_uniques_tUniqRow_4++;
					} else {
						nb_duplicates_tUniqRow_4++;
					}

					tos_count_tUniqRow_4++;

					/**
					 * [tUniqRow_4 main ] stop
					 */

					/**
					 * [tUniqRow_4 process_data_begin ] start
					 */

					currentComponent = "tUniqRow_4";

					/**
					 * [tUniqRow_4 process_data_begin ] stop
					 */
// Start of branch "row24"
					if (row24 != null) {

						/**
						 * [tDBOutput_5 main ] start
						 */

						currentComponent = "tDBOutput_5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row24");
						}

						whetherReject_tDBOutput_5 = false;
						if (row24.Gender == null) {
							pstmt_tDBOutput_5.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_5.setInt(1, row24.Gender);
						}

						if (row24.Gender_type == null) {
							pstmt_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(2, row24.Gender_type);
						}

						pstmt_tDBOutput_5.addBatch();
						nb_line_tDBOutput_5++;

						batchSizeCounter_tDBOutput_5++;
						if (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5) {
							try {
								int countSum_tDBOutput_5 = 0;
								for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
									countSum_tDBOutput_5 += (countEach_tDBOutput_5 == java.sql.Statement.EXECUTE_FAILED
											? 0
											: 1);
								}
								insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tDBOutput_5 = 0;
								for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
									countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
								}
								insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tDBOutput_5 = 0;
						}
						commitCounter_tDBOutput_5++;

						if (commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {

							try {
								int countSum_tDBOutput_5 = 0;
								for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
									countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : 1);
								}
								insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tDBOutput_5 = 0;
								for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
									countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
								}
								insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
								System.err.println(e.getMessage());

							}
							conn_tDBOutput_5.commit();
							commitCounter_tDBOutput_5 = 0;

						}

						tos_count_tDBOutput_5++;

						/**
						 * [tDBOutput_5 main ] stop
						 */

						/**
						 * [tDBOutput_5 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_5";

						/**
						 * [tDBOutput_5 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_5 process_data_end ] start
						 */

						currentComponent = "tDBOutput_5";

						/**
						 * [tDBOutput_5 process_data_end ] stop
						 */

					} // End of branch "row24"

					/**
					 * [tUniqRow_4 process_data_end ] start
					 */

					currentComponent = "tUniqRow_4";

					/**
					 * [tUniqRow_4 process_data_end ] stop
					 */

					/**
					 * [tSortRow_4_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_4";

					currentComponent = "tSortRow_4_SortIn";

					/**
					 * [tSortRow_4_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_4_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_4";

					currentComponent = "tSortRow_4_SortIn";

				}

				globalMap.put("tSortRow_4_SortIn_NB_LINE", nb_line_tSortRow_4_SortIn);

				ok_Hash.put("tSortRow_4_SortIn", true);
				end_Hash.put("tSortRow_4_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_4_SortIn end ] stop
				 */

				/**
				 * [tUniqRow_4 end ] start
				 */

				currentComponent = "tUniqRow_4";

				globalMap.put("tUniqRow_4_NB_UNIQUES", nb_uniques_tUniqRow_4);
				globalMap.put("tUniqRow_4_NB_DUPLICATES", nb_duplicates_tUniqRow_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row23");
				}

				ok_Hash.put("tUniqRow_4", true);
				end_Hash.put("tUniqRow_4", System.currentTimeMillis());

				/**
				 * [tUniqRow_4 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (batchSizeCounter_tDBOutput_5 != 0) {
						int countSum_tDBOutput_5 = 0;

						for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_5 = 0;
					for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_5 = 0;

				if (pstmt_tDBOutput_5 != null) {

					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");

				}
				resourceMap.put("statementClosed_tDBOutput_5", true);
				if (commitCounter_tDBOutput_5 > 0) {

					conn_tDBOutput_5.commit();

				}

				conn_tDBOutput_5.close();

				resourceMap.put("finish_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5 + deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED", nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED", nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row24");
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				/**
				 * [tDBOutput_5 end ] stop
				 */

				/**
				 * [tFilterColumns_3 end ] start
				 */

				currentComponent = "tFilterColumns_3";

				globalMap.put("tFilterColumns_3_NB_LINE", nb_line_tFilterColumns_3);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row25");
				}

				ok_Hash.put("tFilterColumns_3", true);
				end_Hash.put("tFilterColumns_3", System.currentTimeMillis());

				/**
				 * [tFilterColumns_3 end ] stop
				 */

				/**
				 * [tUniqRow_5 end ] start
				 */

				currentComponent = "tUniqRow_5";

				globalMap.put("tUniqRow_5_NB_UNIQUES", nb_uniques_tUniqRow_5);
				globalMap.put("tUniqRow_5_NB_DUPLICATES", nb_duplicates_tUniqRow_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row26");
				}

				ok_Hash.put("tUniqRow_5", true);
				end_Hash.put("tUniqRow_5", System.currentTimeMillis());

				/**
				 * [tUniqRow_5 end ] stop
				 */

				/**
				 * [tDBOutput_6 end ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					if (batchSizeCounter_tDBOutput_6 != 0) {
						int countSum_tDBOutput_6 = 0;

						for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_6 = 0;
					for (int countEach_tDBOutput_6 : e.getUpdateCounts()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}

					insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_6 = 0;

				if (pstmt_tDBOutput_6 != null) {

					pstmt_tDBOutput_6.close();
					resourceMap.remove("pstmt_tDBOutput_6");

				}
				resourceMap.put("statementClosed_tDBOutput_6", true);
				if (commitCounter_tDBOutput_6 > 0) {

					conn_tDBOutput_6.commit();

				}

				conn_tDBOutput_6.close();

				resourceMap.put("finish_tDBOutput_6", true);

				nb_line_deleted_tDBOutput_6 = nb_line_deleted_tDBOutput_6 + deletedCount_tDBOutput_6;
				nb_line_update_tDBOutput_6 = nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
				nb_line_inserted_tDBOutput_6 = nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
				nb_line_rejected_tDBOutput_6 = nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;

				globalMap.put("tDBOutput_6_NB_LINE", nb_line_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_UPDATED", nb_line_update_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_DELETED", nb_line_deleted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row27");
				}

				ok_Hash.put("tDBOutput_6", true);
				end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				/**
				 * [tDBOutput_6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tSortRow_4_SortIn"
			globalMap.remove("tSortRow_4");

			// free memory for "tSortRow_3_SortIn"
			globalMap.remove("tSortRow_3");

			// free memory for "tSortRow_2_SortIn"
			globalMap.remove("tSortRow_2");

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tReplicate_1 finally ] start
				 */

				currentComponent = "tReplicate_1";

				/**
				 * [tReplicate_1 finally ] stop
				 */

				/**
				 * [tFilterColumns_1 finally ] start
				 */

				currentComponent = "tFilterColumns_1";

				/**
				 * [tFilterColumns_1 finally ] stop
				 */

				/**
				 * [tSortRow_2_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortOut";

				/**
				 * [tSortRow_2_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_2_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortIn";

				/**
				 * [tSortRow_2_SortIn finally ] stop
				 */

				/**
				 * [tUniqRow_2 finally ] start
				 */

				currentComponent = "tUniqRow_2";

				/**
				 * [tUniqRow_2 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
						if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_3")) != null) {
							pstmtToClose_tDBOutput_3.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_3") == null) {
						java.sql.Connection ctn_tDBOutput_3 = null;
						if ((ctn_tDBOutput_3 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_3")) != null) {
							try {
								ctn_tDBOutput_3.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_3) {
								String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :"
										+ sqlEx_tDBOutput_3.getMessage();
								System.err.println(errorMessage_tDBOutput_3);
							}
						}
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

				/**
				 * [tFilterColumns_2 finally ] start
				 */

				currentComponent = "tFilterColumns_2";

				/**
				 * [tFilterColumns_2 finally ] stop
				 */

				/**
				 * [tSortRow_3_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortOut";

				/**
				 * [tSortRow_3_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_3_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortIn";

				/**
				 * [tSortRow_3_SortIn finally ] stop
				 */

				/**
				 * [tUniqRow_3 finally ] start
				 */

				currentComponent = "tUniqRow_3";

				/**
				 * [tUniqRow_3 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
						if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_4")) != null) {
							pstmtToClose_tDBOutput_4.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_4") == null) {
						java.sql.Connection ctn_tDBOutput_4 = null;
						if ((ctn_tDBOutput_4 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_4")) != null) {
							try {
								ctn_tDBOutput_4.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_4) {
								String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :"
										+ sqlEx_tDBOutput_4.getMessage();
								System.err.println(errorMessage_tDBOutput_4);
							}
						}
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tSortRow_4_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_4";

				currentComponent = "tSortRow_4_SortOut";

				/**
				 * [tSortRow_4_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_4_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_4";

				currentComponent = "tSortRow_4_SortIn";

				/**
				 * [tSortRow_4_SortIn finally ] stop
				 */

				/**
				 * [tUniqRow_4 finally ] start
				 */

				currentComponent = "tUniqRow_4";

				/**
				 * [tUniqRow_4 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
						if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_5")) != null) {
							pstmtToClose_tDBOutput_5.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_5") == null) {
						java.sql.Connection ctn_tDBOutput_5 = null;
						if ((ctn_tDBOutput_5 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_5")) != null) {
							try {
								ctn_tDBOutput_5.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_5) {
								String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :"
										+ sqlEx_tDBOutput_5.getMessage();
								System.err.println(errorMessage_tDBOutput_5);
							}
						}
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

				/**
				 * [tFilterColumns_3 finally ] start
				 */

				currentComponent = "tFilterColumns_3";

				/**
				 * [tFilterColumns_3 finally ] stop
				 */

				/**
				 * [tUniqRow_5 finally ] start
				 */

				currentComponent = "tUniqRow_5";

				/**
				 * [tUniqRow_5 finally ] stop
				 */

				/**
				 * [tDBOutput_6 finally ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
						if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_6")) != null) {
							pstmtToClose_tDBOutput_6.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_6") == null) {
						java.sql.Connection ctn_tDBOutput_6 = null;
						if ((ctn_tDBOutput_6 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_6")) != null) {
							try {
								ctn_tDBOutput_6.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_6) {
								String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :"
										+ sqlEx_tDBOutput_6.getMessage();
								System.err.println(errorMessage_tDBOutput_6);
							}
						}
					}
				}

				/**
				 * [tDBOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final jobETL_Telecom jobETL_TelecomClass = new jobETL_Telecom();

		int exitCode = jobETL_TelecomClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = jobETL_Telecom.class.getClassLoader()
					.getResourceAsStream("telecom_churn/jobetl_telecom_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = jobETL_Telecom.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBConnection_1) {
			globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

			e_tDBConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : jobETL_Telecom");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 671250 characters generated by Talend Open Studio for Data Integration on the
 * November 10, 2020 10:28:10 PM CET
 ************************************************************************************************/