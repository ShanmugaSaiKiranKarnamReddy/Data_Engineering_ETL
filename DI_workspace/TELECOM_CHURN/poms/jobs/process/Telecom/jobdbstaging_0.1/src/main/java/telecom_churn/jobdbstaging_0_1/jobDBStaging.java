// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package telecom_churn.jobdbstaging_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: jobDBStaging Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class jobDBStaging implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "jobDBStaging";
	private final String projectName = "TELECOM_CHURN";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					jobDBStaging.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(jobDBStaging.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_1_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_1_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_1_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String properties_tDBConnection_1 = "noDatetimeStringSync=true";
				if (properties_tDBConnection_1 == null || properties_tDBConnection_1.trim().length() == 0) {
					properties_tDBConnection_1 += "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else if (properties_tDBConnection_1 != null
						&& !properties_tDBConnection_1.contains("rewriteBatchedStatements")) {
					properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
				}
				if (properties_tDBConnection_1 != null
						&& !properties_tDBConnection_1.contains("allowLoadLocalInfile")) {
					properties_tDBConnection_1 += "&allowLoadLocalInfile=true";
				}

				String url_tDBConnection_1 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "telecom_staging"
						+ "?" + properties_tDBConnection_1;
				String dbUser_tDBConnection_1 = "root";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:og5kzhuSr/kyU4PK8b/gDVNotSV4xMQcxYDgWXu91e9cJRV5Bg==");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("db_tDBConnection_1", "telecom_staging");

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_1Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobDBStaging = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobDBStaging = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String customerID;

		public String getCustomerID() {
			return this.customerID;
		}

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String SeniorCitizen;

		public String getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String Country_Code;

		public String getCountry_Code() {
			return this.Country_Code;
		}

		public String Partner;

		public String getPartner() {
			return this.Partner;
		}

		public String Dependents;

		public String getDependents() {
			return this.Dependents;
		}

		public String tenure;

		public String getTenure() {
			return this.tenure;
		}

		public String PhoneService;

		public String getPhoneService() {
			return this.PhoneService;
		}

		public String MultipleLines;

		public String getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public String OnlineSecurity;

		public String getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public String OnlineBackup;

		public String getOnlineBackup() {
			return this.OnlineBackup;
		}

		public String DeviceProtection;

		public String getDeviceProtection() {
			return this.DeviceProtection;
		}

		public String TechSupport;

		public String getTechSupport() {
			return this.TechSupport;
		}

		public String StreamingTV;

		public String getStreamingTV() {
			return this.StreamingTV;
		}

		public String StreamingMovies;

		public String getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public String PaperlessBilling;

		public String getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public String MonthlyCharges;

		public String getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public String TotalCharges;

		public String getTotalCharges() {
			return this.TotalCharges;
		}

		public String Churn;

		public String getChurn() {
			return this.Churn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Sno == null) ? 0 : this.Sno.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.Sno == null) {
				if (other.Sno != null)
					return false;

			} else if (!this.Sno.equals(other.Sno))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.Sno = this.Sno;
			other.customerID = this.customerID;
			other.gender = this.gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.Geography = this.Geography;
			other.Country_Code = this.Country_Code;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.tenure = this.tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.InternetService = this.InternetService;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;
			other.Contract = this.Contract;
			other.PaperlessBilling = this.PaperlessBilling;
			other.PaymentMethod = this.PaymentMethod;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.Sno = this.Sno;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobDBStaging.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobDBStaging.length == 0) {
						commonByteArray_TELECOM_CHURN_jobDBStaging = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobDBStaging = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobDBStaging, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobDBStaging, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobDBStaging) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.customerID = readString(dis);

					this.gender = readString(dis);

					this.SeniorCitizen = readString(dis);

					this.Geography = readString(dis);

					this.Country_Code = readString(dis);

					this.Partner = readString(dis);

					this.Dependents = readString(dis);

					this.tenure = readString(dis);

					this.PhoneService = readString(dis);

					this.MultipleLines = readString(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readString(dis);

					this.OnlineBackup = readString(dis);

					this.DeviceProtection = readString(dis);

					this.TechSupport = readString(dis);

					this.StreamingTV = readString(dis);

					this.StreamingMovies = readString(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readString(dis);

					this.PaymentMethod = readString(dis);

					this.MonthlyCharges = readString(dis);

					this.TotalCharges = readString(dis);

					this.Churn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.customerID, dos);

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.Country_Code, dos);

				// String

				writeString(this.Partner, dos);

				// String

				writeString(this.Dependents, dos);

				// String

				writeString(this.tenure, dos);

				// String

				writeString(this.PhoneService, dos);

				// String

				writeString(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// String

				writeString(this.OnlineSecurity, dos);

				// String

				writeString(this.OnlineBackup, dos);

				// String

				writeString(this.DeviceProtection, dos);

				// String

				writeString(this.TechSupport, dos);

				// String

				writeString(this.StreamingTV, dos);

				// String

				writeString(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// String

				writeString(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// String

				writeString(this.MonthlyCharges, dos);

				// String

				writeString(this.TotalCharges, dos);

				// String

				writeString(this.Churn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",customerID=" + customerID);
			sb.append(",gender=" + gender);
			sb.append(",SeniorCitizen=" + SeniorCitizen);
			sb.append(",Geography=" + Geography);
			sb.append(",Country_Code=" + Country_Code);
			sb.append(",Partner=" + Partner);
			sb.append(",Dependents=" + Dependents);
			sb.append(",tenure=" + tenure);
			sb.append(",PhoneService=" + PhoneService);
			sb.append(",MultipleLines=" + MultipleLines);
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + OnlineSecurity);
			sb.append(",OnlineBackup=" + OnlineBackup);
			sb.append(",DeviceProtection=" + DeviceProtection);
			sb.append(",TechSupport=" + TechSupport);
			sb.append(",StreamingTV=" + StreamingTV);
			sb.append(",StreamingMovies=" + StreamingMovies);
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + PaperlessBilling);
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + MonthlyCharges);
			sb.append(",TotalCharges=" + TotalCharges);
			sb.append(",Churn=" + Churn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Sno, other.Sno);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobDBStaging = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobDBStaging = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String customerID;

		public String getCustomerID() {
			return this.customerID;
		}

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String SeniorCitizen;

		public String getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String Country_Code;

		public String getCountry_Code() {
			return this.Country_Code;
		}

		public String Partner;

		public String getPartner() {
			return this.Partner;
		}

		public String Dependents;

		public String getDependents() {
			return this.Dependents;
		}

		public String tenure;

		public String getTenure() {
			return this.tenure;
		}

		public String PhoneService;

		public String getPhoneService() {
			return this.PhoneService;
		}

		public String MultipleLines;

		public String getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public String OnlineSecurity;

		public String getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public String OnlineBackup;

		public String getOnlineBackup() {
			return this.OnlineBackup;
		}

		public String DeviceProtection;

		public String getDeviceProtection() {
			return this.DeviceProtection;
		}

		public String TechSupport;

		public String getTechSupport() {
			return this.TechSupport;
		}

		public String StreamingTV;

		public String getStreamingTV() {
			return this.StreamingTV;
		}

		public String StreamingMovies;

		public String getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public String PaperlessBilling;

		public String getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public String MonthlyCharges;

		public String getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public String TotalCharges;

		public String getTotalCharges() {
			return this.TotalCharges;
		}

		public String Churn;

		public String getChurn() {
			return this.Churn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Sno == null) ? 0 : this.Sno.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtSortRow_1 other = (OnRowsEndStructtSortRow_1) obj;

			if (this.Sno == null) {
				if (other.Sno != null)
					return false;

			} else if (!this.Sno.equals(other.Sno))

				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtSortRow_1 other) {

			other.Sno = this.Sno;
			other.customerID = this.customerID;
			other.gender = this.gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.Geography = this.Geography;
			other.Country_Code = this.Country_Code;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.tenure = this.tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.InternetService = this.InternetService;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;
			other.Contract = this.Contract;
			other.PaperlessBilling = this.PaperlessBilling;
			other.PaymentMethod = this.PaymentMethod;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;

		}

		public void copyKeysDataTo(OnRowsEndStructtSortRow_1 other) {

			other.Sno = this.Sno;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobDBStaging.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobDBStaging.length == 0) {
						commonByteArray_TELECOM_CHURN_jobDBStaging = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobDBStaging = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobDBStaging, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobDBStaging, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobDBStaging) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.customerID = readString(dis);

					this.gender = readString(dis);

					this.SeniorCitizen = readString(dis);

					this.Geography = readString(dis);

					this.Country_Code = readString(dis);

					this.Partner = readString(dis);

					this.Dependents = readString(dis);

					this.tenure = readString(dis);

					this.PhoneService = readString(dis);

					this.MultipleLines = readString(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readString(dis);

					this.OnlineBackup = readString(dis);

					this.DeviceProtection = readString(dis);

					this.TechSupport = readString(dis);

					this.StreamingTV = readString(dis);

					this.StreamingMovies = readString(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readString(dis);

					this.PaymentMethod = readString(dis);

					this.MonthlyCharges = readString(dis);

					this.TotalCharges = readString(dis);

					this.Churn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.customerID, dos);

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.Country_Code, dos);

				// String

				writeString(this.Partner, dos);

				// String

				writeString(this.Dependents, dos);

				// String

				writeString(this.tenure, dos);

				// String

				writeString(this.PhoneService, dos);

				// String

				writeString(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// String

				writeString(this.OnlineSecurity, dos);

				// String

				writeString(this.OnlineBackup, dos);

				// String

				writeString(this.DeviceProtection, dos);

				// String

				writeString(this.TechSupport, dos);

				// String

				writeString(this.StreamingTV, dos);

				// String

				writeString(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// String

				writeString(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// String

				writeString(this.MonthlyCharges, dos);

				// String

				writeString(this.TotalCharges, dos);

				// String

				writeString(this.Churn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",customerID=" + customerID);
			sb.append(",gender=" + gender);
			sb.append(",SeniorCitizen=" + SeniorCitizen);
			sb.append(",Geography=" + Geography);
			sb.append(",Country_Code=" + Country_Code);
			sb.append(",Partner=" + Partner);
			sb.append(",Dependents=" + Dependents);
			sb.append(",tenure=" + tenure);
			sb.append(",PhoneService=" + PhoneService);
			sb.append(",MultipleLines=" + MultipleLines);
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + OnlineSecurity);
			sb.append(",OnlineBackup=" + OnlineBackup);
			sb.append(",DeviceProtection=" + DeviceProtection);
			sb.append(",TechSupport=" + TechSupport);
			sb.append(",StreamingTV=" + StreamingTV);
			sb.append(",StreamingMovies=" + StreamingMovies);
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + PaperlessBilling);
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + MonthlyCharges);
			sb.append(",TotalCharges=" + TotalCharges);
			sb.append(",Churn=" + Churn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_1 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Sno, other.Sno);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TELECOM_CHURN_jobDBStaging = new byte[0];
		static byte[] commonByteArray_TELECOM_CHURN_jobDBStaging = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Sno;

		public Integer getSno() {
			return this.Sno;
		}

		public String customerID;

		public String getCustomerID() {
			return this.customerID;
		}

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String SeniorCitizen;

		public String getSeniorCitizen() {
			return this.SeniorCitizen;
		}

		public String Geography;

		public String getGeography() {
			return this.Geography;
		}

		public String Country_Code;

		public String getCountry_Code() {
			return this.Country_Code;
		}

		public String Partner;

		public String getPartner() {
			return this.Partner;
		}

		public String Dependents;

		public String getDependents() {
			return this.Dependents;
		}

		public String tenure;

		public String getTenure() {
			return this.tenure;
		}

		public String PhoneService;

		public String getPhoneService() {
			return this.PhoneService;
		}

		public String MultipleLines;

		public String getMultipleLines() {
			return this.MultipleLines;
		}

		public String InternetService;

		public String getInternetService() {
			return this.InternetService;
		}

		public String OnlineSecurity;

		public String getOnlineSecurity() {
			return this.OnlineSecurity;
		}

		public String OnlineBackup;

		public String getOnlineBackup() {
			return this.OnlineBackup;
		}

		public String DeviceProtection;

		public String getDeviceProtection() {
			return this.DeviceProtection;
		}

		public String TechSupport;

		public String getTechSupport() {
			return this.TechSupport;
		}

		public String StreamingTV;

		public String getStreamingTV() {
			return this.StreamingTV;
		}

		public String StreamingMovies;

		public String getStreamingMovies() {
			return this.StreamingMovies;
		}

		public String Contract;

		public String getContract() {
			return this.Contract;
		}

		public String PaperlessBilling;

		public String getPaperlessBilling() {
			return this.PaperlessBilling;
		}

		public String PaymentMethod;

		public String getPaymentMethod() {
			return this.PaymentMethod;
		}

		public String MonthlyCharges;

		public String getMonthlyCharges() {
			return this.MonthlyCharges;
		}

		public String TotalCharges;

		public String getTotalCharges() {
			return this.TotalCharges;
		}

		public String Churn;

		public String getChurn() {
			return this.Churn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Sno == null) ? 0 : this.Sno.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.Sno == null) {
				if (other.Sno != null)
					return false;

			} else if (!this.Sno.equals(other.Sno))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.Sno = this.Sno;
			other.customerID = this.customerID;
			other.gender = this.gender;
			other.SeniorCitizen = this.SeniorCitizen;
			other.Geography = this.Geography;
			other.Country_Code = this.Country_Code;
			other.Partner = this.Partner;
			other.Dependents = this.Dependents;
			other.tenure = this.tenure;
			other.PhoneService = this.PhoneService;
			other.MultipleLines = this.MultipleLines;
			other.InternetService = this.InternetService;
			other.OnlineSecurity = this.OnlineSecurity;
			other.OnlineBackup = this.OnlineBackup;
			other.DeviceProtection = this.DeviceProtection;
			other.TechSupport = this.TechSupport;
			other.StreamingTV = this.StreamingTV;
			other.StreamingMovies = this.StreamingMovies;
			other.Contract = this.Contract;
			other.PaperlessBilling = this.PaperlessBilling;
			other.PaymentMethod = this.PaymentMethod;
			other.MonthlyCharges = this.MonthlyCharges;
			other.TotalCharges = this.TotalCharges;
			other.Churn = this.Churn;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.Sno = this.Sno;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TELECOM_CHURN_jobDBStaging.length) {
					if (length < 1024 && commonByteArray_TELECOM_CHURN_jobDBStaging.length == 0) {
						commonByteArray_TELECOM_CHURN_jobDBStaging = new byte[1024];
					} else {
						commonByteArray_TELECOM_CHURN_jobDBStaging = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TELECOM_CHURN_jobDBStaging, 0, length);
				strReturn = new String(commonByteArray_TELECOM_CHURN_jobDBStaging, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TELECOM_CHURN_jobDBStaging) {

				try {

					int length = 0;

					this.Sno = readInteger(dis);

					this.customerID = readString(dis);

					this.gender = readString(dis);

					this.SeniorCitizen = readString(dis);

					this.Geography = readString(dis);

					this.Country_Code = readString(dis);

					this.Partner = readString(dis);

					this.Dependents = readString(dis);

					this.tenure = readString(dis);

					this.PhoneService = readString(dis);

					this.MultipleLines = readString(dis);

					this.InternetService = readString(dis);

					this.OnlineSecurity = readString(dis);

					this.OnlineBackup = readString(dis);

					this.DeviceProtection = readString(dis);

					this.TechSupport = readString(dis);

					this.StreamingTV = readString(dis);

					this.StreamingMovies = readString(dis);

					this.Contract = readString(dis);

					this.PaperlessBilling = readString(dis);

					this.PaymentMethod = readString(dis);

					this.MonthlyCharges = readString(dis);

					this.TotalCharges = readString(dis);

					this.Churn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Sno, dos);

				// String

				writeString(this.customerID, dos);

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.SeniorCitizen, dos);

				// String

				writeString(this.Geography, dos);

				// String

				writeString(this.Country_Code, dos);

				// String

				writeString(this.Partner, dos);

				// String

				writeString(this.Dependents, dos);

				// String

				writeString(this.tenure, dos);

				// String

				writeString(this.PhoneService, dos);

				// String

				writeString(this.MultipleLines, dos);

				// String

				writeString(this.InternetService, dos);

				// String

				writeString(this.OnlineSecurity, dos);

				// String

				writeString(this.OnlineBackup, dos);

				// String

				writeString(this.DeviceProtection, dos);

				// String

				writeString(this.TechSupport, dos);

				// String

				writeString(this.StreamingTV, dos);

				// String

				writeString(this.StreamingMovies, dos);

				// String

				writeString(this.Contract, dos);

				// String

				writeString(this.PaperlessBilling, dos);

				// String

				writeString(this.PaymentMethod, dos);

				// String

				writeString(this.MonthlyCharges, dos);

				// String

				writeString(this.TotalCharges, dos);

				// String

				writeString(this.Churn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Sno=" + String.valueOf(Sno));
			sb.append(",customerID=" + customerID);
			sb.append(",gender=" + gender);
			sb.append(",SeniorCitizen=" + SeniorCitizen);
			sb.append(",Geography=" + Geography);
			sb.append(",Country_Code=" + Country_Code);
			sb.append(",Partner=" + Partner);
			sb.append(",Dependents=" + Dependents);
			sb.append(",tenure=" + tenure);
			sb.append(",PhoneService=" + PhoneService);
			sb.append(",MultipleLines=" + MultipleLines);
			sb.append(",InternetService=" + InternetService);
			sb.append(",OnlineSecurity=" + OnlineSecurity);
			sb.append(",OnlineBackup=" + OnlineBackup);
			sb.append(",DeviceProtection=" + DeviceProtection);
			sb.append(",TechSupport=" + TechSupport);
			sb.append(",StreamingTV=" + StreamingTV);
			sb.append(",StreamingMovies=" + StreamingMovies);
			sb.append(",Contract=" + Contract);
			sb.append(",PaperlessBilling=" + PaperlessBilling);
			sb.append(",PaymentMethod=" + PaymentMethod);
			sb.append(",MonthlyCharges=" + MonthlyCharges);
			sb.append(",TotalCharges=" + TotalCharges);
			sb.append(",Churn=" + Churn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Sno, other.Sno);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tSortRow_1_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortOut", false);
				start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tSortRow_1_SortOut = 0;

				class Comparablerow1Struct extends row1Struct implements Comparable<Comparablerow1Struct> {

					public int compareTo(Comparablerow1Struct other) {

						if (this.Sno == null && other.Sno != null) {
							return -1;

						} else if (this.Sno != null && other.Sno == null) {
							return 1;

						} else if (this.Sno != null && other.Sno != null) {
							if (!this.Sno.equals(other.Sno)) {
								return this.Sno.compareTo(other.Sno);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow1Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow1Struct>();

				/**
				 * [tSortRow_1_SortOut begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "D:/Data Curation & Modelling/Telecom_1.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"D:/Data Curation & Modelling/Telecom_1.csv", "US-ASCII", ",", "\n", false, 1, 0,
								limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Sno = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Sno", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								row1.Sno = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.customerID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.gender = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.SeniorCitizen = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row1.Geography = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row1.Country_Code = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row1.Partner = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row1.Dependents = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row1.tenure = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							row1.PhoneService = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 10;

							row1.MultipleLines = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 11;

							row1.InternetService = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 12;

							row1.OnlineSecurity = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 13;

							row1.OnlineBackup = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 14;

							row1.DeviceProtection = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 15;

							row1.TechSupport = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 16;

							row1.StreamingTV = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 17;

							row1.StreamingMovies = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 18;

							row1.Contract = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 19;

							row1.PaperlessBilling = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 20;

							row1.PaymentMethod = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 21;

							row1.MonthlyCharges = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 22;

							row1.TotalCharges = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 23;

							row1.Churn = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tSortRow_1_SortOut main ] start
							 */

							currentVirtualComponent = "tSortRow_1";

							currentComponent = "tSortRow_1_SortOut";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

							Comparablerow1Struct arrayRowtSortRow_1_SortOut = new Comparablerow1Struct();

							arrayRowtSortRow_1_SortOut.Sno = row1.Sno;
							arrayRowtSortRow_1_SortOut.customerID = row1.customerID;
							arrayRowtSortRow_1_SortOut.gender = row1.gender;
							arrayRowtSortRow_1_SortOut.SeniorCitizen = row1.SeniorCitizen;
							arrayRowtSortRow_1_SortOut.Geography = row1.Geography;
							arrayRowtSortRow_1_SortOut.Country_Code = row1.Country_Code;
							arrayRowtSortRow_1_SortOut.Partner = row1.Partner;
							arrayRowtSortRow_1_SortOut.Dependents = row1.Dependents;
							arrayRowtSortRow_1_SortOut.tenure = row1.tenure;
							arrayRowtSortRow_1_SortOut.PhoneService = row1.PhoneService;
							arrayRowtSortRow_1_SortOut.MultipleLines = row1.MultipleLines;
							arrayRowtSortRow_1_SortOut.InternetService = row1.InternetService;
							arrayRowtSortRow_1_SortOut.OnlineSecurity = row1.OnlineSecurity;
							arrayRowtSortRow_1_SortOut.OnlineBackup = row1.OnlineBackup;
							arrayRowtSortRow_1_SortOut.DeviceProtection = row1.DeviceProtection;
							arrayRowtSortRow_1_SortOut.TechSupport = row1.TechSupport;
							arrayRowtSortRow_1_SortOut.StreamingTV = row1.StreamingTV;
							arrayRowtSortRow_1_SortOut.StreamingMovies = row1.StreamingMovies;
							arrayRowtSortRow_1_SortOut.Contract = row1.Contract;
							arrayRowtSortRow_1_SortOut.PaperlessBilling = row1.PaperlessBilling;
							arrayRowtSortRow_1_SortOut.PaymentMethod = row1.PaymentMethod;
							arrayRowtSortRow_1_SortOut.MonthlyCharges = row1.MonthlyCharges;
							arrayRowtSortRow_1_SortOut.TotalCharges = row1.TotalCharges;
							arrayRowtSortRow_1_SortOut.Churn = row1.Churn;
							list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

							tos_count_tSortRow_1_SortOut++;

							/**
							 * [tSortRow_1_SortOut main ] stop
							 */

							/**
							 * [tSortRow_1_SortOut process_data_begin ] start
							 */

							currentVirtualComponent = "tSortRow_1";

							currentComponent = "tSortRow_1_SortOut";

							/**
							 * [tSortRow_1_SortOut process_data_begin ] stop
							 */

							/**
							 * [tSortRow_1_SortOut process_data_end ] start
							 */

							currentVirtualComponent = "tSortRow_1";

							currentComponent = "tSortRow_1_SortOut";

							/**
							 * [tSortRow_1_SortOut process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("D:/Data Curation & Modelling/Telecom_1.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				row1Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparablerow1Struct[0]);

				java.util.Arrays.sort(array_tSortRow_1_SortOut);

				globalMap.put("tSortRow_1", array_tSortRow_1_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tSortRow_1_SortOut", true);
				end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortOut end ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;

				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "telecom_customer_raw";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbProperties_tDBOutput_1 = "noDatetimeStringSync=true";
				String url_tDBOutput_1 = null;
				if (dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
					url_tDBOutput_1 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "telecom_staging" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_1 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "telecom_staging" + "?"
							+ properties_tDBOutput_1;
				}
				String driverClass_tDBOutput_1 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_1 = "root";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:EQXwwre8CCAyLWBNQ2hEzGSHD08qURkuF6EG8i9ncfn/hj0Pig==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables("telecom_staging", null,
						null, new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_1.next()) {
						String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
						if (table_tDBOutput_1.equalsIgnoreCase("telecom_customer_raw")) {
							whetherExist_tDBOutput_1 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtDrop_tDBOutput_1.execute("DROP TABLE `" + tableName_tDBOutput_1 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtCreate_tDBOutput_1.execute("CREATE TABLE `" + tableName_tDBOutput_1
							+ "`(`Sno` INT(0)  ,`customerID` VARCHAR(255)  ,`gender` VARCHAR(255)  ,`SeniorCitizen` VARCHAR(255)  ,`Geography` VARCHAR(255)  ,`Country_Code` VARCHAR(255)  ,`Partner` VARCHAR(255)  ,`Dependents` VARCHAR(255)  ,`tenure` VARCHAR(255)  ,`PhoneService` VARCHAR(255)  ,`MultipleLines` VARCHAR(255)  ,`InternetService` VARCHAR(255)  ,`OnlineSecurity` VARCHAR(255)  ,`OnlineBackup` VARCHAR(255)  ,`DeviceProtection` VARCHAR(255)  ,`TechSupport` VARCHAR(255)  ,`StreamingTV` VARCHAR(255)  ,`StreamingMovies` VARCHAR(255)  ,`Contract` VARCHAR(255)  ,`PaperlessBilling` VARCHAR(255)  ,`PaymentMethod` VARCHAR(255)  ,`MonthlyCharges` VARCHAR(255)  ,`TotalCharges` VARCHAR(255)  ,`Churn` VARCHAR(255)  ,primary key(`Sno`))");
				}

				String insert_tDBOutput_1 = "INSERT INTO `" + "telecom_customer_raw"
						+ "` (`Sno`,`customerID`,`gender`,`SeniorCitizen`,`Geography`,`Country_Code`,`Partner`,`Dependents`,`tenure`,`PhoneService`,`MultipleLines`,`InternetService`,`OnlineSecurity`,`OnlineBackup`,`DeviceProtection`,`TechSupport`,`StreamingTV`,`StreamingMovies`,`Contract`,`PaperlessBilling`,`PaymentMethod`,`MonthlyCharges`,`TotalCharges`,`Churn`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_1 = 100;
				int batchSizeCounter_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tSortRow_1_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortIn", false);
				start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				int tos_count_tSortRow_1_SortIn = 0;

				row1Struct[] array_tSortRow_1_SortIn = (row1Struct[]) globalMap.remove("tSortRow_1");

				int nb_line_tSortRow_1_SortIn = 0;

				row1Struct current_tSortRow_1_SortIn = null;

				for (int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++) {
					current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
					row2.Sno = current_tSortRow_1_SortIn.Sno;
					row2.customerID = current_tSortRow_1_SortIn.customerID;
					row2.gender = current_tSortRow_1_SortIn.gender;
					row2.SeniorCitizen = current_tSortRow_1_SortIn.SeniorCitizen;
					row2.Geography = current_tSortRow_1_SortIn.Geography;
					row2.Country_Code = current_tSortRow_1_SortIn.Country_Code;
					row2.Partner = current_tSortRow_1_SortIn.Partner;
					row2.Dependents = current_tSortRow_1_SortIn.Dependents;
					row2.tenure = current_tSortRow_1_SortIn.tenure;
					row2.PhoneService = current_tSortRow_1_SortIn.PhoneService;
					row2.MultipleLines = current_tSortRow_1_SortIn.MultipleLines;
					row2.InternetService = current_tSortRow_1_SortIn.InternetService;
					row2.OnlineSecurity = current_tSortRow_1_SortIn.OnlineSecurity;
					row2.OnlineBackup = current_tSortRow_1_SortIn.OnlineBackup;
					row2.DeviceProtection = current_tSortRow_1_SortIn.DeviceProtection;
					row2.TechSupport = current_tSortRow_1_SortIn.TechSupport;
					row2.StreamingTV = current_tSortRow_1_SortIn.StreamingTV;
					row2.StreamingMovies = current_tSortRow_1_SortIn.StreamingMovies;
					row2.Contract = current_tSortRow_1_SortIn.Contract;
					row2.PaperlessBilling = current_tSortRow_1_SortIn.PaperlessBilling;
					row2.PaymentMethod = current_tSortRow_1_SortIn.PaymentMethod;
					row2.MonthlyCharges = current_tSortRow_1_SortIn.MonthlyCharges;
					row2.TotalCharges = current_tSortRow_1_SortIn.TotalCharges;
					row2.Churn = current_tSortRow_1_SortIn.Churn;
					// increase number of line sorted
					nb_line_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_1_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					tos_count_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn main ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_begin ] stop
					 */

					/**
					 * [tDBOutput_1 main ] start
					 */

					currentComponent = "tDBOutput_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
					}

					whetherReject_tDBOutput_1 = false;
					if (row2.Sno == null) {
						pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
					} else {
						pstmt_tDBOutput_1.setInt(1, row2.Sno);
					}

					if (row2.customerID == null) {
						pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(2, row2.customerID);
					}

					if (row2.gender == null) {
						pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(3, row2.gender);
					}

					if (row2.SeniorCitizen == null) {
						pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(4, row2.SeniorCitizen);
					}

					if (row2.Geography == null) {
						pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(5, row2.Geography);
					}

					if (row2.Country_Code == null) {
						pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(6, row2.Country_Code);
					}

					if (row2.Partner == null) {
						pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(7, row2.Partner);
					}

					if (row2.Dependents == null) {
						pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(8, row2.Dependents);
					}

					if (row2.tenure == null) {
						pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(9, row2.tenure);
					}

					if (row2.PhoneService == null) {
						pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(10, row2.PhoneService);
					}

					if (row2.MultipleLines == null) {
						pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(11, row2.MultipleLines);
					}

					if (row2.InternetService == null) {
						pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(12, row2.InternetService);
					}

					if (row2.OnlineSecurity == null) {
						pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(13, row2.OnlineSecurity);
					}

					if (row2.OnlineBackup == null) {
						pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(14, row2.OnlineBackup);
					}

					if (row2.DeviceProtection == null) {
						pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(15, row2.DeviceProtection);
					}

					if (row2.TechSupport == null) {
						pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(16, row2.TechSupport);
					}

					if (row2.StreamingTV == null) {
						pstmt_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(17, row2.StreamingTV);
					}

					if (row2.StreamingMovies == null) {
						pstmt_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(18, row2.StreamingMovies);
					}

					if (row2.Contract == null) {
						pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(19, row2.Contract);
					}

					if (row2.PaperlessBilling == null) {
						pstmt_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(20, row2.PaperlessBilling);
					}

					if (row2.PaymentMethod == null) {
						pstmt_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(21, row2.PaymentMethod);
					}

					if (row2.MonthlyCharges == null) {
						pstmt_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(22, row2.MonthlyCharges);
					}

					if (row2.TotalCharges == null) {
						pstmt_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(23, row2.TotalCharges);
					}

					if (row2.Churn == null) {
						pstmt_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(24, row2.Churn);
					}

					pstmt_tDBOutput_1.addBatch();
					nb_line_tDBOutput_1++;

					batchSizeCounter_tDBOutput_1++;
					if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
						try {
							int countSum_tDBOutput_1 = 0;
							for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
										: 1);
							}
							insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
						} catch (java.sql.BatchUpdateException e) {
							int countSum_tDBOutput_1 = 0;
							for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
							}
							insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
							System.err.println(e.getMessage());
						}

						batchSizeCounter_tDBOutput_1 = 0;
					}
					commitCounter_tDBOutput_1++;

					if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

						try {
							int countSum_tDBOutput_1 = 0;
							for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
							}
							insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
						} catch (java.sql.BatchUpdateException e) {
							int countSum_tDBOutput_1 = 0;
							for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
							}
							insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
							System.err.println(e.getMessage());

						}
						conn_tDBOutput_1.commit();
						commitCounter_tDBOutput_1 = 0;

					}

					tos_count_tDBOutput_1++;

					/**
					 * [tDBOutput_1 main ] stop
					 */

					/**
					 * [tDBOutput_1 process_data_begin ] start
					 */

					currentComponent = "tDBOutput_1";

					/**
					 * [tDBOutput_1 process_data_begin ] stop
					 */

					/**
					 * [tDBOutput_1 process_data_end ] start
					 */

					currentComponent = "tDBOutput_1";

					/**
					 * [tDBOutput_1 process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

				}

				globalMap.put("tSortRow_1_SortIn_NB_LINE", nb_line_tSortRow_1_SortIn);

				ok_Hash.put("tSortRow_1_SortIn", true);
				end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortIn end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (batchSizeCounter_tDBOutput_1 != 0) {
						int countSum_tDBOutput_1 = 0;

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_1 = 0;

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0) {

					conn_tDBOutput_1.commit();

				}

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tSortRow_1_SortIn"
			globalMap.remove("tSortRow_1");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tSortRow_1_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				/**
				 * [tSortRow_1_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_1_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				/**
				 * [tSortRow_1_SortIn finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final jobDBStaging jobDBStagingClass = new jobDBStaging();

		int exitCode = jobDBStagingClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = jobDBStaging.class.getClassLoader()
					.getResourceAsStream("telecom_churn/jobdbstaging_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = jobDBStaging.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBConnection_1) {
			globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

			e_tDBConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : jobDBStaging");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 102183 characters generated by Talend Open Studio for Data Integration on the
 * November 10, 2020 10:27:30 PM CET
 ************************************************************************************************/